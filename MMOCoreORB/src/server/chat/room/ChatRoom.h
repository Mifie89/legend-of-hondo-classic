/*
 *	server/chat/room/ChatRoom.h generated by engine3 IDL compiler 0.55
 */

#ifndef CHATROOM_H_
#define CHATROOM_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/service/proto/BaseMessage.h"

class ZoneServer;

class Player;

class ChatRoom : public DistributedObjectStub {
public:
	ChatRoom(ZoneServer* server, const string& name, unsigned int cid);

	ChatRoom(ZoneServer* server, ChatRoom* parent, const string& name, unsigned int cid);

	void sendTo(Player* player);

	void sendDestroyTo(Player* player);

	void addSubRoom(ChatRoom* channel);

	void removeSubRoom(ChatRoom* channel);

	ChatRoom* getSubRoom(int i);

	ChatRoom* getSubRoom(const string& name);

	void addPlayer(Player* player, bool doLock = true);

	void removePlayer(Player* player, bool doLock = true);

	void removePlayer(const string& player);

	void broadcastMessage(BaseMessage* msg);

	bool hasPlayer(Player* player);

	bool hasPlayer(const string& name);

	void removeAllPlayers();

	void setPrivate();

	void setPublic();

	bool isPublic();

	bool isPrivate();

	Player* getPlayer(int idx);

	int getPlayerSize();

	void setName(const string& Name);

	string& getName();

	string& getFullPath();

	string& getOwner();

	string& getCreator();

	unicode& getTitle();

	string& getServerName();

	void setOwner(const string& Owner);

	void setCreator(const string& Creator);

	void setTitle(const string& Title);

	unsigned int getRoomID();

	int getSubRoomsSize();

	ChatRoom* getParent();

	int compareTo(ChatRoom* obj);

protected:
	ChatRoom(DummyConstructorParameter* param);

	virtual ~ChatRoom();

	string _return_getCreator;
	string _return_getFullPath;
	string _return_getName;
	string _return_getOwner;
	string _return_getServerName;

	unicode _return_getTitle;

	friend class ChatRoomHelper;
};

class ChatRoomImplementation;

class ChatRoomAdapter : public DistributedObjectAdapter {
public:
	ChatRoomAdapter(ChatRoomImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void sendTo(Player* player);

	void sendDestroyTo(Player* player);

	void addSubRoom(ChatRoom* channel);

	void removeSubRoom(ChatRoom* channel);

	ChatRoom* getSubRoom(int i);

	ChatRoom* getSubRoom(const string& name);

	void addPlayer(Player* player, bool doLock);

	void removePlayer(Player* player, bool doLock);

	void removePlayer(const string& player);

	void broadcastMessage(BaseMessage* msg);

	bool hasPlayer(Player* player);

	bool hasPlayer(const string& name);

	void removeAllPlayers();

	void setPrivate();

	void setPublic();

	bool isPublic();

	bool isPrivate();

	Player* getPlayer(int idx);

	int getPlayerSize();

	void setName(const string& Name);

	string& getName();

	string& getFullPath();

	string& getOwner();

	string& getCreator();

	unicode& getTitle();

	string& getServerName();

	void setOwner(const string& Owner);

	void setCreator(const string& Creator);

	void setTitle(const string& Title);

	unsigned int getRoomID();

	int getSubRoomsSize();

	ChatRoom* getParent();

	int compareTo(ChatRoom* obj);

protected:
	string _param0_getSubRoom__string_;
	string _param0_removePlayer__string_;
	string _param0_hasPlayer__string_;
	string _param0_setName__string_;
	string _param0_setOwner__string_;
	string _param0_setCreator__string_;
	string _param0_setTitle__string_;
};

class ChatRoomHelper : public DistributedObjectClassHelper, public Singleton<ChatRoomHelper> {
	static ChatRoomHelper* staticInitializer;

public:
	ChatRoomHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<ChatRoomHelper>;
};

class ChatRoomServant : public DistributedObjectServant {
public:
	ChatRoom* _this;

public:
	ChatRoomServant();
	virtual ~ChatRoomServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*CHATROOM_H_*/
