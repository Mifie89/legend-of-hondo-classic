/*
 *	server/zone/ZoneServer.cpp generated by engine3 IDL compiler 0.55
 */

#include "ZoneServer.h"

#include "ZoneServerImplementation.h"

#include "objects/scene/SceneObject.h"

#include "managers/user/UserManager.h"

#include "managers/guild/GuildManager.h"

#include "managers/player/PlayerManager.h"

#include "managers/crafting/CraftingManager.h"

#include "managers/item/ItemManager.h"

#include "managers/resource/ResourceManager.h"

#include "managers/loot/LootTableManager.h"

#include "managers/bazaar/BazaarManager.h"

#include "managers/bank/BankManager.h"

#include "../chat/ChatManager.h"

#include "Zone.h"

/*
 *	ZoneServerStub
 */

ZoneServer::ZoneServer(int threadcount) {
	_impl = new ZoneServerImplementation(threadcount);
	_impl->_setStub(this);
}

ZoneServer::ZoneServer(DummyConstructorParameter* param) {
	_impl = NULL;
}

ZoneServer::~ZoneServer() {
}

void ZoneServer::start(int port, int conn) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addSignedIntParameter(port);
		method.addSignedIntParameter(conn);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->start(port, conn);
}

void ZoneServer::stop() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->stop();
}

void ZoneServer::startManagers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->startManagers();
}

void ZoneServer::addObject(SceneObject* obj, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(obj);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->addObject(obj, doLock);
}

SceneObject* ZoneServer::getObject(unsigned long long oid, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addUnsignedLongParameter(oid);
		method.addBooleanParameter(doLock);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getObject(oid, doLock);
}

SceneObject* ZoneServer::removeObject(unsigned long long oid, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addUnsignedLongParameter(oid);
		method.addBooleanParameter(doLock);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->removeObject(oid, doLock);
}

SceneObject* ZoneServer::removeObject(SceneObject* obj, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(obj);
		method.addBooleanParameter(doLock);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->removeObject(obj, doLock);
}

bool ZoneServer::destroyObject(SceneObject* obj, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(obj);
		method.addBooleanParameter(doLock);

		return method.executeWithBooleanReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->destroyObject(obj, doLock);
}

SceneObject* ZoneServer::getCachedObject(unsigned long long oid, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addUnsignedLongParameter(oid);
		method.addBooleanParameter(doLock);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getCachedObject(oid, doLock);
}

SceneObject* ZoneServer::removeCachedObject(unsigned long long oid, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addUnsignedLongParameter(oid);
		method.addBooleanParameter(doLock);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->removeCachedObject(oid, doLock);
}

SceneObject* ZoneServer::removeCachedObject(SceneObject* obj, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(obj);
		method.addBooleanParameter(doLock);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->removeCachedObject(obj, doLock);
}

bool ZoneServer::banUser(string& name, string& admin) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addAsciiParameter(name);
		method.addAsciiParameter(admin);

		return method.executeWithBooleanReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->banUser(name, admin);
}

bool ZoneServer::kickUser(string& name, string& admin) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addAsciiParameter(name);
		method.addAsciiParameter(admin);

		return method.executeWithBooleanReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->kickUser(name, admin);
}

void ZoneServer::changeUserCap(int amount) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addSignedIntParameter(amount);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->changeUserCap(amount);
}

void ZoneServer::addTotalSentPacket(int count) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addSignedIntParameter(count);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->addTotalSentPacket(count);
}

void ZoneServer::addTotalResentPacket(int count) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addSignedIntParameter(count);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->addTotalResentPacket(count);
}

void ZoneServer::lock() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->lock();
}

void ZoneServer::unlock() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->unlock();
}

void ZoneServer::increaseTotalDeletedPlayers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->increaseTotalDeletedPlayers();
}

void ZoneServer::printInfo() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->printInfo();
}

void ZoneServer::fixScheduler() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->fixScheduler();
}

ChatManager* ZoneServer::getChatManager() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		return (ChatManager*) method.executeWithObjectReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getChatManager();
}

GuildManager* ZoneServer::getGuildManager() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);

		return (GuildManager*) method.executeWithObjectReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getGuildManager();
}

PlayerManager* ZoneServer::getPlayerManager() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		return (PlayerManager*) method.executeWithObjectReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getPlayerManager();
}

UserManager* ZoneServer::getUserManager() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);

		return (UserManager*) method.executeWithObjectReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getUserManager();
}

CraftingManager* ZoneServer::getCraftingManager() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);

		return (CraftingManager*) method.executeWithObjectReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getCraftingManager();
}

ItemManager* ZoneServer::getItemManager() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		return (ItemManager*) method.executeWithObjectReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getItemManager();
}

ResourceManager* ZoneServer::getResourceManager() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		return (ResourceManager*) method.executeWithObjectReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getResourceManager();
}

LootTableManager* ZoneServer::getLootTableManager() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);

		return (LootTableManager*) method.executeWithObjectReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getLootTableManager();
}

BazaarManager* ZoneServer::getBazaarManager() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);

		return (BazaarManager*) method.executeWithObjectReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getBazaarManager();
}

BankManager* ZoneServer::getBankManager() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		return (BankManager*) method.executeWithObjectReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getBankManager();
}

Zone* ZoneServer::getZone(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);
		method.addSignedIntParameter(index);

		return (Zone*) method.executeWithObjectReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getZone(index);
}

string& ZoneServer::getServerName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);

		method.executeWithAsciiReturn(_return_getServerName);
		return _return_getServerName;
	} else
		return ((ZoneServerImplementation*) _impl)->getServerName();
}

int ZoneServer::getConnectionCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);

		return method.executeWithSignedIntReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getConnectionCount();
}

int ZoneServer::getTotalPlayers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);

		return method.executeWithSignedIntReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getTotalPlayers();
}

int ZoneServer::getMaxPlayers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);

		return method.executeWithSignedIntReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getMaxPlayers();
}

int ZoneServer::getDeletedPlayers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);

		return method.executeWithSignedIntReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getDeletedPlayers();
}

unsigned long long ZoneServer::getStartTimestamp() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getStartTimestamp();
}

unsigned long long ZoneServer::getNextCreatureID(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);
		method.addBooleanParameter(doLock);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getNextCreatureID(doLock);
}

/*
 *	ZoneServerAdapter
 */

ZoneServerAdapter::ZoneServerAdapter(ZoneServerImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* ZoneServerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		start(inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 7:
		stop();
		break;
	case 8:
		startManagers();
		break;
	case 9:
		addObject((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 10:
		resp->insertLong(getObject(inv->getUnsignedLongParameter(), inv->getBooleanParameter())->_getObjectID());
		break;
	case 11:
		resp->insertLong(removeObject(inv->getUnsignedLongParameter(), inv->getBooleanParameter())->_getObjectID());
		break;
	case 12:
		resp->insertLong(removeObject((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter())->_getObjectID());
		break;
	case 13:
		resp->insertBoolean(destroyObject((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter()));
		break;
	case 14:
		resp->insertLong(getCachedObject(inv->getUnsignedLongParameter(), inv->getBooleanParameter())->_getObjectID());
		break;
	case 15:
		resp->insertLong(removeCachedObject(inv->getUnsignedLongParameter(), inv->getBooleanParameter())->_getObjectID());
		break;
	case 16:
		resp->insertLong(removeCachedObject((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter())->_getObjectID());
		break;
	case 17:
		resp->insertBoolean(banUser(inv->getAsciiParameter(_param0_banUser__string_string_), inv->getAsciiParameter(_param1_banUser__string_string_)));
		break;
	case 18:
		resp->insertBoolean(kickUser(inv->getAsciiParameter(_param0_kickUser__string_string_), inv->getAsciiParameter(_param1_kickUser__string_string_)));
		break;
	case 19:
		changeUserCap(inv->getSignedIntParameter());
		break;
	case 20:
		addTotalSentPacket(inv->getSignedIntParameter());
		break;
	case 21:
		addTotalResentPacket(inv->getSignedIntParameter());
		break;
	case 22:
		lock();
		break;
	case 23:
		unlock();
		break;
	case 24:
		increaseTotalDeletedPlayers();
		break;
	case 25:
		printInfo();
		break;
	case 26:
		fixScheduler();
		break;
	case 27:
		resp->insertLong(getChatManager()->_getObjectID());
		break;
	case 28:
		resp->insertLong(getGuildManager()->_getObjectID());
		break;
	case 29:
		resp->insertLong(getPlayerManager()->_getObjectID());
		break;
	case 30:
		resp->insertLong(getUserManager()->_getObjectID());
		break;
	case 31:
		resp->insertLong(getCraftingManager()->_getObjectID());
		break;
	case 32:
		resp->insertLong(getItemManager()->_getObjectID());
		break;
	case 33:
		resp->insertLong(getResourceManager()->_getObjectID());
		break;
	case 34:
		resp->insertLong(getLootTableManager()->_getObjectID());
		break;
	case 35:
		resp->insertLong(getBazaarManager()->_getObjectID());
		break;
	case 36:
		resp->insertLong(getBankManager()->_getObjectID());
		break;
	case 37:
		resp->insertLong(getZone(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 38:
		resp->insertAscii(getServerName());
		break;
	case 39:
		resp->insertSignedInt(getConnectionCount());
		break;
	case 40:
		resp->insertSignedInt(getTotalPlayers());
		break;
	case 41:
		resp->insertSignedInt(getMaxPlayers());
		break;
	case 42:
		resp->insertSignedInt(getDeletedPlayers());
		break;
	case 43:
		resp->insertLong(getStartTimestamp());
		break;
	case 44:
		resp->insertLong(getNextCreatureID(inv->getBooleanParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void ZoneServerAdapter::start(int port, int conn) {
	return ((ZoneServerImplementation*) impl)->start(port, conn);
}

void ZoneServerAdapter::stop() {
	return ((ZoneServerImplementation*) impl)->stop();
}

void ZoneServerAdapter::startManagers() {
	return ((ZoneServerImplementation*) impl)->startManagers();
}

void ZoneServerAdapter::addObject(SceneObject* obj, bool doLock) {
	return ((ZoneServerImplementation*) impl)->addObject(obj, doLock);
}

SceneObject* ZoneServerAdapter::getObject(unsigned long long oid, bool doLock) {
	return ((ZoneServerImplementation*) impl)->getObject(oid, doLock);
}

SceneObject* ZoneServerAdapter::removeObject(unsigned long long oid, bool doLock) {
	return ((ZoneServerImplementation*) impl)->removeObject(oid, doLock);
}

SceneObject* ZoneServerAdapter::removeObject(SceneObject* obj, bool doLock) {
	return ((ZoneServerImplementation*) impl)->removeObject(obj, doLock);
}

bool ZoneServerAdapter::destroyObject(SceneObject* obj, bool doLock) {
	return ((ZoneServerImplementation*) impl)->destroyObject(obj, doLock);
}

SceneObject* ZoneServerAdapter::getCachedObject(unsigned long long oid, bool doLock) {
	return ((ZoneServerImplementation*) impl)->getCachedObject(oid, doLock);
}

SceneObject* ZoneServerAdapter::removeCachedObject(unsigned long long oid, bool doLock) {
	return ((ZoneServerImplementation*) impl)->removeCachedObject(oid, doLock);
}

SceneObject* ZoneServerAdapter::removeCachedObject(SceneObject* obj, bool doLock) {
	return ((ZoneServerImplementation*) impl)->removeCachedObject(obj, doLock);
}

bool ZoneServerAdapter::banUser(string& name, string& admin) {
	return ((ZoneServerImplementation*) impl)->banUser(name, admin);
}

bool ZoneServerAdapter::kickUser(string& name, string& admin) {
	return ((ZoneServerImplementation*) impl)->kickUser(name, admin);
}

void ZoneServerAdapter::changeUserCap(int amount) {
	return ((ZoneServerImplementation*) impl)->changeUserCap(amount);
}

void ZoneServerAdapter::addTotalSentPacket(int count) {
	return ((ZoneServerImplementation*) impl)->addTotalSentPacket(count);
}

void ZoneServerAdapter::addTotalResentPacket(int count) {
	return ((ZoneServerImplementation*) impl)->addTotalResentPacket(count);
}

void ZoneServerAdapter::lock() {
	return ((ZoneServerImplementation*) impl)->lock();
}

void ZoneServerAdapter::unlock() {
	return ((ZoneServerImplementation*) impl)->unlock();
}

void ZoneServerAdapter::increaseTotalDeletedPlayers() {
	return ((ZoneServerImplementation*) impl)->increaseTotalDeletedPlayers();
}

void ZoneServerAdapter::printInfo() {
	return ((ZoneServerImplementation*) impl)->printInfo();
}

void ZoneServerAdapter::fixScheduler() {
	return ((ZoneServerImplementation*) impl)->fixScheduler();
}

ChatManager* ZoneServerAdapter::getChatManager() {
	return ((ZoneServerImplementation*) impl)->getChatManager();
}

GuildManager* ZoneServerAdapter::getGuildManager() {
	return ((ZoneServerImplementation*) impl)->getGuildManager();
}

PlayerManager* ZoneServerAdapter::getPlayerManager() {
	return ((ZoneServerImplementation*) impl)->getPlayerManager();
}

UserManager* ZoneServerAdapter::getUserManager() {
	return ((ZoneServerImplementation*) impl)->getUserManager();
}

CraftingManager* ZoneServerAdapter::getCraftingManager() {
	return ((ZoneServerImplementation*) impl)->getCraftingManager();
}

ItemManager* ZoneServerAdapter::getItemManager() {
	return ((ZoneServerImplementation*) impl)->getItemManager();
}

ResourceManager* ZoneServerAdapter::getResourceManager() {
	return ((ZoneServerImplementation*) impl)->getResourceManager();
}

LootTableManager* ZoneServerAdapter::getLootTableManager() {
	return ((ZoneServerImplementation*) impl)->getLootTableManager();
}

BazaarManager* ZoneServerAdapter::getBazaarManager() {
	return ((ZoneServerImplementation*) impl)->getBazaarManager();
}

BankManager* ZoneServerAdapter::getBankManager() {
	return ((ZoneServerImplementation*) impl)->getBankManager();
}

Zone* ZoneServerAdapter::getZone(int index) {
	return ((ZoneServerImplementation*) impl)->getZone(index);
}

string& ZoneServerAdapter::getServerName() {
	return ((ZoneServerImplementation*) impl)->getServerName();
}

int ZoneServerAdapter::getConnectionCount() {
	return ((ZoneServerImplementation*) impl)->getConnectionCount();
}

int ZoneServerAdapter::getTotalPlayers() {
	return ((ZoneServerImplementation*) impl)->getTotalPlayers();
}

int ZoneServerAdapter::getMaxPlayers() {
	return ((ZoneServerImplementation*) impl)->getMaxPlayers();
}

int ZoneServerAdapter::getDeletedPlayers() {
	return ((ZoneServerImplementation*) impl)->getDeletedPlayers();
}

unsigned long long ZoneServerAdapter::getStartTimestamp() {
	return ((ZoneServerImplementation*) impl)->getStartTimestamp();
}

unsigned long long ZoneServerAdapter::getNextCreatureID(bool doLock) {
	return ((ZoneServerImplementation*) impl)->getNextCreatureID(doLock);
}

/*
 *	ZoneServerHelper
 */

ZoneServerHelper* ZoneServerHelper::staticInitializer = ZoneServerHelper::instance();

ZoneServerHelper::ZoneServerHelper() {
	className = "ZoneServer";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ZoneServerHelper::finalizeHelper() {
	ZoneServerHelper::finalize();
}

DistributedObject* ZoneServerHelper::instantiateObject() {
	return new ZoneServer(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ZoneServerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ZoneServerAdapter((ZoneServerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ZoneServerServant
 */

ZoneServerServant::ZoneServerServant() {
	_classHelper = ZoneServerHelper::instance();
}

ZoneServerServant::~ZoneServerServant() {
}

void ZoneServerServant::_setStub(DistributedObjectStub* stub) {
	_this = (ZoneServer*) stub;
}

DistributedObjectStub* ZoneServerServant::_getStub() {
	return _this;
}

