/*
 *	server/zone/objects/player/Player.cpp generated by engine3 IDL compiler 0.55
 */

#include "Player.h"

#include "PlayerImplementation.h"

#include "../../ZoneClientSession.h"

#include "../../Zone.h"

#include "../scene/SceneObject.h"

#include "../creature/CreatureObject.h"

#include "../creature/Creature.h"

#include "../tangible/TangibleObject.h"

#include "PlayerObject.h"

#include "faction/FactionPointList.h"

#include "../tangible/weapons/Weapon.h"

#include "../tangible/wearables/Armor.h"

#include "../tangible/attachment/Attachment.h"

#include "../tangible/powerup/Powerup.h"

#include "../tangible/Datapad.h"

#include "../tangible/surveytool/SurveyTool.h"

#include "../group/GroupObject.h"

#include "../guild/Guild.h"

#include "../waypoint/WaypointObject.h"

#include "../../../chat/room/ChatRoom.h"

#include "sui/SuiBox.h"

#include "sui/listbox/SuiListBoxVector.h"

#include "../draftschematic/DraftSchematic.h"

#include "../tangible/crafting/CraftingTool.h"

#include "../tangible/resource/ResourceContainer.h"

/*
 *	PlayerStub
 */

Player::Player() : CreatureObject(DummyConstructorParameter::instance()) {
	_impl = new PlayerImplementation();
	_impl->_setStub(this);
}

Player::Player(unsigned long long oid) : CreatureObject(DummyConstructorParameter::instance()) {
	_impl = new PlayerImplementation(oid);
	_impl->_setStub(this);
}

Player::Player(DummyConstructorParameter* param) : CreatureObject(param) {
}

Player::~Player() {
}

void Player::initialize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->initialize();
}

void Player::create(ZoneClientSession* client) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->create(client);
}

void Player::refuseCreate(ZoneClientSession* client) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->refuseCreate(client);
}

void Player::load(ZoneClientSession* client) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->load(client);
}

void Player::reload(ZoneClientSession* client) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->reload(client);
}

void Player::unload() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->unload();
}

void Player::savePlayerState(bool doSchedule) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addBooleanParameter(doSchedule);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->savePlayerState(doSchedule);
}

void Player::disconnect(bool closeClient, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addBooleanParameter(closeClient);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->disconnect(closeClient, doLock);
}

void Player::logout(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->logout(doLock);
}

void Player::userLogout(int msgCounter) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addSignedIntParameter(msgCounter);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->userLogout(msgCounter);
}

void Player::resurrectCountdown(int counter) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addSignedIntParameter(counter);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->resurrectCountdown(counter);
}

void Player::clearLogoutEvent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->clearLogoutEvent();
}

void Player::clearResurrectEvent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->clearResurrectEvent();
}

void Player::makeCharacterMask() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->makeCharacterMask();
}

unsigned int Player::getCharacterMask() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getCharacterMask();
}

void Player::insertToZone(Zone* zone) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->insertToZone(zone);
}

void Player::reinsertToZone(Zone* zone) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->reinsertToZone(zone);
}

void Player::updateZone(bool lightUpdate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addBooleanParameter(lightUpdate);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->updateZone(lightUpdate);
}

void Player::updateZoneWithParent(unsigned long long cell, bool lightUpdate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addUnsignedLongParameter(cell);
		method.addBooleanParameter(lightUpdate);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->updateZoneWithParent(cell, lightUpdate);
}

void Player::switchMap(int planetid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addSignedIntParameter(planetid);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->switchMap(planetid);
}

void Player::doWarp(float x, float y, float z, float randomizeDistance, unsigned long long parentID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addFloatParameter(z);
		method.addFloatParameter(randomizeDistance);
		method.addUnsignedLongParameter(parentID);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->doWarp(x, y, z, randomizeDistance, parentID);
}

void Player::bounceBack() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->bounceBack();
}

void Player::sendTo(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendTo(player);
}

void Player::sendToOwner() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendToOwner();
}

void Player::notifySceneReady() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->notifySceneReady();
}

void Player::addDatapadItem(SceneObject* item) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addObjectParameter(item);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addDatapadItem(item);
}

SceneObject* Player::getDatapadItem(unsigned long long oid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addUnsignedLongParameter(oid);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getDatapadItem(oid);
}

void Player::removeDatapadItem(unsigned long long oid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);
		method.addUnsignedLongParameter(oid);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeDatapadItem(oid);
}

SceneObject* Player::getPlayerItem(unsigned long long oid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addUnsignedLongParameter(oid);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getPlayerItem(oid);
}

unsigned int Player::getTargetHealth() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getTargetHealth();
}

unsigned int Player::getTargetStrength() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getTargetStrength();
}

unsigned int Player::getTargetConstitution() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getTargetConstitution();
}

unsigned int Player::getTargetAction() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getTargetAction();
}

unsigned int Player::getTargetQuickness() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getTargetQuickness();
}

unsigned int Player::getTargetStamina() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getTargetStamina();
}

unsigned int Player::getTargetMind() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getTargetMind();
}

unsigned int Player::getTargetFocus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getTargetFocus();
}

unsigned int Player::getTargetWillpower() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getTargetWillpower();
}

void Player::setTargetHealth(unsigned int health) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);
		method.addUnsignedIntParameter(health);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setTargetHealth(health);
}

void Player::setTargetStrength(unsigned int strength) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);
		method.addUnsignedIntParameter(strength);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setTargetStrength(strength);
}

void Player::setTargetConstitution(unsigned int constituition) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);
		method.addUnsignedIntParameter(constituition);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setTargetConstitution(constituition);
}

void Player::setTargetAction(unsigned int action) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);
		method.addUnsignedIntParameter(action);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setTargetAction(action);
}

void Player::setTargetQuickness(unsigned int quickness) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);
		method.addUnsignedIntParameter(quickness);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setTargetQuickness(quickness);
}

void Player::setTargetStamina(unsigned int stamina) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);
		method.addUnsignedIntParameter(stamina);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setTargetStamina(stamina);
}

void Player::setTargetMind(unsigned int mind) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 50);
		method.addUnsignedIntParameter(mind);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setTargetMind(mind);
}

void Player::setTargetFocus(unsigned int focus) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 51);
		method.addUnsignedIntParameter(focus);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setTargetFocus(focus);
}

void Player::setTargetWillpower(unsigned int willpower) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 52);
		method.addUnsignedIntParameter(willpower);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setTargetWillpower(willpower);
}

unsigned int Player::getMinHealth() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 53);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMinHealth();
}

unsigned int Player::getMaxHealth() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 54);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMaxHealth();
}

unsigned int Player::getMinStrength() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 55);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMinStrength();
}

unsigned int Player::getMaxStrength() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 56);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMaxStrength();
}

unsigned int Player::getMinConstitution() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 57);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMinConstitution();
}

unsigned int Player::getMaxConstitution() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 58);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMaxConstitution();
}

unsigned int Player::getMinAction() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 59);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMinAction();
}

unsigned int Player::getMaxAction() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 60);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMaxAction();
}

unsigned int Player::getMinQuickness() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 61);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMinQuickness();
}

unsigned int Player::getMaxQuickness() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 62);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMaxQuickness();
}

unsigned int Player::getMinStamina() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 63);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMinStamina();
}

unsigned int Player::getMaxStamina() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 64);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMaxStamina();
}

unsigned int Player::getMinMind() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 65);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMinMind();
}

unsigned int Player::getMaxMind() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 66);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMaxMind();
}

unsigned int Player::getMinFocus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 67);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMinFocus();
}

unsigned int Player::getMaxFocus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 68);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMaxFocus();
}

unsigned int Player::getMinWillpower() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 69);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMinWillpower();
}

unsigned int Player::getMaxWillpower() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 70);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMaxWillpower();
}

unsigned int Player::getTotalAttribPoints() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 71);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getTotalAttribPoints();
}

void Player::queueFlourish(const String& modifier, unsigned long long target, unsigned int actionCntr) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 72);
		method.addAsciiParameter(modifier);
		method.addUnsignedLongParameter(target);
		method.addUnsignedIntParameter(actionCntr);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->queueFlourish(modifier, target, actionCntr);
}

void Player::clearQueueAction(unsigned int actioncntr, float timer, unsigned int tab1, unsigned int tab2) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 73);
		method.addUnsignedIntParameter(actioncntr);
		method.addFloatParameter(timer);
		method.addUnsignedIntParameter(tab1);
		method.addUnsignedIntParameter(tab2);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->clearQueueAction(actioncntr, timer, tab1, tab2);
}

void Player::queueAction(Player* player, unsigned long long target, unsigned int actionCRC, unsigned int actionCntr, const String& actionModifier) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 74);
		method.addObjectParameter(player);
		method.addUnsignedLongParameter(target);
		method.addUnsignedIntParameter(actionCRC);
		method.addUnsignedIntParameter(actionCntr);
		method.addAsciiParameter(actionModifier);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->queueAction(player, target, actionCRC, actionCntr, actionModifier);
}

void Player::deleteQueueAction(unsigned int actioncntr) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 75);
		method.addUnsignedIntParameter(actioncntr);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->deleteQueueAction(actioncntr);
}

void Player::changePosture(int post) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 76);
		method.addSignedIntParameter(post);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->changePosture(post);
}

void Player::doCenterOfBeing() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 77);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->doCenterOfBeing();
}

void Player::removeCenterOfBeing() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 78);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeCenterOfBeing();
}

void Player::doPowerboost() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 79);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->doPowerboost();
}

void Player::doPeace() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 80);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->doPeace();
}

void Player::kill() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 81);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->kill();
}

void Player::deathblow(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 82);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->deathblow(player);
}

void Player::resurrect() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 83);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->resurrect();
}

void Player::handleDeath() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 84);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->handleDeath();
}

void Player::throttlePvpRating(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 85);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->throttlePvpRating(player);
}

void Player::doClone() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 86);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->doClone();
}

void Player::activateClone() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 87);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->activateClone();
}

void Player::doRecovery() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 88);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->doRecovery();
}

void Player::doDigest() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 89);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->doDigest();
}

bool Player::hasConsent(String& charID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 90);
		method.addAsciiParameter(charID);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->hasConsent(charID);
}

bool Player::giveConsent(String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 91);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->giveConsent(name);
}

bool Player::revokeConsent(String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 92);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->revokeConsent(name);
}

int Player::getConsentSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 93);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getConsentSize();
}

String& Player::getConsentEntry(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 94);
		method.addSignedIntParameter(index);

		method.executeWithAsciiReturn(_return_getConsentEntry);
		return _return_getConsentEntry;
	} else
		return ((PlayerImplementation*) _impl)->getConsentEntry(index);
}

void Player::sendConsentBox() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 95);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendConsentBox();
}

void Player::addBuff(unsigned int buffcrc, float time) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 96);
		method.addUnsignedIntParameter(buffcrc);
		method.addFloatParameter(time);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addBuff(buffcrc, time);
}

void Player::lootCorpse(bool lootAll) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 97);
		method.addBooleanParameter(lootAll);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->lootCorpse(lootAll);
}

void Player::lootObject(Creature* creature, SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 98);
		method.addObjectParameter(creature);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->lootObject(creature, object);
}

void Player::addTradeItem(TangibleObject* item) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 99);
		method.addObjectParameter(item);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addTradeItem(item);
}

void Player::clearTradeItems() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 100);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->clearTradeItems();
}

int Player::getTradeSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 101);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getTradeSize();
}

TangibleObject* Player::getTradeItem(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 102);
		method.addSignedIntParameter(idx);

		return (TangibleObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getTradeItem(idx);
}

void Player::setAcceptedTrade(bool val) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 103);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setAcceptedTrade(val);
}

bool Player::hasAcceptedTrade() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 104);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->hasAcceptedTrade();
}

void Player::setVerifiedTrade(bool val) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 105);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setVerifiedTrade(val);
}

bool Player::hasVerifiedTrade() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 106);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->hasVerifiedTrade();
}

void Player::setMoneyToTrade(unsigned int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 107);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setMoneyToTrade(value);
}

unsigned int Player::getMoneyToTrade() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 108);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMoneyToTrade();
}

bool Player::getMeditate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 109);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMeditate();
}

void Player::changeCloth(unsigned long long itemid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 110);
		method.addUnsignedLongParameter(itemid);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->changeCloth(itemid);
}

void Player::changeWeapon(unsigned long long itemid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 111);
		method.addUnsignedLongParameter(itemid);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->changeWeapon(itemid);
}

void Player::changeArmor(unsigned long long itemid, bool forced) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 112);
		method.addUnsignedLongParameter(itemid);
		method.addBooleanParameter(forced);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->changeArmor(itemid, forced);
}

void Player::setWeaponSkillMods(Weapon* weapon) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 113);
		method.addObjectParameter(weapon);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setWeaponSkillMods(weapon);
}

void Player::setArmorSkillMods(Armor* armor) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 114);
		method.addObjectParameter(armor);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setArmorSkillMods(armor);
}

bool Player::setArmorEncumbrance(Armor* armor, bool forced) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 115);
		method.addObjectParameter(armor);
		method.addBooleanParameter(forced);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->setArmorEncumbrance(armor, forced);
}

void Player::applyAttachment(unsigned long long attachmentID, unsigned long long targetID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 116);
		method.addUnsignedLongParameter(attachmentID);
		method.addUnsignedLongParameter(targetID);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->applyAttachment(attachmentID, targetID);
}

void Player::applyPowerup(unsigned long long powerupID, unsigned long long targetID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 117);
		method.addUnsignedLongParameter(powerupID);
		method.addUnsignedLongParameter(targetID);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->applyPowerup(powerupID, targetID);
}

void Player::createItems() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 118);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->createItems();
}

void Player::loadItems() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 119);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->loadItems();
}

void Player::createBaseStats() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 120);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->createBaseStats();
}

void Player::decayInventory() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 121);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->decayInventory();
}

bool Player::hasFullInventory() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 122);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->hasFullInventory();
}

void Player::addInventoryItem(TangibleObject* item) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 123);
		method.addObjectParameter(item);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addInventoryItem(item);
}

void Player::addInventoryResource(ResourceContainer* item) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 124);
		method.addObjectParameter(item);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addInventoryResource(item);
}

void Player::equipPlayerItem(TangibleObject* item) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 125);
		method.addObjectParameter(item);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->equipPlayerItem(item);
}

void Player::saveDatapad(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 126);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->saveDatapad(player);
}

void Player::saveProfessions() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 127);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->saveProfessions();
}

void Player::loadProfessions() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 128);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->loadProfessions();
}

void Player::trainStartingProfession() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 129);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->trainStartingProfession();
}

bool Player::trainSkillBox(const String& name, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 130);
		method.addAsciiParameter(name);
		method.addBooleanParameter(updateClient);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->trainSkillBox(name, updateClient);
}

void Player::surrenderSkillBox(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 131);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->surrenderSkillBox(name);
}

void Player::resetSkillBoxesIterator() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 132);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->resetSkillBoxesIterator();
}

int Player::getSkillBoxesSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 133);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getSkillBoxesSize();
}

String& Player::getNextSkillBox() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 134);

		method.executeWithAsciiReturn(_return_getNextSkillBox);
		return _return_getNextSkillBox;
	} else
		return ((PlayerImplementation*) _impl)->getNextSkillBox();
}

bool Player::hasNextSkillBox() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 135);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->hasNextSkillBox();
}

bool Player::hasSkillBox(String& skillBox) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 136);
		method.addAsciiParameter(skillBox);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->hasSkillBox(skillBox);
}

void Player::addWaypoint(WaypointObject* wp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 137);
		method.addObjectParameter(wp);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addWaypoint(wp);
}

bool Player::removeWaypoint(WaypointObject* wp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 138);
		method.addObjectParameter(wp);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->removeWaypoint(wp);
}

WaypointObject* Player::getWaypoint(unsigned long long id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 139);
		method.addUnsignedLongParameter(id);

		return (WaypointObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getWaypoint(id);
}

void Player::updateWaypoint(WaypointObject* wp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 140);
		method.addObjectParameter(wp);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->updateWaypoint(wp);
}

void Player::saveWaypoints(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 141);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->saveWaypoints(player);
}

WaypointObject* Player::searchWaypoint(Player* play, const String& name, int mode) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 142);
		method.addObjectParameter(play);
		method.addAsciiParameter(name);
		method.addSignedIntParameter(mode);

		return (WaypointObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->searchWaypoint(play, name, mode);
}

void Player::queueHeal(TangibleObject* medpack, unsigned int actionCRC, const String& attribute) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 143);
		method.addObjectParameter(medpack);
		method.addUnsignedIntParameter(actionCRC);
		method.addAsciiParameter(attribute);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->queueHeal(medpack, actionCRC, attribute);
}

void Player::addXp(String& xpType, int xp, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 144);
		method.addAsciiParameter(xpType);
		method.addSignedIntParameter(xp);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addXp(xpType, xp, updateClient);
}

void Player::removeXp(String& xpType, int xp, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 145);
		method.addAsciiParameter(xpType);
		method.addSignedIntParameter(xp);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeXp(xpType, xp, updateClient);
}

void Player::loadXp(const String& xpStr) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 146);
		method.addAsciiParameter(xpStr);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->loadXp(xpStr);
}

String& Player::saveXp() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 147);

		method.executeWithAsciiReturn(_return_saveXp);
		return _return_saveXp;
	} else
		return ((PlayerImplementation*) _impl)->saveXp();
}

void Player::removeFromDuelList(Player* targetPlayer) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 148);
		method.addObjectParameter(targetPlayer);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeFromDuelList(targetPlayer);
}

void Player::addToDuelList(Player* targetPlayer) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 149);
		method.addObjectParameter(targetPlayer);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addToDuelList(targetPlayer);
}

bool Player::isInDuelWith(Player* targetPlayer, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 150);
		method.addObjectParameter(targetPlayer);
		method.addBooleanParameter(doLock);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isInDuelWith(targetPlayer, doLock);
}

Player* Player::getDuelListObject(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 151);
		method.addSignedIntParameter(index);

		return (Player*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getDuelListObject(index);
}

bool Player::requestedDuelTo(Player* targetPlayer) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 152);
		method.addObjectParameter(targetPlayer);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->requestedDuelTo(targetPlayer);
}

bool Player::isDuelListEmpty() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 153);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isDuelListEmpty();
}

int Player::getDuelListSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 154);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getDuelListSize();
}

bool Player::setGuild(unsigned int gid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 155);
		method.addUnsignedIntParameter(gid);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->setGuild(gid);
}

void Player::setGuild(Guild* gild) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 156);
		method.addObjectParameter(gild);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setGuild(gild);
}

bool Player::updateGuild(unsigned int gid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 157);
		method.addUnsignedIntParameter(gid);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->updateGuild(gid);
}

void Player::updateGuild(Guild* guild) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 158);
		method.addObjectParameter(guild);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->updateGuild(guild);
}

void Player::addChatRoom(ChatRoom* room) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 159);
		method.addObjectParameter(room);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addChatRoom(room);
}

void Player::removeChatRoom(ChatRoom* room) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 160);
		method.addObjectParameter(room);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeChatRoom(room);
}

void Player::sendSystemMessage(const String& msg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 161);
		method.addAsciiParameter(msg);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendSystemMessage(msg);
}

void Player::sendSystemMessage(UnicodeString& msg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 162);
		method.addUnicodeParameter(msg);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendSystemMessage(msg);
}

void Player::sendSystemMessage(const String& file, const String& str, unsigned long long targetid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 163);
		method.addAsciiParameter(file);
		method.addAsciiParameter(str);
		method.addUnsignedLongParameter(targetid);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendSystemMessage(file, str, targetid);
}

void Player::sendSystemMessage(const String& file, const String& str, StfParameter* param) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 164);
		method.addAsciiParameter(file);
		method.addAsciiParameter(str);
		method.addObjectParameter(param);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendSystemMessage(file, str, param);
}

void Player::sendBattleFatigueMessage(CreatureObject* target) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 165);
		method.addObjectParameter(target);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendBattleFatigueMessage(target);
}

void Player::sendHealMessage(CreatureObject* target, int h, int a, int m) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 166);
		method.addObjectParameter(target);
		method.addSignedIntParameter(h);
		method.addSignedIntParameter(a);
		method.addSignedIntParameter(m);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendHealMessage(target, h, a, m);
}

void Player::setConversatingCreature(CreatureObject* conversator) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 167);
		method.addObjectParameter(conversator);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setConversatingCreature(conversator);
}

void Player::setFirstName(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 168);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setFirstName(name);
}

void Player::setLastName(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 169);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setLastName(name);
}

void Player::setFirstNameProper(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 170);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setFirstNameProper(name);
}

void Player::setBiography(const String& bio) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 171);
		method.addAsciiParameter(bio);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setBiography(bio);
}

void Player::setBiography(UnicodeString& bio) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 172);
		method.addUnicodeParameter(bio);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setBiography(bio);
}

bool Player::changeForcePowerBar(int fp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 173);
		method.addSignedIntParameter(fp);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->changeForcePowerBar(fp);
}

void Player::setForcePowerBar(int fp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 174);
		method.addSignedIntParameter(fp);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setForcePowerBar(fp);
}

void Player::updateMaxForcePowerBar(bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 175);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->updateMaxForcePowerBar(updateClient);
}

void Player::setFoodFilling(int fill, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 176);
		method.addSignedIntParameter(fill);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setFoodFilling(fill, updateClient);
}

void Player::setDrinkFilling(int fill, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 177);
		method.addSignedIntParameter(fill);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setDrinkFilling(fill, updateClient);
}

void Player::changeFoodFilling(int fill, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 178);
		method.addSignedIntParameter(fill);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->changeFoodFilling(fill, updateClient);
}

void Player::changeDrinkFilling(int fill, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 179);
		method.addSignedIntParameter(fill);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->changeDrinkFilling(fill, updateClient);
}

bool Player::isAttackableBy(CreatureObject* attacker) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 180);
		method.addObjectParameter(attacker);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isAttackableBy(attacker);
}

int Player::getFoodFilling() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 181);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getFoodFilling();
}

int Player::getDrinkFilling() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 182);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getDrinkFilling();
}

void Player::activateDigest() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 183);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->activateDigest();
}

void Player::activateQueueAction() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 184);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->activateQueueAction();
}

void Player::setCharacterID(unsigned long long id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 185);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setCharacterID(id);
}

void Player::setStartingProfession(const String& prof) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 186);
		method.addAsciiParameter(prof);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setStartingProfession(prof);
}

void Player::setHairObject(const String& hair) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 187);
		method.addAsciiParameter(hair);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setHairObject(hair);
}

void Player::updateHair() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 188);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->updateHair();
}

void Player::setPlayerObject(PlayerObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 189);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setPlayerObject(obj);
}

void Player::setOnline() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 190);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setOnline();
}

void Player::clearDisconnectEvent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 191);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->clearDisconnectEvent();
}

void Player::setClient(ZoneClientSession* client) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 192);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setClient(client);
}

void Player::updateNextTipTime() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 193);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->updateNextTipTime();
}

bool Player::canTip() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 194);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->canTip();
}

void Player::setOvert() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 195);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setOvert();
}

void Player::setCovert() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 196);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setCovert();
}

void Player::setOnLeave() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 197);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setOnLeave();
}

bool Player::isOvert() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 198);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isOvert();
}

bool Player::isCovert() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 199);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isCovert();
}

bool Player::isOnLeave() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 200);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isOnLeave();
}

void Player::newChangeFactionStatusEvent(unsigned char status, unsigned int timer) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 201);
		method.addUnsignedCharParameter(status);
		method.addUnsignedIntParameter(timer);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->newChangeFactionStatusEvent(status, timer);
}

void Player::setRaceFileName(String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 202);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setRaceFileName(name);
}

void Player::setRaceID(unsigned char id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 203);
		method.addUnsignedCharParameter(id);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setRaceID(id);
}

void Player::setStartingLocation(String& loc) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 204);
		method.addAsciiParameter(loc);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setStartingLocation(loc);
}

void Player::setItemShift(unsigned int shift) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 205);
		method.addUnsignedIntParameter(shift);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setItemShift(shift);
}

void Player::toggleCharacterBit(unsigned int bit) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 206);
		method.addUnsignedIntParameter(bit);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->toggleCharacterBit(bit);
}

bool Player::awardBadge(unsigned int badgeindex) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 207);
		method.addUnsignedIntParameter(badgeindex);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->awardBadge(badgeindex);
}

void Player::setLinkDead() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 208);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setLinkDead();
}

void Player::setLoggingIn() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 209);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setLoggingIn();
}

void Player::setAdminLevel(int level) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 210);
		method.addSignedIntParameter(level);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setAdminLevel(level);
}

int Player::getAdminLevel() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 211);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getAdminLevel();
}

void Player::setLastTestPositionX(float pos) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 212);
		method.addFloatParameter(pos);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setLastTestPositionX(pos);
}

void Player::setLastTestPositionY(float pos) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 213);
		method.addFloatParameter(pos);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setLastTestPositionY(pos);
}

void Player::setTradeRequestedPlayer(unsigned long long ID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 214);
		method.addUnsignedLongParameter(ID);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setTradeRequestedPlayer(ID);
}

unsigned long long Player::getTradeRequestedPlayer() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 215);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((PlayerImplementation*) _impl)->getTradeRequestedPlayer();
}

void Player::launchFirework(int anim) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 216);
		method.addSignedIntParameter(anim);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->launchFirework(anim);
}

void Player::sendMessage(BaseMessage* msg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 217);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendMessage(msg);
}

void Player::sendMessage(StandaloneBaseMessage* msg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 218);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendMessage(msg);
}

bool Player::isJedi() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 219);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isJedi();
}

void Player::mutePlayer() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 220);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->mutePlayer();
}

void Player::toggleImmune() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 221);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->toggleImmune();
}

bool Player::hasSuiBox(unsigned int boxID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 222);
		method.addUnsignedIntParameter(boxID);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->hasSuiBox(boxID);
}

bool Player::hasSuiBoxType(unsigned int boxTypeID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 223);
		method.addUnsignedIntParameter(boxTypeID);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->hasSuiBoxType(boxTypeID);
}

unsigned int Player::getSuiBoxFromType(unsigned int boxTypeID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 224);
		method.addUnsignedIntParameter(boxTypeID);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getSuiBoxFromType(boxTypeID);
}

void Player::removeSuiBox(unsigned int boxID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 225);
		method.addUnsignedIntParameter(boxID);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeSuiBox(boxID);
}

SuiBox* Player::getSuiBox(unsigned int boxID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 226);
		method.addUnsignedIntParameter(boxID);

		return (SuiBox*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getSuiBox(boxID);
}

void Player::addSuiBox(SuiBox* sui) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 227);
		method.addObjectParameter(sui);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addSuiBox(sui);
}

unsigned int Player::getNewSuiBoxID(unsigned int type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 228);
		method.addUnsignedIntParameter(type);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getNewSuiBoxID(type);
}

bool Player::isOnline() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 229);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isOnline();
}

bool Player::isOffline() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 230);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isOffline();
}

bool Player::isLinkDead() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 231);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isLinkDead();
}

bool Player::isLoggingIn() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 232);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isLoggingIn();
}

bool Player::isLoggingOut() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 233);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isLoggingOut();
}

PlayerObject* Player::getPlayerObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 234);

		return (PlayerObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getPlayerObject();
}

CreatureObject* Player::getConversatingCreature() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 235);

		return (CreatureObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getConversatingCreature();
}

String& Player::getFirstName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 236);

		method.executeWithAsciiReturn(_return_getFirstName);
		return _return_getFirstName;
	} else
		return ((PlayerImplementation*) _impl)->getFirstName();
}

String& Player::getLastName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 237);

		method.executeWithAsciiReturn(_return_getLastName);
		return _return_getLastName;
	} else
		return ((PlayerImplementation*) _impl)->getLastName();
}

String& Player::getFirstNameProper() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 238);

		method.executeWithAsciiReturn(_return_getFirstNameProper);
		return _return_getFirstNameProper;
	} else
		return ((PlayerImplementation*) _impl)->getFirstNameProper();
}

String& Player::getRaceFileName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 239);

		method.executeWithAsciiReturn(_return_getRaceFileName);
		return _return_getRaceFileName;
	} else
		return ((PlayerImplementation*) _impl)->getRaceFileName();
}

unsigned char Player::getRaceID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 240);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((PlayerImplementation*) _impl)->getRaceID();
}

UnicodeString& Player::getBiography() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 241);

		method.executeWithUnicodeReturn(_return_getBiography);
		return _return_getBiography;
	} else
		return ((PlayerImplementation*) _impl)->getBiography();
}

unsigned long long Player::getCharacterID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 242);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((PlayerImplementation*) _impl)->getCharacterID();
}

String& Player::getStartingProfession() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 243);

		method.executeWithAsciiReturn(_return_getStartingProfession);
		return _return_getStartingProfession;
	} else
		return ((PlayerImplementation*) _impl)->getStartingProfession();
}

int Player::getZoneIndex() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 244);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getZoneIndex();
}

String& Player::getHairObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 245);

		method.executeWithAsciiReturn(_return_getHairObject);
		return _return_getHairObject;
	} else
		return ((PlayerImplementation*) _impl)->getHairObject();
}

ZoneClientSession* Player::getClient() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 246);

		return (ZoneClientSession*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getClient();
}

GroupObject* Player::getGroupObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 247);

		return (GroupObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getGroupObject();
}

int Player::getPvpRating() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 248);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getPvpRating();
}

void Player::setPvpRating(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 249);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setPvpRating(value);
}

void Player::increasePvpRating(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 250);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->increasePvpRating(value);
}

void Player::decreasePvpRating(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 251);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->decreasePvpRating(value);
}

void Player::getPlayersNearYou() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 252);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->getPlayersNearYou();
}

int Player::getRegionID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 253);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getRegionID();
}

int Player::getCertificationListSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 254);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getCertificationListSize();
}

String& Player::getCertification(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 255);
		method.addSignedIntParameter(idx);

		method.executeWithAsciiReturn(_return_getCertification);
		return _return_getCertification;
	} else
		return ((PlayerImplementation*) _impl)->getCertification(idx);
}

bool Player::checkCertification(String& certification) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 256);
		method.addAsciiParameter(certification);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->checkCertification(certification);
}

int Player::getSlicingAbility() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 257);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getSlicingAbility();
}

bool Player::isChatMuted() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 258);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isChatMuted();
}

bool Player::isImmune() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 259);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isImmune();
}

String& Player::getInputBoxReturnBuffer() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 260);

		method.executeWithAsciiReturn(_return_getInputBoxReturnBuffer);
		return _return_getInputBoxReturnBuffer;
	} else
		return ((PlayerImplementation*) _impl)->getInputBoxReturnBuffer();
}

unsigned int Player::nextMisoRFC() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 261);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->nextMisoRFC();
}

int Player::checkMisoBSB(int tcb) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 262);
		method.addSignedIntParameter(tcb);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->checkMisoBSB(tcb);
}

void Player::setMisoBSB(int tms) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 263);
		method.addSignedIntParameter(tms);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setMisoBSB(tms);
}

void Player::addToCurMisoKeys(String& tck) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 264);
		method.addAsciiParameter(tck);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addToCurMisoKeys(tck);
}

bool Player::isOnCurMisoKey(String& tmk) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 265);
		method.addAsciiParameter(tmk);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isOnCurMisoKey(tmk);
}

void Player::removeFromCurMisoKeys(String& tck) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 266);
		method.addAsciiParameter(tck);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeFromCurMisoKeys(tck);
}

void Player::addToFinMisoKeys(String& tmp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 267);
		method.addAsciiParameter(tmp);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addToFinMisoKeys(tmp);
}

bool Player::hasCompletedMisoKey(String& tmk) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 268);
		method.addAsciiParameter(tmk);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->hasCompletedMisoKey(tmk);
}

void Player::updateMissionSave(String& misoKey, const String& dbVar, String& varName, String& varData, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 269);
		method.addAsciiParameter(misoKey);
		method.addAsciiParameter(dbVar);
		method.addAsciiParameter(varName);
		method.addAsciiParameter(varData);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->updateMissionSave(misoKey, dbVar, varName, varData, doLock);
}

void Player::fillMissionSaveVars() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 270);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->fillMissionSaveVars();
}

void Player::saveMissions() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 271);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->saveMissions();
}

CraftingTool* Player::getCurrentCraftingTool() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 272);

		return (CraftingTool*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getCurrentCraftingTool();
}

CraftingTool* Player::getCraftingTool(const int type, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 273);
		method.addSignedIntParameter(type);
		method.addBooleanParameter(doLock);

		return (CraftingTool*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getCraftingTool(type, doLock);
}

void Player::setCurrentCraftingTool(CraftingTool* ct) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 274);
		method.addObjectParameter(ct);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setCurrentCraftingTool(ct);
}

void Player::clearCurrentCraftingTool() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 275);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->clearCurrentCraftingTool();
}

void Player::prepareCraftingSession(CraftingTool* ct, DraftSchematic* ds) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 276);
		method.addObjectParameter(ct);
		method.addObjectParameter(ds);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->prepareCraftingSession(ct, ds);
}

void Player::addIngredientToSlot(TangibleObject* tano, int slot, int counter) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 277);
		method.addObjectParameter(tano);
		method.addSignedIntParameter(slot);
		method.addSignedIntParameter(counter);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addIngredientToSlot(tano, slot, counter);
}

void Player::removeResourceFromCraft(unsigned long long resID, int slot, int counter) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 278);
		method.addUnsignedLongParameter(resID);
		method.addSignedIntParameter(slot);
		method.addSignedIntParameter(counter);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeResourceFromCraft(resID, slot, counter);
}

void Player::nextCraftingStage(String& test) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 279);
		method.addAsciiParameter(test);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->nextCraftingStage(test);
}

void Player::craftingCustomization(String& name, int condition, String& customizationString) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 280);
		method.addAsciiParameter(name);
		method.addSignedIntParameter(condition);
		method.addAsciiParameter(customizationString);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->craftingCustomization(name, condition, customizationString);
}

void Player::createPrototype(String& count) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 281);
		method.addAsciiParameter(count);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->createPrototype(count);
}

void Player::createSchematic(String& count) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 282);
		method.addAsciiParameter(count);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->createSchematic(count);
}

void Player::handleExperimenting(int count, int numRowsAttempted, String& expString) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 283);
		method.addSignedIntParameter(count);
		method.addSignedIntParameter(numRowsAttempted);
		method.addAsciiParameter(expString);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->handleExperimenting(count, numRowsAttempted, expString);
}

void Player::sendDraftSchematics() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 284);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendDraftSchematics();
}

void Player::addDraftSchematicsFromGroupName(const String& schematicGroupName) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 285);
		method.addAsciiParameter(schematicGroupName);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addDraftSchematicsFromGroupName(schematicGroupName);
}

void Player::subtractDraftSchematicsFromGroupName(const String& schematicGroupName) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 286);
		method.addAsciiParameter(schematicGroupName);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->subtractDraftSchematicsFromGroupName(schematicGroupName);
}

void Player::addDraftSchematic(DraftSchematic* ds) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 287);
		method.addObjectParameter(ds);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addDraftSchematic(ds);
}

void Player::subtractDraftSchematic(DraftSchematic* ds) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 288);
		method.addObjectParameter(ds);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->subtractDraftSchematic(ds);
}

unsigned int Player::getDraftSchematicListSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 289);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getDraftSchematicListSize();
}

unsigned int Player::getDraftSchematicUpdateCount(unsigned int count) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 290);
		method.addUnsignedIntParameter(count);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getDraftSchematicUpdateCount(count);
}

DraftSchematic* Player::getDraftSchematic(unsigned int schematicID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 291);
		method.addUnsignedIntParameter(schematicID);

		return (DraftSchematic*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getDraftSchematic(schematicID);
}

DraftSchematic* Player::getDraftSchematic(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 292);
		method.addSignedIntParameter(index);

		return (DraftSchematic*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getDraftSchematic(index);
}

bool Player::isChangingFactionStatus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 293);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isChangingFactionStatus();
}

Datapad* Player::getDatapad() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 294);

		return (Datapad*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getDatapad();
}

unsigned long long Player::getNewItemID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 295);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((PlayerImplementation*) _impl)->getNewItemID();
}

unsigned int Player::getItemShift() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 296);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getItemShift();
}

float Player::getLastTestPositionX() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 297);

		return method.executeWithFloatReturn();
	} else
		return ((PlayerImplementation*) _impl)->getLastTestPositionX();
}

float Player::getLastTestPositionY() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 298);

		return method.executeWithFloatReturn();
	} else
		return ((PlayerImplementation*) _impl)->getLastTestPositionY();
}

unsigned int Player::getForcePower() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 299);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getForcePower();
}

unsigned int Player::getForcePowerMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 300);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getForcePowerMax();
}

bool Player::isGuildLeader() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 301);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->isGuildLeader();
}

unsigned long long Player::getCurrentStructureID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 302);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((PlayerImplementation*) _impl)->getCurrentStructureID();
}

void Player::setCurrentStructureID(unsigned long long oid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 303);
		method.addUnsignedLongParameter(oid);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setCurrentStructureID(oid);
}

SurveyTool* Player::getSurveyTool() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 304);

		return (SurveyTool*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getSurveyTool();
}

SurveyTool* Player::getSampleTool() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 305);

		return (SurveyTool*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getSampleTool();
}

void Player::setSurveyTool(SurveyTool* sTool) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 306);
		method.addObjectParameter(sTool);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setSurveyTool(sTool);
}

void Player::setSampleTool(SurveyTool* sTool) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 307);
		method.addObjectParameter(sTool);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setSampleTool(sTool);
}

void Player::setSurveyWaypoint(WaypointObject* id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 308);
		method.addObjectParameter(id);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setSurveyWaypoint(id);
}

WaypointObject* Player::getSurveyWaypoint() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 309);

		return (WaypointObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getSurveyWaypoint();
}

bool Player::getCanSurvey() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 310);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->getCanSurvey();
}

bool Player::getCanSample() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 311);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->getCanSample();
}

void Player::setCanSurvey() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 312);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setCanSurvey();
}

void Player::setCanSample() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 313);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setCanSample();
}

void Player::clearFirstSampleEvent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 314);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->clearFirstSampleEvent();
}

void Player::setSurveyEvent(String& resourcename) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 315);
		method.addAsciiParameter(resourcename);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setSurveyEvent(resourcename);
}

void Player::setSampleEvent(String& resourcename, bool firstTime) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 316);
		method.addAsciiParameter(resourcename);
		method.addBooleanParameter(firstTime);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setSampleEvent(resourcename, firstTime);
}

void Player::setCancelSample(bool val) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 317);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setCancelSample(val);
}

bool Player::getCancelSample() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 318);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->getCancelSample();
}

void Player::sendSampleTimeRemaining() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 319);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendSampleTimeRemaining();
}

void Player::setSurveyErrorMessage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 320);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setSurveyErrorMessage();
}

void Player::setSampleErrorMessage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 321);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setSampleErrorMessage();
}

bool Player::getSurveyErrorMessage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 322);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->getSurveyErrorMessage();
}

bool Player::getSampleErrorMessage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 323);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->getSampleErrorMessage();
}

void Player::sendMail(String& mailsender, UnicodeString& subjectSender, UnicodeString& bodySender, String& charNameSender) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 324);
		method.addAsciiParameter(mailsender);
		method.addUnicodeParameter(subjectSender);
		method.addUnicodeParameter(bodySender);
		method.addAsciiParameter(charNameSender);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->sendMail(mailsender, subjectSender, bodySender, charNameSender);
}

void Player::setEntertainerEvent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 325);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setEntertainerEvent();
}

void Player::clearEntertainerEvent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 326);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->clearEntertainerEvent();
}

void Player::setLastNpcConvStr(const String& conv) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 327);
		method.addAsciiParameter(conv);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setLastNpcConvStr(conv);
}

void Player::setLastNpcConvMessStr(const String& mess) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 328);
		method.addAsciiParameter(mess);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setLastNpcConvMessStr(mess);
}

String& Player::getLastNpcConvStr() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 329);

		method.executeWithAsciiReturn(_return_getLastNpcConvStr);
		return _return_getLastNpcConvStr;
	} else
		return ((PlayerImplementation*) _impl)->getLastNpcConvStr();
}

String& Player::getLastNpcConvMessStr() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 330);

		method.executeWithAsciiReturn(_return_getLastNpcConvMessStr);
		return _return_getLastNpcConvMessStr;
	} else
		return ((PlayerImplementation*) _impl)->getLastNpcConvMessStr();
}

void Player::setInputBoxReturnBuffer(const String& message) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 331);
		method.addAsciiParameter(message);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setInputBoxReturnBuffer(message);
}

void Player::setGuildLeader(bool guildLeader) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 332);
		method.addBooleanParameter(guildLeader);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setGuildLeader(guildLeader);
}

void Player::loadGuildChat() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 333);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->loadGuildChat();
}

void Player::setGuildPermissions(unsigned int bit) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 334);
		method.addUnsignedIntParameter(bit);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setGuildPermissions(bit);
}

unsigned int Player::getGuildPermissions() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 335);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getGuildPermissions();
}

bool Player::setGuildPermissionsBit(unsigned int bit, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 336);
		method.addUnsignedIntParameter(bit);
		method.addBooleanParameter(updateClient);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->setGuildPermissionsBit(bit, updateClient);
}

void Player::toggleGuildPermissionsBit(unsigned int bit) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 337);
		method.addUnsignedIntParameter(bit);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->toggleGuildPermissionsBit(bit);
}

bool Player::clearGuildPermissionsBit(unsigned int bit, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 338);
		method.addUnsignedIntParameter(bit);
		method.addBooleanParameter(updateClient);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerImplementation*) _impl)->clearGuildPermissionsBit(bit, updateClient);
}

int Player::getFactionPoints(const String& faction) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 339);
		method.addAsciiParameter(faction);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getFactionPoints(faction);
}

void Player::addFactionPoints(const String& faction, unsigned int points) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 340);
		method.addAsciiParameter(faction);
		method.addUnsignedIntParameter(points);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addFactionPoints(faction, points);
}

void Player::subtractFactionPoints(const String& faction, unsigned int points) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 341);
		method.addAsciiParameter(faction);
		method.addUnsignedIntParameter(points);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->subtractFactionPoints(faction, points);
}

int Player::getFactionStatus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 342);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getFactionStatus();
}

void Player::setFactionStatus(int status) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 343);
		method.addSignedIntParameter(status);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setFactionStatus(status);
}

FactionPointList* Player::getFactionList() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 344);

		return (FactionPointList*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getFactionList();
}

unsigned int Player::getMaxFactionPoints(String& faction) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 345);
		method.addAsciiParameter(faction);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerImplementation*) _impl)->getMaxFactionPoints(faction);
}

void Player::delFactionPoints(Player* player, unsigned int amount) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 346);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(amount);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->delFactionPoints(player, amount);
}

void Player::addSuiBoxChoice(String& choice) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 347);
		method.addAsciiParameter(choice);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->addSuiBoxChoice(choice);
}

void Player::removeLastSuiBoxChoice() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 348);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->removeLastSuiBoxChoice();
}

void Player::setSuiBoxChoices(SuiListBoxVector* choicesList) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 349);
		method.addObjectParameter(choicesList);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setSuiBoxChoices(choicesList);
}

SuiListBoxVector* Player::getSuiBoxChoices() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 350);

		return (SuiListBoxVector*) method.executeWithObjectReturn();
	} else
		return ((PlayerImplementation*) _impl)->getSuiBoxChoices();
}

void Player::clearSuiBoxChoices() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 351);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->clearSuiBoxChoices();
}

void Player::setResourceDeedID(unsigned long long objectID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 352);
		method.addUnsignedLongParameter(objectID);

		method.executeWithVoidReturn();
	} else
		((PlayerImplementation*) _impl)->setResourceDeedID(objectID);
}

unsigned long long Player::getResourceDeedID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 353);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((PlayerImplementation*) _impl)->getResourceDeedID();
}

/*
 *	PlayerAdapter
 */

PlayerAdapter::PlayerAdapter(PlayerImplementation* obj) : CreatureObjectAdapter(obj) {
}

Packet* PlayerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initialize();
		break;
	case 7:
		create((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 8:
		refuseCreate((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 9:
		load((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 10:
		reload((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 11:
		unload();
		break;
	case 12:
		savePlayerState(inv->getBooleanParameter());
		break;
	case 13:
		disconnect(inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 14:
		logout(inv->getBooleanParameter());
		break;
	case 15:
		userLogout(inv->getSignedIntParameter());
		break;
	case 16:
		resurrectCountdown(inv->getSignedIntParameter());
		break;
	case 17:
		clearLogoutEvent();
		break;
	case 18:
		clearResurrectEvent();
		break;
	case 19:
		makeCharacterMask();
		break;
	case 20:
		resp->insertInt(getCharacterMask());
		break;
	case 21:
		insertToZone((Zone*) inv->getObjectParameter());
		break;
	case 22:
		reinsertToZone((Zone*) inv->getObjectParameter());
		break;
	case 23:
		updateZone(inv->getBooleanParameter());
		break;
	case 24:
		updateZoneWithParent(inv->getUnsignedLongParameter(), inv->getBooleanParameter());
		break;
	case 25:
		switchMap(inv->getSignedIntParameter());
		break;
	case 26:
		doWarp(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getUnsignedLongParameter());
		break;
	case 27:
		bounceBack();
		break;
	case 28:
		sendTo((Player*) inv->getObjectParameter());
		break;
	case 29:
		sendToOwner();
		break;
	case 30:
		notifySceneReady();
		break;
	case 31:
		addDatapadItem((SceneObject*) inv->getObjectParameter());
		break;
	case 32:
		resp->insertLong(getDatapadItem(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 33:
		removeDatapadItem(inv->getUnsignedLongParameter());
		break;
	case 34:
		resp->insertLong(getPlayerItem(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 35:
		resp->insertInt(getTargetHealth());
		break;
	case 36:
		resp->insertInt(getTargetStrength());
		break;
	case 37:
		resp->insertInt(getTargetConstitution());
		break;
	case 38:
		resp->insertInt(getTargetAction());
		break;
	case 39:
		resp->insertInt(getTargetQuickness());
		break;
	case 40:
		resp->insertInt(getTargetStamina());
		break;
	case 41:
		resp->insertInt(getTargetMind());
		break;
	case 42:
		resp->insertInt(getTargetFocus());
		break;
	case 43:
		resp->insertInt(getTargetWillpower());
		break;
	case 44:
		setTargetHealth(inv->getUnsignedIntParameter());
		break;
	case 45:
		setTargetStrength(inv->getUnsignedIntParameter());
		break;
	case 46:
		setTargetConstitution(inv->getUnsignedIntParameter());
		break;
	case 47:
		setTargetAction(inv->getUnsignedIntParameter());
		break;
	case 48:
		setTargetQuickness(inv->getUnsignedIntParameter());
		break;
	case 49:
		setTargetStamina(inv->getUnsignedIntParameter());
		break;
	case 50:
		setTargetMind(inv->getUnsignedIntParameter());
		break;
	case 51:
		setTargetFocus(inv->getUnsignedIntParameter());
		break;
	case 52:
		setTargetWillpower(inv->getUnsignedIntParameter());
		break;
	case 53:
		resp->insertInt(getMinHealth());
		break;
	case 54:
		resp->insertInt(getMaxHealth());
		break;
	case 55:
		resp->insertInt(getMinStrength());
		break;
	case 56:
		resp->insertInt(getMaxStrength());
		break;
	case 57:
		resp->insertInt(getMinConstitution());
		break;
	case 58:
		resp->insertInt(getMaxConstitution());
		break;
	case 59:
		resp->insertInt(getMinAction());
		break;
	case 60:
		resp->insertInt(getMaxAction());
		break;
	case 61:
		resp->insertInt(getMinQuickness());
		break;
	case 62:
		resp->insertInt(getMaxQuickness());
		break;
	case 63:
		resp->insertInt(getMinStamina());
		break;
	case 64:
		resp->insertInt(getMaxStamina());
		break;
	case 65:
		resp->insertInt(getMinMind());
		break;
	case 66:
		resp->insertInt(getMaxMind());
		break;
	case 67:
		resp->insertInt(getMinFocus());
		break;
	case 68:
		resp->insertInt(getMaxFocus());
		break;
	case 69:
		resp->insertInt(getMinWillpower());
		break;
	case 70:
		resp->insertInt(getMaxWillpower());
		break;
	case 71:
		resp->insertInt(getTotalAttribPoints());
		break;
	case 72:
		queueFlourish(inv->getAsciiParameter(_param0_queueFlourish__String_long_int_), inv->getUnsignedLongParameter(), inv->getUnsignedIntParameter());
		break;
	case 73:
		clearQueueAction(inv->getUnsignedIntParameter(), inv->getFloatParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter());
		break;
	case 74:
		queueAction((Player*) inv->getObjectParameter(), inv->getUnsignedLongParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getAsciiParameter(_param4_queueAction__Player_long_int_int_String_));
		break;
	case 75:
		deleteQueueAction(inv->getUnsignedIntParameter());
		break;
	case 76:
		changePosture(inv->getSignedIntParameter());
		break;
	case 77:
		doCenterOfBeing();
		break;
	case 78:
		removeCenterOfBeing();
		break;
	case 79:
		doPowerboost();
		break;
	case 80:
		doPeace();
		break;
	case 81:
		kill();
		break;
	case 82:
		deathblow((Player*) inv->getObjectParameter());
		break;
	case 83:
		resurrect();
		break;
	case 84:
		handleDeath();
		break;
	case 85:
		throttlePvpRating((Player*) inv->getObjectParameter());
		break;
	case 86:
		doClone();
		break;
	case 87:
		activateClone();
		break;
	case 88:
		doRecovery();
		break;
	case 89:
		doDigest();
		break;
	case 90:
		resp->insertBoolean(hasConsent(inv->getAsciiParameter(_param0_hasConsent__String_)));
		break;
	case 91:
		resp->insertBoolean(giveConsent(inv->getAsciiParameter(_param0_giveConsent__String_)));
		break;
	case 92:
		resp->insertBoolean(revokeConsent(inv->getAsciiParameter(_param0_revokeConsent__String_)));
		break;
	case 93:
		resp->insertSignedInt(getConsentSize());
		break;
	case 94:
		resp->insertAscii(getConsentEntry(inv->getSignedIntParameter()));
		break;
	case 95:
		sendConsentBox();
		break;
	case 96:
		addBuff(inv->getUnsignedIntParameter(), inv->getFloatParameter());
		break;
	case 97:
		lootCorpse(inv->getBooleanParameter());
		break;
	case 98:
		lootObject((Creature*) inv->getObjectParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case 99:
		addTradeItem((TangibleObject*) inv->getObjectParameter());
		break;
	case 100:
		clearTradeItems();
		break;
	case 101:
		resp->insertSignedInt(getTradeSize());
		break;
	case 102:
		resp->insertLong(getTradeItem(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 103:
		setAcceptedTrade(inv->getBooleanParameter());
		break;
	case 104:
		resp->insertBoolean(hasAcceptedTrade());
		break;
	case 105:
		setVerifiedTrade(inv->getBooleanParameter());
		break;
	case 106:
		resp->insertBoolean(hasVerifiedTrade());
		break;
	case 107:
		setMoneyToTrade(inv->getUnsignedIntParameter());
		break;
	case 108:
		resp->insertInt(getMoneyToTrade());
		break;
	case 109:
		resp->insertBoolean(getMeditate());
		break;
	case 110:
		changeCloth(inv->getUnsignedLongParameter());
		break;
	case 111:
		changeWeapon(inv->getUnsignedLongParameter());
		break;
	case 112:
		changeArmor(inv->getUnsignedLongParameter(), inv->getBooleanParameter());
		break;
	case 113:
		setWeaponSkillMods((Weapon*) inv->getObjectParameter());
		break;
	case 114:
		setArmorSkillMods((Armor*) inv->getObjectParameter());
		break;
	case 115:
		resp->insertBoolean(setArmorEncumbrance((Armor*) inv->getObjectParameter(), inv->getBooleanParameter()));
		break;
	case 116:
		applyAttachment(inv->getUnsignedLongParameter(), inv->getUnsignedLongParameter());
		break;
	case 117:
		applyPowerup(inv->getUnsignedLongParameter(), inv->getUnsignedLongParameter());
		break;
	case 118:
		createItems();
		break;
	case 119:
		loadItems();
		break;
	case 120:
		createBaseStats();
		break;
	case 121:
		decayInventory();
		break;
	case 122:
		resp->insertBoolean(hasFullInventory());
		break;
	case 123:
		addInventoryItem((TangibleObject*) inv->getObjectParameter());
		break;
	case 124:
		addInventoryResource((ResourceContainer*) inv->getObjectParameter());
		break;
	case 125:
		equipPlayerItem((TangibleObject*) inv->getObjectParameter());
		break;
	case 126:
		saveDatapad((Player*) inv->getObjectParameter());
		break;
	case 127:
		saveProfessions();
		break;
	case 128:
		loadProfessions();
		break;
	case 129:
		trainStartingProfession();
		break;
	case 130:
		resp->insertBoolean(trainSkillBox(inv->getAsciiParameter(_param0_trainSkillBox__String_bool_), inv->getBooleanParameter()));
		break;
	case 131:
		surrenderSkillBox(inv->getAsciiParameter(_param0_surrenderSkillBox__String_));
		break;
	case 132:
		resetSkillBoxesIterator();
		break;
	case 133:
		resp->insertSignedInt(getSkillBoxesSize());
		break;
	case 134:
		resp->insertAscii(getNextSkillBox());
		break;
	case 135:
		resp->insertBoolean(hasNextSkillBox());
		break;
	case 136:
		resp->insertBoolean(hasSkillBox(inv->getAsciiParameter(_param0_hasSkillBox__String_)));
		break;
	case 137:
		addWaypoint((WaypointObject*) inv->getObjectParameter());
		break;
	case 138:
		resp->insertBoolean(removeWaypoint((WaypointObject*) inv->getObjectParameter()));
		break;
	case 139:
		resp->insertLong(getWaypoint(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 140:
		updateWaypoint((WaypointObject*) inv->getObjectParameter());
		break;
	case 141:
		saveWaypoints((Player*) inv->getObjectParameter());
		break;
	case 142:
		resp->insertLong(searchWaypoint((Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_searchWaypoint__Player_String_int_), inv->getSignedIntParameter())->_getObjectID());
		break;
	case 143:
		queueHeal((TangibleObject*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getAsciiParameter(_param2_queueHeal__TangibleObject_int_String_));
		break;
	case 144:
		addXp(inv->getAsciiParameter(_param0_addXp__String_int_bool_), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 145:
		removeXp(inv->getAsciiParameter(_param0_removeXp__String_int_bool_), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 146:
		loadXp(inv->getAsciiParameter(_param0_loadXp__String_));
		break;
	case 147:
		resp->insertAscii(saveXp());
		break;
	case 148:
		removeFromDuelList((Player*) inv->getObjectParameter());
		break;
	case 149:
		addToDuelList((Player*) inv->getObjectParameter());
		break;
	case 150:
		resp->insertBoolean(isInDuelWith((Player*) inv->getObjectParameter(), inv->getBooleanParameter()));
		break;
	case 151:
		resp->insertLong(getDuelListObject(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 152:
		resp->insertBoolean(requestedDuelTo((Player*) inv->getObjectParameter()));
		break;
	case 153:
		resp->insertBoolean(isDuelListEmpty());
		break;
	case 154:
		resp->insertSignedInt(getDuelListSize());
		break;
	case 155:
		resp->insertBoolean(setGuild(inv->getUnsignedIntParameter()));
		break;
	case 156:
		setGuild((Guild*) inv->getObjectParameter());
		break;
	case 157:
		resp->insertBoolean(updateGuild(inv->getUnsignedIntParameter()));
		break;
	case 158:
		updateGuild((Guild*) inv->getObjectParameter());
		break;
	case 159:
		addChatRoom((ChatRoom*) inv->getObjectParameter());
		break;
	case 160:
		removeChatRoom((ChatRoom*) inv->getObjectParameter());
		break;
	case 161:
		sendSystemMessage(inv->getAsciiParameter(_param0_sendSystemMessage__String_));
		break;
	case 162:
		sendSystemMessage(inv->getUnicodeParameter(_param0_sendSystemMessage__UnicodeString_));
		break;
	case 163:
		sendSystemMessage(inv->getAsciiParameter(_param0_sendSystemMessage__String_String_long_), inv->getAsciiParameter(_param1_sendSystemMessage__String_String_long_), inv->getUnsignedLongParameter());
		break;
	case 164:
		sendSystemMessage(inv->getAsciiParameter(_param0_sendSystemMessage__String_String_StfParameter_), inv->getAsciiParameter(_param1_sendSystemMessage__String_String_StfParameter_), (StfParameter*) inv->getObjectParameter());
		break;
	case 165:
		sendBattleFatigueMessage((CreatureObject*) inv->getObjectParameter());
		break;
	case 166:
		sendHealMessage((CreatureObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 167:
		setConversatingCreature((CreatureObject*) inv->getObjectParameter());
		break;
	case 168:
		setFirstName(inv->getAsciiParameter(_param0_setFirstName__String_));
		break;
	case 169:
		setLastName(inv->getAsciiParameter(_param0_setLastName__String_));
		break;
	case 170:
		setFirstNameProper(inv->getAsciiParameter(_param0_setFirstNameProper__String_));
		break;
	case 171:
		setBiography(inv->getAsciiParameter(_param0_setBiography__String_));
		break;
	case 172:
		setBiography(inv->getUnicodeParameter(_param0_setBiography__UnicodeString_));
		break;
	case 173:
		resp->insertBoolean(changeForcePowerBar(inv->getSignedIntParameter()));
		break;
	case 174:
		setForcePowerBar(inv->getSignedIntParameter());
		break;
	case 175:
		updateMaxForcePowerBar(inv->getBooleanParameter());
		break;
	case 176:
		setFoodFilling(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 177:
		setDrinkFilling(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 178:
		changeFoodFilling(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 179:
		changeDrinkFilling(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 180:
		resp->insertBoolean(isAttackableBy((CreatureObject*) inv->getObjectParameter()));
		break;
	case 181:
		resp->insertSignedInt(getFoodFilling());
		break;
	case 182:
		resp->insertSignedInt(getDrinkFilling());
		break;
	case 183:
		activateDigest();
		break;
	case 184:
		activateQueueAction();
		break;
	case 185:
		setCharacterID(inv->getUnsignedLongParameter());
		break;
	case 186:
		setStartingProfession(inv->getAsciiParameter(_param0_setStartingProfession__String_));
		break;
	case 187:
		setHairObject(inv->getAsciiParameter(_param0_setHairObject__String_));
		break;
	case 188:
		updateHair();
		break;
	case 189:
		setPlayerObject((PlayerObject*) inv->getObjectParameter());
		break;
	case 190:
		setOnline();
		break;
	case 191:
		clearDisconnectEvent();
		break;
	case 192:
		setClient((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 193:
		updateNextTipTime();
		break;
	case 194:
		resp->insertBoolean(canTip());
		break;
	case 195:
		setOvert();
		break;
	case 196:
		setCovert();
		break;
	case 197:
		setOnLeave();
		break;
	case 198:
		resp->insertBoolean(isOvert());
		break;
	case 199:
		resp->insertBoolean(isCovert());
		break;
	case 200:
		resp->insertBoolean(isOnLeave());
		break;
	case 201:
		newChangeFactionStatusEvent(inv->getUnsignedCharParameter(), inv->getUnsignedIntParameter());
		break;
	case 202:
		setRaceFileName(inv->getAsciiParameter(_param0_setRaceFileName__String_));
		break;
	case 203:
		setRaceID(inv->getUnsignedCharParameter());
		break;
	case 204:
		setStartingLocation(inv->getAsciiParameter(_param0_setStartingLocation__String_));
		break;
	case 205:
		setItemShift(inv->getUnsignedIntParameter());
		break;
	case 206:
		toggleCharacterBit(inv->getUnsignedIntParameter());
		break;
	case 207:
		resp->insertBoolean(awardBadge(inv->getUnsignedIntParameter()));
		break;
	case 208:
		setLinkDead();
		break;
	case 209:
		setLoggingIn();
		break;
	case 210:
		setAdminLevel(inv->getSignedIntParameter());
		break;
	case 211:
		resp->insertSignedInt(getAdminLevel());
		break;
	case 212:
		setLastTestPositionX(inv->getFloatParameter());
		break;
	case 213:
		setLastTestPositionY(inv->getFloatParameter());
		break;
	case 214:
		setTradeRequestedPlayer(inv->getUnsignedLongParameter());
		break;
	case 215:
		resp->insertLong(getTradeRequestedPlayer());
		break;
	case 216:
		launchFirework(inv->getSignedIntParameter());
		break;
	case 217:
		sendMessage((BaseMessage*) inv->getObjectParameter());
		break;
	case 218:
		sendMessage((StandaloneBaseMessage*) inv->getObjectParameter());
		break;
	case 219:
		resp->insertBoolean(isJedi());
		break;
	case 220:
		mutePlayer();
		break;
	case 221:
		toggleImmune();
		break;
	case 222:
		resp->insertBoolean(hasSuiBox(inv->getUnsignedIntParameter()));
		break;
	case 223:
		resp->insertBoolean(hasSuiBoxType(inv->getUnsignedIntParameter()));
		break;
	case 224:
		resp->insertInt(getSuiBoxFromType(inv->getUnsignedIntParameter()));
		break;
	case 225:
		removeSuiBox(inv->getUnsignedIntParameter());
		break;
	case 226:
		resp->insertLong(getSuiBox(inv->getUnsignedIntParameter())->_getObjectID());
		break;
	case 227:
		addSuiBox((SuiBox*) inv->getObjectParameter());
		break;
	case 228:
		resp->insertInt(getNewSuiBoxID(inv->getUnsignedIntParameter()));
		break;
	case 229:
		resp->insertBoolean(isOnline());
		break;
	case 230:
		resp->insertBoolean(isOffline());
		break;
	case 231:
		resp->insertBoolean(isLinkDead());
		break;
	case 232:
		resp->insertBoolean(isLoggingIn());
		break;
	case 233:
		resp->insertBoolean(isLoggingOut());
		break;
	case 234:
		resp->insertLong(getPlayerObject()->_getObjectID());
		break;
	case 235:
		resp->insertLong(getConversatingCreature()->_getObjectID());
		break;
	case 236:
		resp->insertAscii(getFirstName());
		break;
	case 237:
		resp->insertAscii(getLastName());
		break;
	case 238:
		resp->insertAscii(getFirstNameProper());
		break;
	case 239:
		resp->insertAscii(getRaceFileName());
		break;
	case 240:
		resp->insertByte(getRaceID());
		break;
	case 241:
		resp->insertUnicode(getBiography());
		break;
	case 242:
		resp->insertLong(getCharacterID());
		break;
	case 243:
		resp->insertAscii(getStartingProfession());
		break;
	case 244:
		resp->insertSignedInt(getZoneIndex());
		break;
	case 245:
		resp->insertAscii(getHairObject());
		break;
	case 246:
		resp->insertLong(getClient()->_getObjectID());
		break;
	case 247:
		resp->insertLong(getGroupObject()->_getObjectID());
		break;
	case 248:
		resp->insertSignedInt(getPvpRating());
		break;
	case 249:
		setPvpRating(inv->getSignedIntParameter());
		break;
	case 250:
		increasePvpRating(inv->getSignedIntParameter());
		break;
	case 251:
		decreasePvpRating(inv->getSignedIntParameter());
		break;
	case 252:
		getPlayersNearYou();
		break;
	case 253:
		resp->insertSignedInt(getRegionID());
		break;
	case 254:
		resp->insertSignedInt(getCertificationListSize());
		break;
	case 255:
		resp->insertAscii(getCertification(inv->getSignedIntParameter()));
		break;
	case 256:
		resp->insertBoolean(checkCertification(inv->getAsciiParameter(_param0_checkCertification__String_)));
		break;
	case 257:
		resp->insertSignedInt(getSlicingAbility());
		break;
	case 258:
		resp->insertBoolean(isChatMuted());
		break;
	case 259:
		resp->insertBoolean(isImmune());
		break;
	case 260:
		resp->insertAscii(getInputBoxReturnBuffer());
		break;
	case 261:
		resp->insertInt(nextMisoRFC());
		break;
	case 262:
		resp->insertSignedInt(checkMisoBSB(inv->getSignedIntParameter()));
		break;
	case 263:
		setMisoBSB(inv->getSignedIntParameter());
		break;
	case 264:
		addToCurMisoKeys(inv->getAsciiParameter(_param0_addToCurMisoKeys__String_));
		break;
	case 265:
		resp->insertBoolean(isOnCurMisoKey(inv->getAsciiParameter(_param0_isOnCurMisoKey__String_)));
		break;
	case 266:
		removeFromCurMisoKeys(inv->getAsciiParameter(_param0_removeFromCurMisoKeys__String_));
		break;
	case 267:
		addToFinMisoKeys(inv->getAsciiParameter(_param0_addToFinMisoKeys__String_));
		break;
	case 268:
		resp->insertBoolean(hasCompletedMisoKey(inv->getAsciiParameter(_param0_hasCompletedMisoKey__String_)));
		break;
	case 269:
		updateMissionSave(inv->getAsciiParameter(_param0_updateMissionSave__String_String_String_String_bool_), inv->getAsciiParameter(_param1_updateMissionSave__String_String_String_String_bool_), inv->getAsciiParameter(_param2_updateMissionSave__String_String_String_String_bool_), inv->getAsciiParameter(_param3_updateMissionSave__String_String_String_String_bool_), inv->getBooleanParameter());
		break;
	case 270:
		fillMissionSaveVars();
		break;
	case 271:
		saveMissions();
		break;
	case 272:
		resp->insertLong(getCurrentCraftingTool()->_getObjectID());
		break;
	case 273:
		resp->insertLong(getCraftingTool(inv->getSignedIntParameter(), inv->getBooleanParameter())->_getObjectID());
		break;
	case 274:
		setCurrentCraftingTool((CraftingTool*) inv->getObjectParameter());
		break;
	case 275:
		clearCurrentCraftingTool();
		break;
	case 276:
		prepareCraftingSession((CraftingTool*) inv->getObjectParameter(), (DraftSchematic*) inv->getObjectParameter());
		break;
	case 277:
		addIngredientToSlot((TangibleObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 278:
		removeResourceFromCraft(inv->getUnsignedLongParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 279:
		nextCraftingStage(inv->getAsciiParameter(_param0_nextCraftingStage__String_));
		break;
	case 280:
		craftingCustomization(inv->getAsciiParameter(_param0_craftingCustomization__String_int_String_), inv->getSignedIntParameter(), inv->getAsciiParameter(_param2_craftingCustomization__String_int_String_));
		break;
	case 281:
		createPrototype(inv->getAsciiParameter(_param0_createPrototype__String_));
		break;
	case 282:
		createSchematic(inv->getAsciiParameter(_param0_createSchematic__String_));
		break;
	case 283:
		handleExperimenting(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getAsciiParameter(_param2_handleExperimenting__int_int_String_));
		break;
	case 284:
		sendDraftSchematics();
		break;
	case 285:
		addDraftSchematicsFromGroupName(inv->getAsciiParameter(_param0_addDraftSchematicsFromGroupName__String_));
		break;
	case 286:
		subtractDraftSchematicsFromGroupName(inv->getAsciiParameter(_param0_subtractDraftSchematicsFromGroupName__String_));
		break;
	case 287:
		addDraftSchematic((DraftSchematic*) inv->getObjectParameter());
		break;
	case 288:
		subtractDraftSchematic((DraftSchematic*) inv->getObjectParameter());
		break;
	case 289:
		resp->insertInt(getDraftSchematicListSize());
		break;
	case 290:
		resp->insertInt(getDraftSchematicUpdateCount(inv->getUnsignedIntParameter()));
		break;
	case 291:
		resp->insertLong(getDraftSchematic(inv->getUnsignedIntParameter())->_getObjectID());
		break;
	case 292:
		resp->insertLong(getDraftSchematic(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 293:
		resp->insertBoolean(isChangingFactionStatus());
		break;
	case 294:
		resp->insertLong(getDatapad()->_getObjectID());
		break;
	case 295:
		resp->insertLong(getNewItemID());
		break;
	case 296:
		resp->insertInt(getItemShift());
		break;
	case 297:
		resp->insertFloat(getLastTestPositionX());
		break;
	case 298:
		resp->insertFloat(getLastTestPositionY());
		break;
	case 299:
		resp->insertInt(getForcePower());
		break;
	case 300:
		resp->insertInt(getForcePowerMax());
		break;
	case 301:
		resp->insertBoolean(isGuildLeader());
		break;
	case 302:
		resp->insertLong(getCurrentStructureID());
		break;
	case 303:
		setCurrentStructureID(inv->getUnsignedLongParameter());
		break;
	case 304:
		resp->insertLong(getSurveyTool()->_getObjectID());
		break;
	case 305:
		resp->insertLong(getSampleTool()->_getObjectID());
		break;
	case 306:
		setSurveyTool((SurveyTool*) inv->getObjectParameter());
		break;
	case 307:
		setSampleTool((SurveyTool*) inv->getObjectParameter());
		break;
	case 308:
		setSurveyWaypoint((WaypointObject*) inv->getObjectParameter());
		break;
	case 309:
		resp->insertLong(getSurveyWaypoint()->_getObjectID());
		break;
	case 310:
		resp->insertBoolean(getCanSurvey());
		break;
	case 311:
		resp->insertBoolean(getCanSample());
		break;
	case 312:
		setCanSurvey();
		break;
	case 313:
		setCanSample();
		break;
	case 314:
		clearFirstSampleEvent();
		break;
	case 315:
		setSurveyEvent(inv->getAsciiParameter(_param0_setSurveyEvent__String_));
		break;
	case 316:
		setSampleEvent(inv->getAsciiParameter(_param0_setSampleEvent__String_bool_), inv->getBooleanParameter());
		break;
	case 317:
		setCancelSample(inv->getBooleanParameter());
		break;
	case 318:
		resp->insertBoolean(getCancelSample());
		break;
	case 319:
		sendSampleTimeRemaining();
		break;
	case 320:
		setSurveyErrorMessage();
		break;
	case 321:
		setSampleErrorMessage();
		break;
	case 322:
		resp->insertBoolean(getSurveyErrorMessage());
		break;
	case 323:
		resp->insertBoolean(getSampleErrorMessage());
		break;
	case 324:
		sendMail(inv->getAsciiParameter(_param0_sendMail__String_UnicodeString_UnicodeString_String_), inv->getUnicodeParameter(_param1_sendMail__String_UnicodeString_UnicodeString_String_), inv->getUnicodeParameter(_param2_sendMail__String_UnicodeString_UnicodeString_String_), inv->getAsciiParameter(_param3_sendMail__String_UnicodeString_UnicodeString_String_));
		break;
	case 325:
		setEntertainerEvent();
		break;
	case 326:
		clearEntertainerEvent();
		break;
	case 327:
		setLastNpcConvStr(inv->getAsciiParameter(_param0_setLastNpcConvStr__String_));
		break;
	case 328:
		setLastNpcConvMessStr(inv->getAsciiParameter(_param0_setLastNpcConvMessStr__String_));
		break;
	case 329:
		resp->insertAscii(getLastNpcConvStr());
		break;
	case 330:
		resp->insertAscii(getLastNpcConvMessStr());
		break;
	case 331:
		setInputBoxReturnBuffer(inv->getAsciiParameter(_param0_setInputBoxReturnBuffer__String_));
		break;
	case 332:
		setGuildLeader(inv->getBooleanParameter());
		break;
	case 333:
		loadGuildChat();
		break;
	case 334:
		setGuildPermissions(inv->getUnsignedIntParameter());
		break;
	case 335:
		resp->insertInt(getGuildPermissions());
		break;
	case 336:
		resp->insertBoolean(setGuildPermissionsBit(inv->getUnsignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 337:
		toggleGuildPermissionsBit(inv->getUnsignedIntParameter());
		break;
	case 338:
		resp->insertBoolean(clearGuildPermissionsBit(inv->getUnsignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 339:
		resp->insertSignedInt(getFactionPoints(inv->getAsciiParameter(_param0_getFactionPoints__String_)));
		break;
	case 340:
		addFactionPoints(inv->getAsciiParameter(_param0_addFactionPoints__String_int_), inv->getUnsignedIntParameter());
		break;
	case 341:
		subtractFactionPoints(inv->getAsciiParameter(_param0_subtractFactionPoints__String_int_), inv->getUnsignedIntParameter());
		break;
	case 342:
		resp->insertSignedInt(getFactionStatus());
		break;
	case 343:
		setFactionStatus(inv->getSignedIntParameter());
		break;
	case 344:
		resp->insertLong(getFactionList()->_getObjectID());
		break;
	case 345:
		resp->insertInt(getMaxFactionPoints(inv->getAsciiParameter(_param0_getMaxFactionPoints__String_)));
		break;
	case 346:
		delFactionPoints((Player*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case 347:
		addSuiBoxChoice(inv->getAsciiParameter(_param0_addSuiBoxChoice__String_));
		break;
	case 348:
		removeLastSuiBoxChoice();
		break;
	case 349:
		setSuiBoxChoices((SuiListBoxVector*) inv->getObjectParameter());
		break;
	case 350:
		resp->insertLong(getSuiBoxChoices()->_getObjectID());
		break;
	case 351:
		clearSuiBoxChoices();
		break;
	case 352:
		setResourceDeedID(inv->getUnsignedLongParameter());
		break;
	case 353:
		resp->insertLong(getResourceDeedID());
		break;
	default:
		return NULL;
	}

	return resp;
}

void PlayerAdapter::initialize() {
	return ((PlayerImplementation*) impl)->initialize();
}

void PlayerAdapter::create(ZoneClientSession* client) {
	return ((PlayerImplementation*) impl)->create(client);
}

void PlayerAdapter::refuseCreate(ZoneClientSession* client) {
	return ((PlayerImplementation*) impl)->refuseCreate(client);
}

void PlayerAdapter::load(ZoneClientSession* client) {
	return ((PlayerImplementation*) impl)->load(client);
}

void PlayerAdapter::reload(ZoneClientSession* client) {
	return ((PlayerImplementation*) impl)->reload(client);
}

void PlayerAdapter::unload() {
	return ((PlayerImplementation*) impl)->unload();
}

void PlayerAdapter::savePlayerState(bool doSchedule) {
	return ((PlayerImplementation*) impl)->savePlayerState(doSchedule);
}

void PlayerAdapter::disconnect(bool closeClient, bool doLock) {
	return ((PlayerImplementation*) impl)->disconnect(closeClient, doLock);
}

void PlayerAdapter::logout(bool doLock) {
	return ((PlayerImplementation*) impl)->logout(doLock);
}

void PlayerAdapter::userLogout(int msgCounter) {
	return ((PlayerImplementation*) impl)->userLogout(msgCounter);
}

void PlayerAdapter::resurrectCountdown(int counter) {
	return ((PlayerImplementation*) impl)->resurrectCountdown(counter);
}

void PlayerAdapter::clearLogoutEvent() {
	return ((PlayerImplementation*) impl)->clearLogoutEvent();
}

void PlayerAdapter::clearResurrectEvent() {
	return ((PlayerImplementation*) impl)->clearResurrectEvent();
}

void PlayerAdapter::makeCharacterMask() {
	return ((PlayerImplementation*) impl)->makeCharacterMask();
}

unsigned int PlayerAdapter::getCharacterMask() {
	return ((PlayerImplementation*) impl)->getCharacterMask();
}

void PlayerAdapter::insertToZone(Zone* zone) {
	return ((PlayerImplementation*) impl)->insertToZone(zone);
}

void PlayerAdapter::reinsertToZone(Zone* zone) {
	return ((PlayerImplementation*) impl)->reinsertToZone(zone);
}

void PlayerAdapter::updateZone(bool lightUpdate) {
	return ((PlayerImplementation*) impl)->updateZone(lightUpdate);
}

void PlayerAdapter::updateZoneWithParent(unsigned long long cell, bool lightUpdate) {
	return ((PlayerImplementation*) impl)->updateZoneWithParent(cell, lightUpdate);
}

void PlayerAdapter::switchMap(int planetid) {
	return ((PlayerImplementation*) impl)->switchMap(planetid);
}

void PlayerAdapter::doWarp(float x, float y, float z, float randomizeDistance, unsigned long long parentID) {
	return ((PlayerImplementation*) impl)->doWarp(x, y, z, randomizeDistance, parentID);
}

void PlayerAdapter::bounceBack() {
	return ((PlayerImplementation*) impl)->bounceBack();
}

void PlayerAdapter::sendTo(Player* player) {
	return ((PlayerImplementation*) impl)->sendTo(player);
}

void PlayerAdapter::sendToOwner() {
	return ((PlayerImplementation*) impl)->sendToOwner();
}

void PlayerAdapter::notifySceneReady() {
	return ((PlayerImplementation*) impl)->notifySceneReady();
}

void PlayerAdapter::addDatapadItem(SceneObject* item) {
	return ((PlayerImplementation*) impl)->addDatapadItem(item);
}

SceneObject* PlayerAdapter::getDatapadItem(unsigned long long oid) {
	return ((PlayerImplementation*) impl)->getDatapadItem(oid);
}

void PlayerAdapter::removeDatapadItem(unsigned long long oid) {
	return ((PlayerImplementation*) impl)->removeDatapadItem(oid);
}

SceneObject* PlayerAdapter::getPlayerItem(unsigned long long oid) {
	return ((PlayerImplementation*) impl)->getPlayerItem(oid);
}

unsigned int PlayerAdapter::getTargetHealth() {
	return ((PlayerImplementation*) impl)->getTargetHealth();
}

unsigned int PlayerAdapter::getTargetStrength() {
	return ((PlayerImplementation*) impl)->getTargetStrength();
}

unsigned int PlayerAdapter::getTargetConstitution() {
	return ((PlayerImplementation*) impl)->getTargetConstitution();
}

unsigned int PlayerAdapter::getTargetAction() {
	return ((PlayerImplementation*) impl)->getTargetAction();
}

unsigned int PlayerAdapter::getTargetQuickness() {
	return ((PlayerImplementation*) impl)->getTargetQuickness();
}

unsigned int PlayerAdapter::getTargetStamina() {
	return ((PlayerImplementation*) impl)->getTargetStamina();
}

unsigned int PlayerAdapter::getTargetMind() {
	return ((PlayerImplementation*) impl)->getTargetMind();
}

unsigned int PlayerAdapter::getTargetFocus() {
	return ((PlayerImplementation*) impl)->getTargetFocus();
}

unsigned int PlayerAdapter::getTargetWillpower() {
	return ((PlayerImplementation*) impl)->getTargetWillpower();
}

void PlayerAdapter::setTargetHealth(unsigned int health) {
	return ((PlayerImplementation*) impl)->setTargetHealth(health);
}

void PlayerAdapter::setTargetStrength(unsigned int strength) {
	return ((PlayerImplementation*) impl)->setTargetStrength(strength);
}

void PlayerAdapter::setTargetConstitution(unsigned int constituition) {
	return ((PlayerImplementation*) impl)->setTargetConstitution(constituition);
}

void PlayerAdapter::setTargetAction(unsigned int action) {
	return ((PlayerImplementation*) impl)->setTargetAction(action);
}

void PlayerAdapter::setTargetQuickness(unsigned int quickness) {
	return ((PlayerImplementation*) impl)->setTargetQuickness(quickness);
}

void PlayerAdapter::setTargetStamina(unsigned int stamina) {
	return ((PlayerImplementation*) impl)->setTargetStamina(stamina);
}

void PlayerAdapter::setTargetMind(unsigned int mind) {
	return ((PlayerImplementation*) impl)->setTargetMind(mind);
}

void PlayerAdapter::setTargetFocus(unsigned int focus) {
	return ((PlayerImplementation*) impl)->setTargetFocus(focus);
}

void PlayerAdapter::setTargetWillpower(unsigned int willpower) {
	return ((PlayerImplementation*) impl)->setTargetWillpower(willpower);
}

unsigned int PlayerAdapter::getMinHealth() {
	return ((PlayerImplementation*) impl)->getMinHealth();
}

unsigned int PlayerAdapter::getMaxHealth() {
	return ((PlayerImplementation*) impl)->getMaxHealth();
}

unsigned int PlayerAdapter::getMinStrength() {
	return ((PlayerImplementation*) impl)->getMinStrength();
}

unsigned int PlayerAdapter::getMaxStrength() {
	return ((PlayerImplementation*) impl)->getMaxStrength();
}

unsigned int PlayerAdapter::getMinConstitution() {
	return ((PlayerImplementation*) impl)->getMinConstitution();
}

unsigned int PlayerAdapter::getMaxConstitution() {
	return ((PlayerImplementation*) impl)->getMaxConstitution();
}

unsigned int PlayerAdapter::getMinAction() {
	return ((PlayerImplementation*) impl)->getMinAction();
}

unsigned int PlayerAdapter::getMaxAction() {
	return ((PlayerImplementation*) impl)->getMaxAction();
}

unsigned int PlayerAdapter::getMinQuickness() {
	return ((PlayerImplementation*) impl)->getMinQuickness();
}

unsigned int PlayerAdapter::getMaxQuickness() {
	return ((PlayerImplementation*) impl)->getMaxQuickness();
}

unsigned int PlayerAdapter::getMinStamina() {
	return ((PlayerImplementation*) impl)->getMinStamina();
}

unsigned int PlayerAdapter::getMaxStamina() {
	return ((PlayerImplementation*) impl)->getMaxStamina();
}

unsigned int PlayerAdapter::getMinMind() {
	return ((PlayerImplementation*) impl)->getMinMind();
}

unsigned int PlayerAdapter::getMaxMind() {
	return ((PlayerImplementation*) impl)->getMaxMind();
}

unsigned int PlayerAdapter::getMinFocus() {
	return ((PlayerImplementation*) impl)->getMinFocus();
}

unsigned int PlayerAdapter::getMaxFocus() {
	return ((PlayerImplementation*) impl)->getMaxFocus();
}

unsigned int PlayerAdapter::getMinWillpower() {
	return ((PlayerImplementation*) impl)->getMinWillpower();
}

unsigned int PlayerAdapter::getMaxWillpower() {
	return ((PlayerImplementation*) impl)->getMaxWillpower();
}

unsigned int PlayerAdapter::getTotalAttribPoints() {
	return ((PlayerImplementation*) impl)->getTotalAttribPoints();
}

void PlayerAdapter::queueFlourish(const String& modifier, unsigned long long target, unsigned int actionCntr) {
	return ((PlayerImplementation*) impl)->queueFlourish(modifier, target, actionCntr);
}

void PlayerAdapter::clearQueueAction(unsigned int actioncntr, float timer, unsigned int tab1, unsigned int tab2) {
	return ((PlayerImplementation*) impl)->clearQueueAction(actioncntr, timer, tab1, tab2);
}

void PlayerAdapter::queueAction(Player* player, unsigned long long target, unsigned int actionCRC, unsigned int actionCntr, const String& actionModifier) {
	return ((PlayerImplementation*) impl)->queueAction(player, target, actionCRC, actionCntr, actionModifier);
}

void PlayerAdapter::deleteQueueAction(unsigned int actioncntr) {
	return ((PlayerImplementation*) impl)->deleteQueueAction(actioncntr);
}

void PlayerAdapter::changePosture(int post) {
	return ((PlayerImplementation*) impl)->changePosture(post);
}

void PlayerAdapter::doCenterOfBeing() {
	return ((PlayerImplementation*) impl)->doCenterOfBeing();
}

void PlayerAdapter::removeCenterOfBeing() {
	return ((PlayerImplementation*) impl)->removeCenterOfBeing();
}

void PlayerAdapter::doPowerboost() {
	return ((PlayerImplementation*) impl)->doPowerboost();
}

void PlayerAdapter::doPeace() {
	return ((PlayerImplementation*) impl)->doPeace();
}

void PlayerAdapter::kill() {
	return ((PlayerImplementation*) impl)->kill();
}

void PlayerAdapter::deathblow(Player* player) {
	return ((PlayerImplementation*) impl)->deathblow(player);
}

void PlayerAdapter::resurrect() {
	return ((PlayerImplementation*) impl)->resurrect();
}

void PlayerAdapter::handleDeath() {
	return ((PlayerImplementation*) impl)->handleDeath();
}

void PlayerAdapter::throttlePvpRating(Player* player) {
	return ((PlayerImplementation*) impl)->throttlePvpRating(player);
}

void PlayerAdapter::doClone() {
	return ((PlayerImplementation*) impl)->doClone();
}

void PlayerAdapter::activateClone() {
	return ((PlayerImplementation*) impl)->activateClone();
}

void PlayerAdapter::doRecovery() {
	return ((PlayerImplementation*) impl)->doRecovery();
}

void PlayerAdapter::doDigest() {
	return ((PlayerImplementation*) impl)->doDigest();
}

bool PlayerAdapter::hasConsent(String& charID) {
	return ((PlayerImplementation*) impl)->hasConsent(charID);
}

bool PlayerAdapter::giveConsent(String& name) {
	return ((PlayerImplementation*) impl)->giveConsent(name);
}

bool PlayerAdapter::revokeConsent(String& name) {
	return ((PlayerImplementation*) impl)->revokeConsent(name);
}

int PlayerAdapter::getConsentSize() {
	return ((PlayerImplementation*) impl)->getConsentSize();
}

String& PlayerAdapter::getConsentEntry(int index) {
	return ((PlayerImplementation*) impl)->getConsentEntry(index);
}

void PlayerAdapter::sendConsentBox() {
	return ((PlayerImplementation*) impl)->sendConsentBox();
}

void PlayerAdapter::addBuff(unsigned int buffcrc, float time) {
	return ((PlayerImplementation*) impl)->addBuff(buffcrc, time);
}

void PlayerAdapter::lootCorpse(bool lootAll) {
	return ((PlayerImplementation*) impl)->lootCorpse(lootAll);
}

void PlayerAdapter::lootObject(Creature* creature, SceneObject* object) {
	return ((PlayerImplementation*) impl)->lootObject(creature, object);
}

void PlayerAdapter::addTradeItem(TangibleObject* item) {
	return ((PlayerImplementation*) impl)->addTradeItem(item);
}

void PlayerAdapter::clearTradeItems() {
	return ((PlayerImplementation*) impl)->clearTradeItems();
}

int PlayerAdapter::getTradeSize() {
	return ((PlayerImplementation*) impl)->getTradeSize();
}

TangibleObject* PlayerAdapter::getTradeItem(int idx) {
	return ((PlayerImplementation*) impl)->getTradeItem(idx);
}

void PlayerAdapter::setAcceptedTrade(bool val) {
	return ((PlayerImplementation*) impl)->setAcceptedTrade(val);
}

bool PlayerAdapter::hasAcceptedTrade() {
	return ((PlayerImplementation*) impl)->hasAcceptedTrade();
}

void PlayerAdapter::setVerifiedTrade(bool val) {
	return ((PlayerImplementation*) impl)->setVerifiedTrade(val);
}

bool PlayerAdapter::hasVerifiedTrade() {
	return ((PlayerImplementation*) impl)->hasVerifiedTrade();
}

void PlayerAdapter::setMoneyToTrade(unsigned int value) {
	return ((PlayerImplementation*) impl)->setMoneyToTrade(value);
}

unsigned int PlayerAdapter::getMoneyToTrade() {
	return ((PlayerImplementation*) impl)->getMoneyToTrade();
}

bool PlayerAdapter::getMeditate() {
	return ((PlayerImplementation*) impl)->getMeditate();
}

void PlayerAdapter::changeCloth(unsigned long long itemid) {
	return ((PlayerImplementation*) impl)->changeCloth(itemid);
}

void PlayerAdapter::changeWeapon(unsigned long long itemid) {
	return ((PlayerImplementation*) impl)->changeWeapon(itemid);
}

void PlayerAdapter::changeArmor(unsigned long long itemid, bool forced) {
	return ((PlayerImplementation*) impl)->changeArmor(itemid, forced);
}

void PlayerAdapter::setWeaponSkillMods(Weapon* weapon) {
	return ((PlayerImplementation*) impl)->setWeaponSkillMods(weapon);
}

void PlayerAdapter::setArmorSkillMods(Armor* armor) {
	return ((PlayerImplementation*) impl)->setArmorSkillMods(armor);
}

bool PlayerAdapter::setArmorEncumbrance(Armor* armor, bool forced) {
	return ((PlayerImplementation*) impl)->setArmorEncumbrance(armor, forced);
}

void PlayerAdapter::applyAttachment(unsigned long long attachmentID, unsigned long long targetID) {
	return ((PlayerImplementation*) impl)->applyAttachment(attachmentID, targetID);
}

void PlayerAdapter::applyPowerup(unsigned long long powerupID, unsigned long long targetID) {
	return ((PlayerImplementation*) impl)->applyPowerup(powerupID, targetID);
}

void PlayerAdapter::createItems() {
	return ((PlayerImplementation*) impl)->createItems();
}

void PlayerAdapter::loadItems() {
	return ((PlayerImplementation*) impl)->loadItems();
}

void PlayerAdapter::createBaseStats() {
	return ((PlayerImplementation*) impl)->createBaseStats();
}

void PlayerAdapter::decayInventory() {
	return ((PlayerImplementation*) impl)->decayInventory();
}

bool PlayerAdapter::hasFullInventory() {
	return ((PlayerImplementation*) impl)->hasFullInventory();
}

void PlayerAdapter::addInventoryItem(TangibleObject* item) {
	return ((PlayerImplementation*) impl)->addInventoryItem(item);
}

void PlayerAdapter::addInventoryResource(ResourceContainer* item) {
	return ((PlayerImplementation*) impl)->addInventoryResource(item);
}

void PlayerAdapter::equipPlayerItem(TangibleObject* item) {
	return ((PlayerImplementation*) impl)->equipPlayerItem(item);
}

void PlayerAdapter::saveDatapad(Player* player) {
	return ((PlayerImplementation*) impl)->saveDatapad(player);
}

void PlayerAdapter::saveProfessions() {
	return ((PlayerImplementation*) impl)->saveProfessions();
}

void PlayerAdapter::loadProfessions() {
	return ((PlayerImplementation*) impl)->loadProfessions();
}

void PlayerAdapter::trainStartingProfession() {
	return ((PlayerImplementation*) impl)->trainStartingProfession();
}

bool PlayerAdapter::trainSkillBox(const String& name, bool updateClient) {
	return ((PlayerImplementation*) impl)->trainSkillBox(name, updateClient);
}

void PlayerAdapter::surrenderSkillBox(const String& name) {
	return ((PlayerImplementation*) impl)->surrenderSkillBox(name);
}

void PlayerAdapter::resetSkillBoxesIterator() {
	return ((PlayerImplementation*) impl)->resetSkillBoxesIterator();
}

int PlayerAdapter::getSkillBoxesSize() {
	return ((PlayerImplementation*) impl)->getSkillBoxesSize();
}

String& PlayerAdapter::getNextSkillBox() {
	return ((PlayerImplementation*) impl)->getNextSkillBox();
}

bool PlayerAdapter::hasNextSkillBox() {
	return ((PlayerImplementation*) impl)->hasNextSkillBox();
}

bool PlayerAdapter::hasSkillBox(String& skillBox) {
	return ((PlayerImplementation*) impl)->hasSkillBox(skillBox);
}

void PlayerAdapter::addWaypoint(WaypointObject* wp) {
	return ((PlayerImplementation*) impl)->addWaypoint(wp);
}

bool PlayerAdapter::removeWaypoint(WaypointObject* wp) {
	return ((PlayerImplementation*) impl)->removeWaypoint(wp);
}

WaypointObject* PlayerAdapter::getWaypoint(unsigned long long id) {
	return ((PlayerImplementation*) impl)->getWaypoint(id);
}

void PlayerAdapter::updateWaypoint(WaypointObject* wp) {
	return ((PlayerImplementation*) impl)->updateWaypoint(wp);
}

void PlayerAdapter::saveWaypoints(Player* player) {
	return ((PlayerImplementation*) impl)->saveWaypoints(player);
}

WaypointObject* PlayerAdapter::searchWaypoint(Player* play, const String& name, int mode) {
	return ((PlayerImplementation*) impl)->searchWaypoint(play, name, mode);
}

void PlayerAdapter::queueHeal(TangibleObject* medpack, unsigned int actionCRC, const String& attribute) {
	return ((PlayerImplementation*) impl)->queueHeal(medpack, actionCRC, attribute);
}

void PlayerAdapter::addXp(String& xpType, int xp, bool updateClient) {
	return ((PlayerImplementation*) impl)->addXp(xpType, xp, updateClient);
}

void PlayerAdapter::removeXp(String& xpType, int xp, bool updateClient) {
	return ((PlayerImplementation*) impl)->removeXp(xpType, xp, updateClient);
}

void PlayerAdapter::loadXp(const String& xpStr) {
	return ((PlayerImplementation*) impl)->loadXp(xpStr);
}

String& PlayerAdapter::saveXp() {
	return ((PlayerImplementation*) impl)->saveXp();
}

void PlayerAdapter::removeFromDuelList(Player* targetPlayer) {
	return ((PlayerImplementation*) impl)->removeFromDuelList(targetPlayer);
}

void PlayerAdapter::addToDuelList(Player* targetPlayer) {
	return ((PlayerImplementation*) impl)->addToDuelList(targetPlayer);
}

bool PlayerAdapter::isInDuelWith(Player* targetPlayer, bool doLock) {
	return ((PlayerImplementation*) impl)->isInDuelWith(targetPlayer, doLock);
}

Player* PlayerAdapter::getDuelListObject(int index) {
	return ((PlayerImplementation*) impl)->getDuelListObject(index);
}

bool PlayerAdapter::requestedDuelTo(Player* targetPlayer) {
	return ((PlayerImplementation*) impl)->requestedDuelTo(targetPlayer);
}

bool PlayerAdapter::isDuelListEmpty() {
	return ((PlayerImplementation*) impl)->isDuelListEmpty();
}

int PlayerAdapter::getDuelListSize() {
	return ((PlayerImplementation*) impl)->getDuelListSize();
}

bool PlayerAdapter::setGuild(unsigned int gid) {
	return ((PlayerImplementation*) impl)->setGuild(gid);
}

void PlayerAdapter::setGuild(Guild* gild) {
	return ((PlayerImplementation*) impl)->setGuild(gild);
}

bool PlayerAdapter::updateGuild(unsigned int gid) {
	return ((PlayerImplementation*) impl)->updateGuild(gid);
}

void PlayerAdapter::updateGuild(Guild* guild) {
	return ((PlayerImplementation*) impl)->updateGuild(guild);
}

void PlayerAdapter::addChatRoom(ChatRoom* room) {
	return ((PlayerImplementation*) impl)->addChatRoom(room);
}

void PlayerAdapter::removeChatRoom(ChatRoom* room) {
	return ((PlayerImplementation*) impl)->removeChatRoom(room);
}

void PlayerAdapter::sendSystemMessage(const String& msg) {
	return ((PlayerImplementation*) impl)->sendSystemMessage(msg);
}

void PlayerAdapter::sendSystemMessage(UnicodeString& msg) {
	return ((PlayerImplementation*) impl)->sendSystemMessage(msg);
}

void PlayerAdapter::sendSystemMessage(const String& file, const String& str, unsigned long long targetid) {
	return ((PlayerImplementation*) impl)->sendSystemMessage(file, str, targetid);
}

void PlayerAdapter::sendSystemMessage(const String& file, const String& str, StfParameter* param) {
	return ((PlayerImplementation*) impl)->sendSystemMessage(file, str, param);
}

void PlayerAdapter::sendBattleFatigueMessage(CreatureObject* target) {
	return ((PlayerImplementation*) impl)->sendBattleFatigueMessage(target);
}

void PlayerAdapter::sendHealMessage(CreatureObject* target, int h, int a, int m) {
	return ((PlayerImplementation*) impl)->sendHealMessage(target, h, a, m);
}

void PlayerAdapter::setConversatingCreature(CreatureObject* conversator) {
	return ((PlayerImplementation*) impl)->setConversatingCreature(conversator);
}

void PlayerAdapter::setFirstName(const String& name) {
	return ((PlayerImplementation*) impl)->setFirstName(name);
}

void PlayerAdapter::setLastName(const String& name) {
	return ((PlayerImplementation*) impl)->setLastName(name);
}

void PlayerAdapter::setFirstNameProper(const String& name) {
	return ((PlayerImplementation*) impl)->setFirstNameProper(name);
}

void PlayerAdapter::setBiography(const String& bio) {
	return ((PlayerImplementation*) impl)->setBiography(bio);
}

void PlayerAdapter::setBiography(UnicodeString& bio) {
	return ((PlayerImplementation*) impl)->setBiography(bio);
}

bool PlayerAdapter::changeForcePowerBar(int fp) {
	return ((PlayerImplementation*) impl)->changeForcePowerBar(fp);
}

void PlayerAdapter::setForcePowerBar(int fp) {
	return ((PlayerImplementation*) impl)->setForcePowerBar(fp);
}

void PlayerAdapter::updateMaxForcePowerBar(bool updateClient) {
	return ((PlayerImplementation*) impl)->updateMaxForcePowerBar(updateClient);
}

void PlayerAdapter::setFoodFilling(int fill, bool updateClient) {
	return ((PlayerImplementation*) impl)->setFoodFilling(fill, updateClient);
}

void PlayerAdapter::setDrinkFilling(int fill, bool updateClient) {
	return ((PlayerImplementation*) impl)->setDrinkFilling(fill, updateClient);
}

void PlayerAdapter::changeFoodFilling(int fill, bool updateClient) {
	return ((PlayerImplementation*) impl)->changeFoodFilling(fill, updateClient);
}

void PlayerAdapter::changeDrinkFilling(int fill, bool updateClient) {
	return ((PlayerImplementation*) impl)->changeDrinkFilling(fill, updateClient);
}

bool PlayerAdapter::isAttackableBy(CreatureObject* attacker) {
	return ((PlayerImplementation*) impl)->isAttackableBy(attacker);
}

int PlayerAdapter::getFoodFilling() {
	return ((PlayerImplementation*) impl)->getFoodFilling();
}

int PlayerAdapter::getDrinkFilling() {
	return ((PlayerImplementation*) impl)->getDrinkFilling();
}

void PlayerAdapter::activateDigest() {
	return ((PlayerImplementation*) impl)->activateDigest();
}

void PlayerAdapter::activateQueueAction() {
	return ((PlayerImplementation*) impl)->activateQueueAction();
}

void PlayerAdapter::setCharacterID(unsigned long long id) {
	return ((PlayerImplementation*) impl)->setCharacterID(id);
}

void PlayerAdapter::setStartingProfession(const String& prof) {
	return ((PlayerImplementation*) impl)->setStartingProfession(prof);
}

void PlayerAdapter::setHairObject(const String& hair) {
	return ((PlayerImplementation*) impl)->setHairObject(hair);
}

void PlayerAdapter::updateHair() {
	return ((PlayerImplementation*) impl)->updateHair();
}

void PlayerAdapter::setPlayerObject(PlayerObject* obj) {
	return ((PlayerImplementation*) impl)->setPlayerObject(obj);
}

void PlayerAdapter::setOnline() {
	return ((PlayerImplementation*) impl)->setOnline();
}

void PlayerAdapter::clearDisconnectEvent() {
	return ((PlayerImplementation*) impl)->clearDisconnectEvent();
}

void PlayerAdapter::setClient(ZoneClientSession* client) {
	return ((PlayerImplementation*) impl)->setClient(client);
}

void PlayerAdapter::updateNextTipTime() {
	return ((PlayerImplementation*) impl)->updateNextTipTime();
}

bool PlayerAdapter::canTip() {
	return ((PlayerImplementation*) impl)->canTip();
}

void PlayerAdapter::setOvert() {
	return ((PlayerImplementation*) impl)->setOvert();
}

void PlayerAdapter::setCovert() {
	return ((PlayerImplementation*) impl)->setCovert();
}

void PlayerAdapter::setOnLeave() {
	return ((PlayerImplementation*) impl)->setOnLeave();
}

bool PlayerAdapter::isOvert() {
	return ((PlayerImplementation*) impl)->isOvert();
}

bool PlayerAdapter::isCovert() {
	return ((PlayerImplementation*) impl)->isCovert();
}

bool PlayerAdapter::isOnLeave() {
	return ((PlayerImplementation*) impl)->isOnLeave();
}

void PlayerAdapter::newChangeFactionStatusEvent(unsigned char status, unsigned int timer) {
	return ((PlayerImplementation*) impl)->newChangeFactionStatusEvent(status, timer);
}

void PlayerAdapter::setRaceFileName(String& name) {
	return ((PlayerImplementation*) impl)->setRaceFileName(name);
}

void PlayerAdapter::setRaceID(unsigned char id) {
	return ((PlayerImplementation*) impl)->setRaceID(id);
}

void PlayerAdapter::setStartingLocation(String& loc) {
	return ((PlayerImplementation*) impl)->setStartingLocation(loc);
}

void PlayerAdapter::setItemShift(unsigned int shift) {
	return ((PlayerImplementation*) impl)->setItemShift(shift);
}

void PlayerAdapter::toggleCharacterBit(unsigned int bit) {
	return ((PlayerImplementation*) impl)->toggleCharacterBit(bit);
}

bool PlayerAdapter::awardBadge(unsigned int badgeindex) {
	return ((PlayerImplementation*) impl)->awardBadge(badgeindex);
}

void PlayerAdapter::setLinkDead() {
	return ((PlayerImplementation*) impl)->setLinkDead();
}

void PlayerAdapter::setLoggingIn() {
	return ((PlayerImplementation*) impl)->setLoggingIn();
}

void PlayerAdapter::setAdminLevel(int level) {
	return ((PlayerImplementation*) impl)->setAdminLevel(level);
}

int PlayerAdapter::getAdminLevel() {
	return ((PlayerImplementation*) impl)->getAdminLevel();
}

void PlayerAdapter::setLastTestPositionX(float pos) {
	return ((PlayerImplementation*) impl)->setLastTestPositionX(pos);
}

void PlayerAdapter::setLastTestPositionY(float pos) {
	return ((PlayerImplementation*) impl)->setLastTestPositionY(pos);
}

void PlayerAdapter::setTradeRequestedPlayer(unsigned long long ID) {
	return ((PlayerImplementation*) impl)->setTradeRequestedPlayer(ID);
}

unsigned long long PlayerAdapter::getTradeRequestedPlayer() {
	return ((PlayerImplementation*) impl)->getTradeRequestedPlayer();
}

void PlayerAdapter::launchFirework(int anim) {
	return ((PlayerImplementation*) impl)->launchFirework(anim);
}

void PlayerAdapter::sendMessage(BaseMessage* msg) {
	return ((PlayerImplementation*) impl)->sendMessage(msg);
}

void PlayerAdapter::sendMessage(StandaloneBaseMessage* msg) {
	return ((PlayerImplementation*) impl)->sendMessage(msg);
}

bool PlayerAdapter::isJedi() {
	return ((PlayerImplementation*) impl)->isJedi();
}

void PlayerAdapter::mutePlayer() {
	return ((PlayerImplementation*) impl)->mutePlayer();
}

void PlayerAdapter::toggleImmune() {
	return ((PlayerImplementation*) impl)->toggleImmune();
}

bool PlayerAdapter::hasSuiBox(unsigned int boxID) {
	return ((PlayerImplementation*) impl)->hasSuiBox(boxID);
}

bool PlayerAdapter::hasSuiBoxType(unsigned int boxTypeID) {
	return ((PlayerImplementation*) impl)->hasSuiBoxType(boxTypeID);
}

unsigned int PlayerAdapter::getSuiBoxFromType(unsigned int boxTypeID) {
	return ((PlayerImplementation*) impl)->getSuiBoxFromType(boxTypeID);
}

void PlayerAdapter::removeSuiBox(unsigned int boxID) {
	return ((PlayerImplementation*) impl)->removeSuiBox(boxID);
}

SuiBox* PlayerAdapter::getSuiBox(unsigned int boxID) {
	return ((PlayerImplementation*) impl)->getSuiBox(boxID);
}

void PlayerAdapter::addSuiBox(SuiBox* sui) {
	return ((PlayerImplementation*) impl)->addSuiBox(sui);
}

unsigned int PlayerAdapter::getNewSuiBoxID(unsigned int type) {
	return ((PlayerImplementation*) impl)->getNewSuiBoxID(type);
}

bool PlayerAdapter::isOnline() {
	return ((PlayerImplementation*) impl)->isOnline();
}

bool PlayerAdapter::isOffline() {
	return ((PlayerImplementation*) impl)->isOffline();
}

bool PlayerAdapter::isLinkDead() {
	return ((PlayerImplementation*) impl)->isLinkDead();
}

bool PlayerAdapter::isLoggingIn() {
	return ((PlayerImplementation*) impl)->isLoggingIn();
}

bool PlayerAdapter::isLoggingOut() {
	return ((PlayerImplementation*) impl)->isLoggingOut();
}

PlayerObject* PlayerAdapter::getPlayerObject() {
	return ((PlayerImplementation*) impl)->getPlayerObject();
}

CreatureObject* PlayerAdapter::getConversatingCreature() {
	return ((PlayerImplementation*) impl)->getConversatingCreature();
}

String& PlayerAdapter::getFirstName() {
	return ((PlayerImplementation*) impl)->getFirstName();
}

String& PlayerAdapter::getLastName() {
	return ((PlayerImplementation*) impl)->getLastName();
}

String& PlayerAdapter::getFirstNameProper() {
	return ((PlayerImplementation*) impl)->getFirstNameProper();
}

String& PlayerAdapter::getRaceFileName() {
	return ((PlayerImplementation*) impl)->getRaceFileName();
}

unsigned char PlayerAdapter::getRaceID() {
	return ((PlayerImplementation*) impl)->getRaceID();
}

UnicodeString& PlayerAdapter::getBiography() {
	return ((PlayerImplementation*) impl)->getBiography();
}

unsigned long long PlayerAdapter::getCharacterID() {
	return ((PlayerImplementation*) impl)->getCharacterID();
}

String& PlayerAdapter::getStartingProfession() {
	return ((PlayerImplementation*) impl)->getStartingProfession();
}

int PlayerAdapter::getZoneIndex() {
	return ((PlayerImplementation*) impl)->getZoneIndex();
}

String& PlayerAdapter::getHairObject() {
	return ((PlayerImplementation*) impl)->getHairObject();
}

ZoneClientSession* PlayerAdapter::getClient() {
	return ((PlayerImplementation*) impl)->getClient();
}

GroupObject* PlayerAdapter::getGroupObject() {
	return ((PlayerImplementation*) impl)->getGroupObject();
}

int PlayerAdapter::getPvpRating() {
	return ((PlayerImplementation*) impl)->getPvpRating();
}

void PlayerAdapter::setPvpRating(int value) {
	return ((PlayerImplementation*) impl)->setPvpRating(value);
}

void PlayerAdapter::increasePvpRating(int value) {
	return ((PlayerImplementation*) impl)->increasePvpRating(value);
}

void PlayerAdapter::decreasePvpRating(int value) {
	return ((PlayerImplementation*) impl)->decreasePvpRating(value);
}

void PlayerAdapter::getPlayersNearYou() {
	return ((PlayerImplementation*) impl)->getPlayersNearYou();
}

int PlayerAdapter::getRegionID() {
	return ((PlayerImplementation*) impl)->getRegionID();
}

int PlayerAdapter::getCertificationListSize() {
	return ((PlayerImplementation*) impl)->getCertificationListSize();
}

String& PlayerAdapter::getCertification(int idx) {
	return ((PlayerImplementation*) impl)->getCertification(idx);
}

bool PlayerAdapter::checkCertification(String& certification) {
	return ((PlayerImplementation*) impl)->checkCertification(certification);
}

int PlayerAdapter::getSlicingAbility() {
	return ((PlayerImplementation*) impl)->getSlicingAbility();
}

bool PlayerAdapter::isChatMuted() {
	return ((PlayerImplementation*) impl)->isChatMuted();
}

bool PlayerAdapter::isImmune() {
	return ((PlayerImplementation*) impl)->isImmune();
}

String& PlayerAdapter::getInputBoxReturnBuffer() {
	return ((PlayerImplementation*) impl)->getInputBoxReturnBuffer();
}

unsigned int PlayerAdapter::nextMisoRFC() {
	return ((PlayerImplementation*) impl)->nextMisoRFC();
}

int PlayerAdapter::checkMisoBSB(int tcb) {
	return ((PlayerImplementation*) impl)->checkMisoBSB(tcb);
}

void PlayerAdapter::setMisoBSB(int tms) {
	return ((PlayerImplementation*) impl)->setMisoBSB(tms);
}

void PlayerAdapter::addToCurMisoKeys(String& tck) {
	return ((PlayerImplementation*) impl)->addToCurMisoKeys(tck);
}

bool PlayerAdapter::isOnCurMisoKey(String& tmk) {
	return ((PlayerImplementation*) impl)->isOnCurMisoKey(tmk);
}

void PlayerAdapter::removeFromCurMisoKeys(String& tck) {
	return ((PlayerImplementation*) impl)->removeFromCurMisoKeys(tck);
}

void PlayerAdapter::addToFinMisoKeys(String& tmp) {
	return ((PlayerImplementation*) impl)->addToFinMisoKeys(tmp);
}

bool PlayerAdapter::hasCompletedMisoKey(String& tmk) {
	return ((PlayerImplementation*) impl)->hasCompletedMisoKey(tmk);
}

void PlayerAdapter::updateMissionSave(String& misoKey, const String& dbVar, String& varName, String& varData, bool doLock) {
	return ((PlayerImplementation*) impl)->updateMissionSave(misoKey, dbVar, varName, varData, doLock);
}

void PlayerAdapter::fillMissionSaveVars() {
	return ((PlayerImplementation*) impl)->fillMissionSaveVars();
}

void PlayerAdapter::saveMissions() {
	return ((PlayerImplementation*) impl)->saveMissions();
}

CraftingTool* PlayerAdapter::getCurrentCraftingTool() {
	return ((PlayerImplementation*) impl)->getCurrentCraftingTool();
}

CraftingTool* PlayerAdapter::getCraftingTool(const int type, bool doLock) {
	return ((PlayerImplementation*) impl)->getCraftingTool(type, doLock);
}

void PlayerAdapter::setCurrentCraftingTool(CraftingTool* ct) {
	return ((PlayerImplementation*) impl)->setCurrentCraftingTool(ct);
}

void PlayerAdapter::clearCurrentCraftingTool() {
	return ((PlayerImplementation*) impl)->clearCurrentCraftingTool();
}

void PlayerAdapter::prepareCraftingSession(CraftingTool* ct, DraftSchematic* ds) {
	return ((PlayerImplementation*) impl)->prepareCraftingSession(ct, ds);
}

void PlayerAdapter::addIngredientToSlot(TangibleObject* tano, int slot, int counter) {
	return ((PlayerImplementation*) impl)->addIngredientToSlot(tano, slot, counter);
}

void PlayerAdapter::removeResourceFromCraft(unsigned long long resID, int slot, int counter) {
	return ((PlayerImplementation*) impl)->removeResourceFromCraft(resID, slot, counter);
}

void PlayerAdapter::nextCraftingStage(String& test) {
	return ((PlayerImplementation*) impl)->nextCraftingStage(test);
}

void PlayerAdapter::craftingCustomization(String& name, int condition, String& customizationString) {
	return ((PlayerImplementation*) impl)->craftingCustomization(name, condition, customizationString);
}

void PlayerAdapter::createPrototype(String& count) {
	return ((PlayerImplementation*) impl)->createPrototype(count);
}

void PlayerAdapter::createSchematic(String& count) {
	return ((PlayerImplementation*) impl)->createSchematic(count);
}

void PlayerAdapter::handleExperimenting(int count, int numRowsAttempted, String& expString) {
	return ((PlayerImplementation*) impl)->handleExperimenting(count, numRowsAttempted, expString);
}

void PlayerAdapter::sendDraftSchematics() {
	return ((PlayerImplementation*) impl)->sendDraftSchematics();
}

void PlayerAdapter::addDraftSchematicsFromGroupName(const String& schematicGroupName) {
	return ((PlayerImplementation*) impl)->addDraftSchematicsFromGroupName(schematicGroupName);
}

void PlayerAdapter::subtractDraftSchematicsFromGroupName(const String& schematicGroupName) {
	return ((PlayerImplementation*) impl)->subtractDraftSchematicsFromGroupName(schematicGroupName);
}

void PlayerAdapter::addDraftSchematic(DraftSchematic* ds) {
	return ((PlayerImplementation*) impl)->addDraftSchematic(ds);
}

void PlayerAdapter::subtractDraftSchematic(DraftSchematic* ds) {
	return ((PlayerImplementation*) impl)->subtractDraftSchematic(ds);
}

unsigned int PlayerAdapter::getDraftSchematicListSize() {
	return ((PlayerImplementation*) impl)->getDraftSchematicListSize();
}

unsigned int PlayerAdapter::getDraftSchematicUpdateCount(unsigned int count) {
	return ((PlayerImplementation*) impl)->getDraftSchematicUpdateCount(count);
}

DraftSchematic* PlayerAdapter::getDraftSchematic(unsigned int schematicID) {
	return ((PlayerImplementation*) impl)->getDraftSchematic(schematicID);
}

DraftSchematic* PlayerAdapter::getDraftSchematic(int index) {
	return ((PlayerImplementation*) impl)->getDraftSchematic(index);
}

bool PlayerAdapter::isChangingFactionStatus() {
	return ((PlayerImplementation*) impl)->isChangingFactionStatus();
}

Datapad* PlayerAdapter::getDatapad() {
	return ((PlayerImplementation*) impl)->getDatapad();
}

unsigned long long PlayerAdapter::getNewItemID() {
	return ((PlayerImplementation*) impl)->getNewItemID();
}

unsigned int PlayerAdapter::getItemShift() {
	return ((PlayerImplementation*) impl)->getItemShift();
}

float PlayerAdapter::getLastTestPositionX() {
	return ((PlayerImplementation*) impl)->getLastTestPositionX();
}

float PlayerAdapter::getLastTestPositionY() {
	return ((PlayerImplementation*) impl)->getLastTestPositionY();
}

unsigned int PlayerAdapter::getForcePower() {
	return ((PlayerImplementation*) impl)->getForcePower();
}

unsigned int PlayerAdapter::getForcePowerMax() {
	return ((PlayerImplementation*) impl)->getForcePowerMax();
}

bool PlayerAdapter::isGuildLeader() {
	return ((PlayerImplementation*) impl)->isGuildLeader();
}

unsigned long long PlayerAdapter::getCurrentStructureID() {
	return ((PlayerImplementation*) impl)->getCurrentStructureID();
}

void PlayerAdapter::setCurrentStructureID(unsigned long long oid) {
	return ((PlayerImplementation*) impl)->setCurrentStructureID(oid);
}

SurveyTool* PlayerAdapter::getSurveyTool() {
	return ((PlayerImplementation*) impl)->getSurveyTool();
}

SurveyTool* PlayerAdapter::getSampleTool() {
	return ((PlayerImplementation*) impl)->getSampleTool();
}

void PlayerAdapter::setSurveyTool(SurveyTool* sTool) {
	return ((PlayerImplementation*) impl)->setSurveyTool(sTool);
}

void PlayerAdapter::setSampleTool(SurveyTool* sTool) {
	return ((PlayerImplementation*) impl)->setSampleTool(sTool);
}

void PlayerAdapter::setSurveyWaypoint(WaypointObject* id) {
	return ((PlayerImplementation*) impl)->setSurveyWaypoint(id);
}

WaypointObject* PlayerAdapter::getSurveyWaypoint() {
	return ((PlayerImplementation*) impl)->getSurveyWaypoint();
}

bool PlayerAdapter::getCanSurvey() {
	return ((PlayerImplementation*) impl)->getCanSurvey();
}

bool PlayerAdapter::getCanSample() {
	return ((PlayerImplementation*) impl)->getCanSample();
}

void PlayerAdapter::setCanSurvey() {
	return ((PlayerImplementation*) impl)->setCanSurvey();
}

void PlayerAdapter::setCanSample() {
	return ((PlayerImplementation*) impl)->setCanSample();
}

void PlayerAdapter::clearFirstSampleEvent() {
	return ((PlayerImplementation*) impl)->clearFirstSampleEvent();
}

void PlayerAdapter::setSurveyEvent(String& resourcename) {
	return ((PlayerImplementation*) impl)->setSurveyEvent(resourcename);
}

void PlayerAdapter::setSampleEvent(String& resourcename, bool firstTime) {
	return ((PlayerImplementation*) impl)->setSampleEvent(resourcename, firstTime);
}

void PlayerAdapter::setCancelSample(bool val) {
	return ((PlayerImplementation*) impl)->setCancelSample(val);
}

bool PlayerAdapter::getCancelSample() {
	return ((PlayerImplementation*) impl)->getCancelSample();
}

void PlayerAdapter::sendSampleTimeRemaining() {
	return ((PlayerImplementation*) impl)->sendSampleTimeRemaining();
}

void PlayerAdapter::setSurveyErrorMessage() {
	return ((PlayerImplementation*) impl)->setSurveyErrorMessage();
}

void PlayerAdapter::setSampleErrorMessage() {
	return ((PlayerImplementation*) impl)->setSampleErrorMessage();
}

bool PlayerAdapter::getSurveyErrorMessage() {
	return ((PlayerImplementation*) impl)->getSurveyErrorMessage();
}

bool PlayerAdapter::getSampleErrorMessage() {
	return ((PlayerImplementation*) impl)->getSampleErrorMessage();
}

void PlayerAdapter::sendMail(String& mailsender, UnicodeString& subjectSender, UnicodeString& bodySender, String& charNameSender) {
	return ((PlayerImplementation*) impl)->sendMail(mailsender, subjectSender, bodySender, charNameSender);
}

void PlayerAdapter::setEntertainerEvent() {
	return ((PlayerImplementation*) impl)->setEntertainerEvent();
}

void PlayerAdapter::clearEntertainerEvent() {
	return ((PlayerImplementation*) impl)->clearEntertainerEvent();
}

void PlayerAdapter::setLastNpcConvStr(const String& conv) {
	return ((PlayerImplementation*) impl)->setLastNpcConvStr(conv);
}

void PlayerAdapter::setLastNpcConvMessStr(const String& mess) {
	return ((PlayerImplementation*) impl)->setLastNpcConvMessStr(mess);
}

String& PlayerAdapter::getLastNpcConvStr() {
	return ((PlayerImplementation*) impl)->getLastNpcConvStr();
}

String& PlayerAdapter::getLastNpcConvMessStr() {
	return ((PlayerImplementation*) impl)->getLastNpcConvMessStr();
}

void PlayerAdapter::setInputBoxReturnBuffer(const String& message) {
	return ((PlayerImplementation*) impl)->setInputBoxReturnBuffer(message);
}

void PlayerAdapter::setGuildLeader(bool guildLeader) {
	return ((PlayerImplementation*) impl)->setGuildLeader(guildLeader);
}

void PlayerAdapter::loadGuildChat() {
	return ((PlayerImplementation*) impl)->loadGuildChat();
}

void PlayerAdapter::setGuildPermissions(unsigned int bit) {
	return ((PlayerImplementation*) impl)->setGuildPermissions(bit);
}

unsigned int PlayerAdapter::getGuildPermissions() {
	return ((PlayerImplementation*) impl)->getGuildPermissions();
}

bool PlayerAdapter::setGuildPermissionsBit(unsigned int bit, bool updateClient) {
	return ((PlayerImplementation*) impl)->setGuildPermissionsBit(bit, updateClient);
}

void PlayerAdapter::toggleGuildPermissionsBit(unsigned int bit) {
	return ((PlayerImplementation*) impl)->toggleGuildPermissionsBit(bit);
}

bool PlayerAdapter::clearGuildPermissionsBit(unsigned int bit, bool updateClient) {
	return ((PlayerImplementation*) impl)->clearGuildPermissionsBit(bit, updateClient);
}

int PlayerAdapter::getFactionPoints(const String& faction) {
	return ((PlayerImplementation*) impl)->getFactionPoints(faction);
}

void PlayerAdapter::addFactionPoints(const String& faction, unsigned int points) {
	return ((PlayerImplementation*) impl)->addFactionPoints(faction, points);
}

void PlayerAdapter::subtractFactionPoints(const String& faction, unsigned int points) {
	return ((PlayerImplementation*) impl)->subtractFactionPoints(faction, points);
}

int PlayerAdapter::getFactionStatus() {
	return ((PlayerImplementation*) impl)->getFactionStatus();
}

void PlayerAdapter::setFactionStatus(int status) {
	return ((PlayerImplementation*) impl)->setFactionStatus(status);
}

FactionPointList* PlayerAdapter::getFactionList() {
	return ((PlayerImplementation*) impl)->getFactionList();
}

unsigned int PlayerAdapter::getMaxFactionPoints(String& faction) {
	return ((PlayerImplementation*) impl)->getMaxFactionPoints(faction);
}

void PlayerAdapter::delFactionPoints(Player* player, unsigned int amount) {
	return ((PlayerImplementation*) impl)->delFactionPoints(player, amount);
}

void PlayerAdapter::addSuiBoxChoice(String& choice) {
	return ((PlayerImplementation*) impl)->addSuiBoxChoice(choice);
}

void PlayerAdapter::removeLastSuiBoxChoice() {
	return ((PlayerImplementation*) impl)->removeLastSuiBoxChoice();
}

void PlayerAdapter::setSuiBoxChoices(SuiListBoxVector* choicesList) {
	return ((PlayerImplementation*) impl)->setSuiBoxChoices(choicesList);
}

SuiListBoxVector* PlayerAdapter::getSuiBoxChoices() {
	return ((PlayerImplementation*) impl)->getSuiBoxChoices();
}

void PlayerAdapter::clearSuiBoxChoices() {
	return ((PlayerImplementation*) impl)->clearSuiBoxChoices();
}

void PlayerAdapter::setResourceDeedID(unsigned long long objectID) {
	return ((PlayerImplementation*) impl)->setResourceDeedID(objectID);
}

unsigned long long PlayerAdapter::getResourceDeedID() {
	return ((PlayerImplementation*) impl)->getResourceDeedID();
}

/*
 *	PlayerHelper
 */

PlayerHelper* PlayerHelper::staticInitializer = PlayerHelper::instance();

PlayerHelper::PlayerHelper() {
	className = "Player";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void PlayerHelper::finalizeHelper() {
	PlayerHelper::finalize();
}

DistributedObject* PlayerHelper::instantiateObject() {
	return new Player(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PlayerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlayerAdapter((PlayerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	PlayerServant
 */

PlayerServant::PlayerServant(unsigned long long oid) : CreatureObjectImplementation(oid) {
	_classHelper = PlayerHelper::instance();
}

PlayerServant::~PlayerServant() {
}

void PlayerServant::_setStub(DistributedObjectStub* stub) {
	_this = (Player*) stub;
	CreatureObjectServant::_setStub(stub);
}

DistributedObjectStub* PlayerServant::_getStub() {
	return _this;
}

