/*
 *	server/zone/objects/player/badges/Badges.cpp generated by engine3 IDL compiler 0.55
 */

#include "Badges.h"

#include "BadgesImplementation.h"

#include "../Player.h"

/*
 *	BadgesStub
 */

Badges::Badges(Player* pl) {
	_impl = new BadgesImplementation(pl);
	_impl->_setStub(this);
}

Badges::Badges(DummyConstructorParameter* param) {
	_impl = NULL;
}

Badges::~Badges() {
}

void Badges::setBadge(int badgeindex) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addSignedIntParameter(badgeindex);

		method.executeWithVoidReturn();
	} else
		((BadgesImplementation*) _impl)->setBadge(badgeindex);
}

void Badges::setBitmask(int index, unsigned int bitmask) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addSignedIntParameter(index);
		method.addUnsignedIntParameter(bitmask);

		method.executeWithVoidReturn();
	} else
		((BadgesImplementation*) _impl)->setBitmask(index, bitmask);
}

bool Badges::hasBadge(int badgeindex) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addSignedIntParameter(badgeindex);

		return method.executeWithBooleanReturn();
	} else
		return ((BadgesImplementation*) _impl)->hasBadge(badgeindex);
}

unsigned int Badges::getBitmask(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addSignedIntParameter(index);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((BadgesImplementation*) _impl)->getBitmask(index);
}

/*
 *	BadgesAdapter
 */

BadgesAdapter::BadgesAdapter(BadgesImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* BadgesAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		setBadge(inv->getSignedIntParameter());
		break;
	case 7:
		setBitmask(inv->getSignedIntParameter(), inv->getUnsignedIntParameter());
		break;
	case 8:
		resp->insertBoolean(hasBadge(inv->getSignedIntParameter()));
		break;
	case 9:
		resp->insertInt(getBitmask(inv->getSignedIntParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void BadgesAdapter::setBadge(int badgeindex) {
	return ((BadgesImplementation*) impl)->setBadge(badgeindex);
}

void BadgesAdapter::setBitmask(int index, unsigned int bitmask) {
	return ((BadgesImplementation*) impl)->setBitmask(index, bitmask);
}

bool BadgesAdapter::hasBadge(int badgeindex) {
	return ((BadgesImplementation*) impl)->hasBadge(badgeindex);
}

unsigned int BadgesAdapter::getBitmask(int index) {
	return ((BadgesImplementation*) impl)->getBitmask(index);
}

/*
 *	BadgesHelper
 */

BadgesHelper* BadgesHelper::staticInitializer = BadgesHelper::instance();

BadgesHelper::BadgesHelper() {
	className = "Badges";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void BadgesHelper::finalizeHelper() {
	BadgesHelper::finalize();
}

DistributedObject* BadgesHelper::instantiateObject() {
	return new Badges(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* BadgesHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new BadgesAdapter((BadgesImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	BadgesServant
 */

BadgesServant::BadgesServant() {
	_classHelper = BadgesHelper::instance();
}

BadgesServant::~BadgesServant() {
}

void BadgesServant::_setStub(DistributedObjectStub* stub) {
	_this = (Badges*) stub;
}

DistributedObjectStub* BadgesServant::_getStub() {
	return _this;
}

