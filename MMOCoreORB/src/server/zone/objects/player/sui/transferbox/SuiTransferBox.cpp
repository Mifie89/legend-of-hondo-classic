/*
 *	server/zone/objects/player/sui/transferbox/SuiTransferBox.cpp generated by engine3 IDL compiler 0.55
 */

#include "SuiTransferBox.h"

#include "SuiTransferBoxImplementation.h"

#include "../SuiBox.h"

#include "../../Player.h"

/*
 *	SuiTransferBoxStub
 */

SuiTransferBox::SuiTransferBox(Player* player, unsigned int boxtype) : SuiBox(DummyConstructorParameter::instance()) {
	_impl = new SuiTransferBoxImplementation(player, boxtype);
	_impl->_setStub(this);
}

SuiTransferBox::SuiTransferBox(DummyConstructorParameter* param) : SuiBox(param) {
}

SuiTransferBox::~SuiTransferBox() {
}

BaseMessage* SuiTransferBox::generateMessage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return (BaseMessage*) method.executeWithObjectReturn();
	} else
		return ((SuiTransferBoxImplementation*) _impl)->generateMessage();
}

BaseMessage* SuiTransferBox::getMessage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return (BaseMessage*) method.executeWithObjectReturn();
	} else
		return ((SuiTransferBoxImplementation*) _impl)->getMessage();
}

void SuiTransferBox::addOption(const string& itemText, const string& lblType, const string& itemType) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addAsciiParameter(itemText);
		method.addAsciiParameter(lblType);
		method.addAsciiParameter(itemType);

		method.executeWithVoidReturn();
	} else
		((SuiTransferBoxImplementation*) _impl)->addOption(itemText, lblType, itemType);
}

/*
 *	SuiTransferBoxAdapter
 */

SuiTransferBoxAdapter::SuiTransferBoxAdapter(SuiTransferBoxImplementation* obj) : SuiBoxAdapter(obj) {
}

Packet* SuiTransferBoxAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertLong(generateMessage()->_getObjectID());
		break;
	case 7:
		resp->insertLong(getMessage()->_getObjectID());
		break;
	case 8:
		addOption(inv->getAsciiParameter(_param0_addOption__string_string_string_), inv->getAsciiParameter(_param1_addOption__string_string_string_), inv->getAsciiParameter(_param2_addOption__string_string_string_));
		break;
	default:
		return NULL;
	}

	return resp;
}

BaseMessage* SuiTransferBoxAdapter::generateMessage() {
	return ((SuiTransferBoxImplementation*) impl)->generateMessage();
}

BaseMessage* SuiTransferBoxAdapter::getMessage() {
	return ((SuiTransferBoxImplementation*) impl)->getMessage();
}

void SuiTransferBoxAdapter::addOption(const string& itemText, const string& lblType, const string& itemType) {
	return ((SuiTransferBoxImplementation*) impl)->addOption(itemText, lblType, itemType);
}

/*
 *	SuiTransferBoxHelper
 */

SuiTransferBoxHelper* SuiTransferBoxHelper::staticInitializer = SuiTransferBoxHelper::instance();

SuiTransferBoxHelper::SuiTransferBoxHelper() {
	className = "SuiTransferBox";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void SuiTransferBoxHelper::finalizeHelper() {
	SuiTransferBoxHelper::finalize();
}

DistributedObject* SuiTransferBoxHelper::instantiateObject() {
	return new SuiTransferBox(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SuiTransferBoxHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SuiTransferBoxAdapter((SuiTransferBoxImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	SuiTransferBoxServant
 */

SuiTransferBoxServant::SuiTransferBoxServant(Player* player, unsigned int boxtype, unsigned int typeId) : SuiBoxImplementation(player, boxtype, typeId) {
	_classHelper = SuiTransferBoxHelper::instance();
}

SuiTransferBoxServant::~SuiTransferBoxServant() {
}

void SuiTransferBoxServant::_setStub(DistributedObjectStub* stub) {
	_this = (SuiTransferBox*) stub;
	SuiBoxServant::_setStub(stub);
}

DistributedObjectStub* SuiTransferBoxServant::_getStub() {
	return _this;
}

