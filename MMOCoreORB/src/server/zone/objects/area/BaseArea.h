/*
 *	server/zone/objects/area/BaseArea.h generated by engine3 IDL compiler 0.55
 */

#ifndef BASEAREA_H_
#define BASEAREA_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/util/Coordinate.h"

class Area;

class NoBuildArea;

class ActiveArea;

#include "Area.h"

class BaseArea : public Area {
public:
	BaseArea(Coordinate* center, float width, float height);

	BaseArea(float minXPos, float maxXPos, float minYPos, float maxYPos);

	unsigned char getType();

	bool containsActiveAreas();

	bool containsNoBuildAreas();

	void addArea(Area* ar);

	void removeArea(Area* ar);

	NoBuildArea* getNoBuildArea(float x, float y);

	ActiveArea* getNoActiveArea(float x, float y);

protected:
	BaseArea(DummyConstructorParameter* param);

	virtual ~BaseArea();

	friend class BaseAreaHelper;
};

class BaseAreaImplementation;

class BaseAreaAdapter : public AreaAdapter {
public:
	BaseAreaAdapter(BaseAreaImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	unsigned char getType();

	bool containsActiveAreas();

	bool containsNoBuildAreas();

	void addArea(Area* ar);

	void removeArea(Area* ar);

	NoBuildArea* getNoBuildArea(float x, float y);

	ActiveArea* getNoActiveArea(float x, float y);

};

class BaseAreaHelper : public DistributedObjectClassHelper, public Singleton<BaseAreaHelper> {
	static BaseAreaHelper* staticInitializer;

public:
	BaseAreaHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<BaseAreaHelper>;
};

#include "AreaImplementation.h"

class BaseAreaServant : public AreaImplementation {
public:
	BaseArea* _this;

public:
	BaseAreaServant(Coordinate* center, float width, float height);
	BaseAreaServant(float minXPos, float maxXPos, float minYPos, float maxYPos);
	virtual ~BaseAreaServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*BASEAREA_H_*/
