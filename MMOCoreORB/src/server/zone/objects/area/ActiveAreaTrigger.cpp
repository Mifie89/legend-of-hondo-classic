/*
 *	server/zone/objects/area/ActiveAreaTrigger.cpp generated by engine3 IDL compiler 0.55
 */

#include "ActiveAreaTrigger.h"

#include "ActiveAreaTriggerImplementation.h"

#include "../scene/SceneObject.h"

#include "ActiveArea.h"

/*
 *	ActiveAreaTriggerStub
 */

ActiveAreaTrigger::ActiveAreaTrigger(ActiveArea* area) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new ActiveAreaTriggerImplementation(area);
	_impl->_setStub(this);
}

ActiveAreaTrigger::ActiveAreaTrigger(DummyConstructorParameter* param) : SceneObject(param) {
}

ActiveAreaTrigger::~ActiveAreaTrigger() {
}

/*
 *	ActiveAreaTriggerAdapter
 */

ActiveAreaTriggerAdapter::ActiveAreaTriggerAdapter(ActiveAreaTriggerImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* ActiveAreaTriggerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	ActiveAreaTriggerHelper
 */

ActiveAreaTriggerHelper* ActiveAreaTriggerHelper::staticInitializer = ActiveAreaTriggerHelper::instance();

ActiveAreaTriggerHelper::ActiveAreaTriggerHelper() {
	className = "ActiveAreaTrigger";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ActiveAreaTriggerHelper::finalizeHelper() {
	ActiveAreaTriggerHelper::finalize();
}

DistributedObject* ActiveAreaTriggerHelper::instantiateObject() {
	return new ActiveAreaTrigger(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ActiveAreaTriggerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ActiveAreaTriggerAdapter((ActiveAreaTriggerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ActiveAreaTriggerServant
 */

ActiveAreaTriggerServant::ActiveAreaTriggerServant() : SceneObjectImplementation() {
	_classHelper = ActiveAreaTriggerHelper::instance();
}

ActiveAreaTriggerServant::~ActiveAreaTriggerServant() {
}

void ActiveAreaTriggerServant::_setStub(DistributedObjectStub* stub) {
	_this = (ActiveAreaTrigger*) stub;
	SceneObjectServant::_setStub(stub);
}

DistributedObjectStub* ActiveAreaTriggerServant::_getStub() {
	return _this;
}

