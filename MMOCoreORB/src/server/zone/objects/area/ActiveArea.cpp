/*
 *	server/zone/objects/area/ActiveArea.cpp generated by engine3 IDL compiler 0.55
 */

#include "ActiveArea.h"

#include "ActiveAreaImplementation.h"

#include "Area.h"

#include "../../objects/scene/SceneObject.h"

/*
 *	ActiveAreaStub
 */

ActiveArea::ActiveArea(Coordinate* center, float width, float height) : Area(DummyConstructorParameter::instance()) {
	_impl = new ActiveAreaImplementation(center, width, height);
	_impl->_setStub(this);
}

ActiveArea::ActiveArea(float minXPos, float maxXPos, float minYPos, float maxYPos) : Area(DummyConstructorParameter::instance()) {
	_impl = new ActiveAreaImplementation(minXPos, maxXPos, minYPos, maxYPos);
	_impl->_setStub(this);
}

ActiveArea::ActiveArea(DummyConstructorParameter* param) : Area(param) {
}

ActiveArea::~ActiveArea() {
}

unsigned char ActiveArea::getType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((ActiveAreaImplementation*) _impl)->getType();
}

void ActiveArea::onEnter(SceneObject* so) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(so);

		method.executeWithVoidReturn();
	} else
		((ActiveAreaImplementation*) _impl)->onEnter(so);
}

void ActiveArea::onExit(SceneObject* so) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(so);

		method.executeWithVoidReturn();
	} else
		((ActiveAreaImplementation*) _impl)->onExit(so);
}

void ActiveArea::onSpawn(SceneObject* so) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(so);

		method.executeWithVoidReturn();
	} else
		((ActiveAreaImplementation*) _impl)->onSpawn(so);
}

void ActiveArea::onDespawn(SceneObject* so) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(so);

		method.executeWithVoidReturn();
	} else
		((ActiveAreaImplementation*) _impl)->onDespawn(so);
}

/*
 *	ActiveAreaAdapter
 */

ActiveAreaAdapter::ActiveAreaAdapter(ActiveAreaImplementation* obj) : AreaAdapter(obj) {
}

Packet* ActiveAreaAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertByte(getType());
		break;
	case 7:
		onEnter((SceneObject*) inv->getObjectParameter());
		break;
	case 8:
		onExit((SceneObject*) inv->getObjectParameter());
		break;
	case 9:
		onSpawn((SceneObject*) inv->getObjectParameter());
		break;
	case 10:
		onDespawn((SceneObject*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

unsigned char ActiveAreaAdapter::getType() {
	return ((ActiveAreaImplementation*) impl)->getType();
}

void ActiveAreaAdapter::onEnter(SceneObject* so) {
	return ((ActiveAreaImplementation*) impl)->onEnter(so);
}

void ActiveAreaAdapter::onExit(SceneObject* so) {
	return ((ActiveAreaImplementation*) impl)->onExit(so);
}

void ActiveAreaAdapter::onSpawn(SceneObject* so) {
	return ((ActiveAreaImplementation*) impl)->onSpawn(so);
}

void ActiveAreaAdapter::onDespawn(SceneObject* so) {
	return ((ActiveAreaImplementation*) impl)->onDespawn(so);
}

/*
 *	ActiveAreaHelper
 */

ActiveAreaHelper* ActiveAreaHelper::staticInitializer = ActiveAreaHelper::instance();

ActiveAreaHelper::ActiveAreaHelper() {
	className = "ActiveArea";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ActiveAreaHelper::finalizeHelper() {
	ActiveAreaHelper::finalize();
}

DistributedObject* ActiveAreaHelper::instantiateObject() {
	return new ActiveArea(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ActiveAreaHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ActiveAreaAdapter((ActiveAreaImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ActiveAreaServant
 */

ActiveAreaServant::ActiveAreaServant(Coordinate* center, float width, float height) : AreaImplementation(center, width, height) {
	_classHelper = ActiveAreaHelper::instance();
}

ActiveAreaServant::ActiveAreaServant(float minXPos, float maxXPos, float minYPos, float maxYPos) : AreaImplementation(minXPos, maxXPos, minYPos, maxYPos) {
	_classHelper = ActiveAreaHelper::instance();
}

ActiveAreaServant::~ActiveAreaServant() {
}

void ActiveAreaServant::_setStub(DistributedObjectStub* stub) {
	_this = (ActiveArea*) stub;
	AreaServant::_setStub(stub);
}

DistributedObjectStub* ActiveAreaServant::_getStub() {
	return _this;
}

