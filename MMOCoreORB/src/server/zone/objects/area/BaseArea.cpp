/*
 *	server/zone/objects/area/BaseArea.cpp generated by engine3 IDL compiler 0.55
 */

#include "BaseArea.h"

#include "BaseAreaImplementation.h"

#include "Area.h"

#include "NoBuildArea.h"

#include "ActiveArea.h"

/*
 *	BaseAreaStub
 */

BaseArea::BaseArea(Coordinate* center, float width, float height) : Area(DummyConstructorParameter::instance()) {
	_impl = new BaseAreaImplementation(center, width, height);
	_impl->_setStub(this);
}

BaseArea::BaseArea(float minXPos, float maxXPos, float minYPos, float maxYPos) : Area(DummyConstructorParameter::instance()) {
	_impl = new BaseAreaImplementation(minXPos, maxXPos, minYPos, maxYPos);
	_impl->_setStub(this);
}

BaseArea::BaseArea(DummyConstructorParameter* param) : Area(param) {
}

BaseArea::~BaseArea() {
}

unsigned char BaseArea::getType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((BaseAreaImplementation*) _impl)->getType();
}

bool BaseArea::containsActiveAreas() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithBooleanReturn();
	} else
		return ((BaseAreaImplementation*) _impl)->containsActiveAreas();
}

bool BaseArea::containsNoBuildAreas() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithBooleanReturn();
	} else
		return ((BaseAreaImplementation*) _impl)->containsNoBuildAreas();
}

void BaseArea::addArea(Area* ar) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(ar);

		method.executeWithVoidReturn();
	} else
		((BaseAreaImplementation*) _impl)->addArea(ar);
}

void BaseArea::removeArea(Area* ar) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(ar);

		method.executeWithVoidReturn();
	} else
		((BaseAreaImplementation*) _impl)->removeArea(ar);
}

NoBuildArea* BaseArea::getNoBuildArea(float x, float y) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addFloatParameter(x);
		method.addFloatParameter(y);

		return (NoBuildArea*) method.executeWithObjectReturn();
	} else
		return ((BaseAreaImplementation*) _impl)->getNoBuildArea(x, y);
}

ActiveArea* BaseArea::getNoActiveArea(float x, float y) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addFloatParameter(x);
		method.addFloatParameter(y);

		return (ActiveArea*) method.executeWithObjectReturn();
	} else
		return ((BaseAreaImplementation*) _impl)->getNoActiveArea(x, y);
}

/*
 *	BaseAreaAdapter
 */

BaseAreaAdapter::BaseAreaAdapter(BaseAreaImplementation* obj) : AreaAdapter(obj) {
}

Packet* BaseAreaAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertByte(getType());
		break;
	case 7:
		resp->insertBoolean(containsActiveAreas());
		break;
	case 8:
		resp->insertBoolean(containsNoBuildAreas());
		break;
	case 9:
		addArea((Area*) inv->getObjectParameter());
		break;
	case 10:
		removeArea((Area*) inv->getObjectParameter());
		break;
	case 11:
		resp->insertLong(getNoBuildArea(inv->getFloatParameter(), inv->getFloatParameter())->_getObjectID());
		break;
	case 12:
		resp->insertLong(getNoActiveArea(inv->getFloatParameter(), inv->getFloatParameter())->_getObjectID());
		break;
	default:
		return NULL;
	}

	return resp;
}

unsigned char BaseAreaAdapter::getType() {
	return ((BaseAreaImplementation*) impl)->getType();
}

bool BaseAreaAdapter::containsActiveAreas() {
	return ((BaseAreaImplementation*) impl)->containsActiveAreas();
}

bool BaseAreaAdapter::containsNoBuildAreas() {
	return ((BaseAreaImplementation*) impl)->containsNoBuildAreas();
}

void BaseAreaAdapter::addArea(Area* ar) {
	return ((BaseAreaImplementation*) impl)->addArea(ar);
}

void BaseAreaAdapter::removeArea(Area* ar) {
	return ((BaseAreaImplementation*) impl)->removeArea(ar);
}

NoBuildArea* BaseAreaAdapter::getNoBuildArea(float x, float y) {
	return ((BaseAreaImplementation*) impl)->getNoBuildArea(x, y);
}

ActiveArea* BaseAreaAdapter::getNoActiveArea(float x, float y) {
	return ((BaseAreaImplementation*) impl)->getNoActiveArea(x, y);
}

/*
 *	BaseAreaHelper
 */

BaseAreaHelper* BaseAreaHelper::staticInitializer = BaseAreaHelper::instance();

BaseAreaHelper::BaseAreaHelper() {
	className = "BaseArea";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void BaseAreaHelper::finalizeHelper() {
	BaseAreaHelper::finalize();
}

DistributedObject* BaseAreaHelper::instantiateObject() {
	return new BaseArea(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* BaseAreaHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new BaseAreaAdapter((BaseAreaImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	BaseAreaServant
 */

BaseAreaServant::BaseAreaServant(Coordinate* center, float width, float height) : AreaImplementation(center, width, height) {
	_classHelper = BaseAreaHelper::instance();
}

BaseAreaServant::BaseAreaServant(float minXPos, float maxXPos, float minYPos, float maxYPos) : AreaImplementation(minXPos, maxXPos, minYPos, maxYPos) {
	_classHelper = BaseAreaHelper::instance();
}

BaseAreaServant::~BaseAreaServant() {
}

void BaseAreaServant::_setStub(DistributedObjectStub* stub) {
	_this = (BaseArea*) stub;
	AreaServant::_setStub(stub);
}

DistributedObjectStub* BaseAreaServant::_getStub() {
	return _this;
}

