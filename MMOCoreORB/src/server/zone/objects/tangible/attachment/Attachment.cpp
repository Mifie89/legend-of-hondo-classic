/*
 *	server/zone/objects/tangible/attachment/Attachment.cpp generated by engine3 IDL compiler 0.55
 */

#include "Attachment.h"

#include "AttachmentImplementation.h"

#include "../TangibleObject.h"

#include "../../creature/CreatureObject.h"

#include "../../player/Player.h"

/*
 *	AttachmentStub
 */

Attachment::Attachment(unsigned long long objID, int attachmentType) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new AttachmentImplementation(objID, attachmentType);
	_impl->_setStub(this);
}

Attachment::Attachment(DummyConstructorParameter* param) : TangibleObject(param) {
}

Attachment::~Attachment() {
}

void Attachment::remove(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((AttachmentImplementation*) _impl)->remove(player);
}

void Attachment::setSkillMod0Type(int type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addSignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		((AttachmentImplementation*) _impl)->setSkillMod0Type(type);
}

void Attachment::setSkillMod1Type(int type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addSignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		((AttachmentImplementation*) _impl)->setSkillMod1Type(type);
}

void Attachment::setSkillMod2Type(int type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addSignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		((AttachmentImplementation*) _impl)->setSkillMod2Type(type);
}

void Attachment::setSkillMod0Value(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((AttachmentImplementation*) _impl)->setSkillMod0Value(value);
}

void Attachment::setSkillMod1Value(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((AttachmentImplementation*) _impl)->setSkillMod1Value(value);
}

void Attachment::setSkillMod2Value(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((AttachmentImplementation*) _impl)->setSkillMod2Value(value);
}

void Attachment::setSkillModValue(int index, int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addSignedIntParameter(index);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((AttachmentImplementation*) _impl)->setSkillModValue(index, value);
}

void Attachment::setSkillModType(int index, int type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addSignedIntParameter(index);
		method.addSignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		((AttachmentImplementation*) _impl)->setSkillModType(index, type);
}

void Attachment::setSkillMods(int modifier) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addSignedIntParameter(modifier);

		method.executeWithVoidReturn();
	} else
		((AttachmentImplementation*) _impl)->setSkillMods(modifier);
}

int Attachment::getSkillMod0Type() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithSignedIntReturn();
	} else
		return ((AttachmentImplementation*) _impl)->getSkillMod0Type();
}

int Attachment::getSkillMod1Type() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return method.executeWithSignedIntReturn();
	} else
		return ((AttachmentImplementation*) _impl)->getSkillMod1Type();
}

int Attachment::getSkillMod2Type() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithSignedIntReturn();
	} else
		return ((AttachmentImplementation*) _impl)->getSkillMod2Type();
}

int Attachment::getSkillMod0Value() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		return method.executeWithSignedIntReturn();
	} else
		return ((AttachmentImplementation*) _impl)->getSkillMod0Value();
}

int Attachment::getSkillMod1Value() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithSignedIntReturn();
	} else
		return ((AttachmentImplementation*) _impl)->getSkillMod1Value();
}

int Attachment::getSkillMod2Value() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithSignedIntReturn();
	} else
		return ((AttachmentImplementation*) _impl)->getSkillMod2Value();
}

int Attachment::getSkillModType(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addSignedIntParameter(index);

		return method.executeWithSignedIntReturn();
	} else
		return ((AttachmentImplementation*) _impl)->getSkillModType(index);
}

int Attachment::getSkillModValue(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addSignedIntParameter(index);

		return method.executeWithSignedIntReturn();
	} else
		return ((AttachmentImplementation*) _impl)->getSkillModValue(index);
}

int Attachment::getBestSkillMod() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		return method.executeWithSignedIntReturn();
	} else
		return ((AttachmentImplementation*) _impl)->getBestSkillMod();
}

/*
 *	AttachmentAdapter
 */

AttachmentAdapter::AttachmentAdapter(AttachmentImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* AttachmentAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		remove((Player*) inv->getObjectParameter());
		break;
	case 7:
		setSkillMod0Type(inv->getSignedIntParameter());
		break;
	case 8:
		setSkillMod1Type(inv->getSignedIntParameter());
		break;
	case 9:
		setSkillMod2Type(inv->getSignedIntParameter());
		break;
	case 10:
		setSkillMod0Value(inv->getSignedIntParameter());
		break;
	case 11:
		setSkillMod1Value(inv->getSignedIntParameter());
		break;
	case 12:
		setSkillMod2Value(inv->getSignedIntParameter());
		break;
	case 13:
		setSkillModValue(inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 14:
		setSkillModType(inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 15:
		setSkillMods(inv->getSignedIntParameter());
		break;
	case 16:
		resp->insertSignedInt(getSkillMod0Type());
		break;
	case 17:
		resp->insertSignedInt(getSkillMod1Type());
		break;
	case 18:
		resp->insertSignedInt(getSkillMod2Type());
		break;
	case 19:
		resp->insertSignedInt(getSkillMod0Value());
		break;
	case 20:
		resp->insertSignedInt(getSkillMod1Value());
		break;
	case 21:
		resp->insertSignedInt(getSkillMod2Value());
		break;
	case 22:
		resp->insertSignedInt(getSkillModType(inv->getSignedIntParameter()));
		break;
	case 23:
		resp->insertSignedInt(getSkillModValue(inv->getSignedIntParameter()));
		break;
	case 24:
		resp->insertSignedInt(getBestSkillMod());
		break;
	default:
		return NULL;
	}

	return resp;
}

void AttachmentAdapter::remove(Player* player) {
	return ((AttachmentImplementation*) impl)->remove(player);
}

void AttachmentAdapter::setSkillMod0Type(int type) {
	return ((AttachmentImplementation*) impl)->setSkillMod0Type(type);
}

void AttachmentAdapter::setSkillMod1Type(int type) {
	return ((AttachmentImplementation*) impl)->setSkillMod1Type(type);
}

void AttachmentAdapter::setSkillMod2Type(int type) {
	return ((AttachmentImplementation*) impl)->setSkillMod2Type(type);
}

void AttachmentAdapter::setSkillMod0Value(int value) {
	return ((AttachmentImplementation*) impl)->setSkillMod0Value(value);
}

void AttachmentAdapter::setSkillMod1Value(int value) {
	return ((AttachmentImplementation*) impl)->setSkillMod1Value(value);
}

void AttachmentAdapter::setSkillMod2Value(int value) {
	return ((AttachmentImplementation*) impl)->setSkillMod2Value(value);
}

void AttachmentAdapter::setSkillModValue(int index, int value) {
	return ((AttachmentImplementation*) impl)->setSkillModValue(index, value);
}

void AttachmentAdapter::setSkillModType(int index, int type) {
	return ((AttachmentImplementation*) impl)->setSkillModType(index, type);
}

void AttachmentAdapter::setSkillMods(int modifier) {
	return ((AttachmentImplementation*) impl)->setSkillMods(modifier);
}

int AttachmentAdapter::getSkillMod0Type() {
	return ((AttachmentImplementation*) impl)->getSkillMod0Type();
}

int AttachmentAdapter::getSkillMod1Type() {
	return ((AttachmentImplementation*) impl)->getSkillMod1Type();
}

int AttachmentAdapter::getSkillMod2Type() {
	return ((AttachmentImplementation*) impl)->getSkillMod2Type();
}

int AttachmentAdapter::getSkillMod0Value() {
	return ((AttachmentImplementation*) impl)->getSkillMod0Value();
}

int AttachmentAdapter::getSkillMod1Value() {
	return ((AttachmentImplementation*) impl)->getSkillMod1Value();
}

int AttachmentAdapter::getSkillMod2Value() {
	return ((AttachmentImplementation*) impl)->getSkillMod2Value();
}

int AttachmentAdapter::getSkillModType(int index) {
	return ((AttachmentImplementation*) impl)->getSkillModType(index);
}

int AttachmentAdapter::getSkillModValue(int index) {
	return ((AttachmentImplementation*) impl)->getSkillModValue(index);
}

int AttachmentAdapter::getBestSkillMod() {
	return ((AttachmentImplementation*) impl)->getBestSkillMod();
}

/*
 *	AttachmentHelper
 */

AttachmentHelper* AttachmentHelper::staticInitializer = AttachmentHelper::instance();

AttachmentHelper::AttachmentHelper() {
	className = "Attachment";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void AttachmentHelper::finalizeHelper() {
	AttachmentHelper::finalize();
}

DistributedObject* AttachmentHelper::instantiateObject() {
	return new Attachment(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* AttachmentHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new AttachmentAdapter((AttachmentImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	AttachmentServant
 */

AttachmentServant::AttachmentServant(unsigned long long objID, int attachmentType) : TangibleObjectImplementation(objID, attachmentType) {
	_classHelper = AttachmentHelper::instance();
}

AttachmentServant::~AttachmentServant() {
}

void AttachmentServant::_setStub(DistributedObjectStub* stub) {
	_this = (Attachment*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* AttachmentServant::_getStub() {
	return _this;
}

