/*
 *	server/zone/objects/tangible/deed/factorydeed/FactoryDeed.cpp generated by engine3 IDL compiler 0.55
 */

#include "FactoryDeed.h"

#include "FactoryDeedImplementation.h"

#include "../DeedObject.h"

#include "../../TangibleObject.h"

#include "../../../../packets.h"

#include "../../../player/Player.h"

#include "../../../creature/CreatureObject.h"

/*
 *	FactoryDeedStub
 */

FactoryDeed::FactoryDeed(CreatureObject* creature, int tempCRC, const unicode& n, const string& tempn) : DeedObject(DummyConstructorParameter::instance()) {
	_impl = new FactoryDeedImplementation(creature, tempCRC, n, tempn);
	_impl->_setStub(this);
}

FactoryDeed::FactoryDeed(unsigned long long oid, int tempCRC, const unicode& n, const string& tempn) : DeedObject(DummyConstructorParameter::instance()) {
	_impl = new FactoryDeedImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

FactoryDeed::FactoryDeed(DummyConstructorParameter* param) : DeedObject(param) {
}

FactoryDeed::~FactoryDeed() {
}

/*
 *	FactoryDeedAdapter
 */

FactoryDeedAdapter::FactoryDeedAdapter(FactoryDeedImplementation* obj) : DeedObjectAdapter(obj) {
}

Packet* FactoryDeedAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	FactoryDeedHelper
 */

FactoryDeedHelper* FactoryDeedHelper::staticInitializer = FactoryDeedHelper::instance();

FactoryDeedHelper::FactoryDeedHelper() {
	className = "FactoryDeed";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void FactoryDeedHelper::finalizeHelper() {
	FactoryDeedHelper::finalize();
}

DistributedObject* FactoryDeedHelper::instantiateObject() {
	return new FactoryDeed(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* FactoryDeedHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FactoryDeedAdapter((FactoryDeedImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	FactoryDeedServant
 */

FactoryDeedServant::FactoryDeedServant(CreatureObject* creature, int tempCRC, const unicode& n, const string& tempn, int tp) : DeedObjectImplementation(creature, tempCRC, n, tempn, tp) {
	_classHelper = FactoryDeedHelper::instance();
}

FactoryDeedServant::FactoryDeedServant(unsigned long long oid, int tempCRC, const unicode& n, const string& tempn, int tp) : DeedObjectImplementation(oid, tempCRC, n, tempn, tp) {
	_classHelper = FactoryDeedHelper::instance();
}

FactoryDeedServant::~FactoryDeedServant() {
}

void FactoryDeedServant::_setStub(DistributedObjectStub* stub) {
	_this = (FactoryDeed*) stub;
	DeedObjectServant::_setStub(stub);
}

DistributedObjectStub* FactoryDeedServant::_getStub() {
	return _this;
}

