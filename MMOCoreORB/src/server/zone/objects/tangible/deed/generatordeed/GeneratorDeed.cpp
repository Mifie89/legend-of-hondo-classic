/*
 *	server/zone/objects/tangible/deed/generatordeed/GeneratorDeed.cpp generated by engine3 IDL compiler 0.55
 */

#include "GeneratorDeed.h"

#include "GeneratorDeedImplementation.h"

#include "../DeedObject.h"

#include "../../TangibleObject.h"

#include "../../../../packets.h"

#include "../../../player/Player.h"

#include "../../../creature/CreatureObject.h"

/*
 *	GeneratorDeedStub
 */

GeneratorDeed::GeneratorDeed(CreatureObject* creature, int tempCRC, const unicode& n, const string& tempn) : DeedObject(DummyConstructorParameter::instance()) {
	_impl = new GeneratorDeedImplementation(creature, tempCRC, n, tempn);
	_impl->_setStub(this);
}

GeneratorDeed::GeneratorDeed(unsigned long long oid, int tempCRC, const unicode& n, const string& tempn) : DeedObject(DummyConstructorParameter::instance()) {
	_impl = new GeneratorDeedImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

GeneratorDeed::GeneratorDeed(DummyConstructorParameter* param) : DeedObject(param) {
}

GeneratorDeed::~GeneratorDeed() {
}

/*
 *	GeneratorDeedAdapter
 */

GeneratorDeedAdapter::GeneratorDeedAdapter(GeneratorDeedImplementation* obj) : DeedObjectAdapter(obj) {
}

Packet* GeneratorDeedAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	GeneratorDeedHelper
 */

GeneratorDeedHelper* GeneratorDeedHelper::staticInitializer = GeneratorDeedHelper::instance();

GeneratorDeedHelper::GeneratorDeedHelper() {
	className = "GeneratorDeed";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void GeneratorDeedHelper::finalizeHelper() {
	GeneratorDeedHelper::finalize();
}

DistributedObject* GeneratorDeedHelper::instantiateObject() {
	return new GeneratorDeed(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* GeneratorDeedHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GeneratorDeedAdapter((GeneratorDeedImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	GeneratorDeedServant
 */

GeneratorDeedServant::GeneratorDeedServant(CreatureObject* creature, int tempCRC, const unicode& n, const string& tempn, int tp) : DeedObjectImplementation(creature, tempCRC, n, tempn, tp) {
	_classHelper = GeneratorDeedHelper::instance();
}

GeneratorDeedServant::GeneratorDeedServant(unsigned long long oid, int tempCRC, const unicode& n, const string& tempn, int tp) : DeedObjectImplementation(oid, tempCRC, n, tempn, tp) {
	_classHelper = GeneratorDeedHelper::instance();
}

GeneratorDeedServant::~GeneratorDeedServant() {
}

void GeneratorDeedServant::_setStub(DistributedObjectStub* stub) {
	_this = (GeneratorDeed*) stub;
	DeedObjectServant::_setStub(stub);
}

DistributedObjectStub* GeneratorDeedServant::_getStub() {
	return _this;
}

