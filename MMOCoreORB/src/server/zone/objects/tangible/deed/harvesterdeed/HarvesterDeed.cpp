/*
 *	server/zone/objects/tangible/deed/harvesterdeed/HarvesterDeed.cpp generated by engine3 IDL compiler 0.55
 */

#include "HarvesterDeed.h"

#include "HarvesterDeedImplementation.h"

#include "../DeedObject.h"

#include "../../TangibleObject.h"

#include "../../../../packets.h"

#include "../../../player/Player.h"

#include "../../../creature/CreatureObject.h"

/*
 *	HarvesterDeedStub
 */

HarvesterDeed::HarvesterDeed(CreatureObject* creature, int tempCRC, const unicode& n, const string& tempn) : DeedObject(DummyConstructorParameter::instance()) {
	_impl = new HarvesterDeedImplementation(creature, tempCRC, n, tempn);
	_impl->_setStub(this);
}

HarvesterDeed::HarvesterDeed(unsigned long long oid, int tempCRC, const unicode& n, const string& tempn) : DeedObject(DummyConstructorParameter::instance()) {
	_impl = new HarvesterDeedImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

HarvesterDeed::HarvesterDeed(DummyConstructorParameter* param) : DeedObject(param) {
}

HarvesterDeed::~HarvesterDeed() {
}

/*
 *	HarvesterDeedAdapter
 */

HarvesterDeedAdapter::HarvesterDeedAdapter(HarvesterDeedImplementation* obj) : DeedObjectAdapter(obj) {
}

Packet* HarvesterDeedAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	HarvesterDeedHelper
 */

HarvesterDeedHelper* HarvesterDeedHelper::staticInitializer = HarvesterDeedHelper::instance();

HarvesterDeedHelper::HarvesterDeedHelper() {
	className = "HarvesterDeed";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void HarvesterDeedHelper::finalizeHelper() {
	HarvesterDeedHelper::finalize();
}

DistributedObject* HarvesterDeedHelper::instantiateObject() {
	return new HarvesterDeed(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* HarvesterDeedHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new HarvesterDeedAdapter((HarvesterDeedImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	HarvesterDeedServant
 */

HarvesterDeedServant::HarvesterDeedServant(CreatureObject* creature, int tempCRC, const unicode& n, const string& tempn, int tp) : DeedObjectImplementation(creature, tempCRC, n, tempn, tp) {
	_classHelper = HarvesterDeedHelper::instance();
}

HarvesterDeedServant::HarvesterDeedServant(unsigned long long oid, int tempCRC, const unicode& n, const string& tempn, int tp) : DeedObjectImplementation(oid, tempCRC, n, tempn, tp) {
	_classHelper = HarvesterDeedHelper::instance();
}

HarvesterDeedServant::~HarvesterDeedServant() {
}

void HarvesterDeedServant::_setStub(DistributedObjectStub* stub) {
	_this = (HarvesterDeed*) stub;
	DeedObjectServant::_setStub(stub);
}

DistributedObjectStub* HarvesterDeedServant::_getStub() {
	return _this;
}

