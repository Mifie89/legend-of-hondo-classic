/*
 *	server/zone/objects/tangible/weapons/JediWeapon.cpp generated by engine3 IDL compiler 0.55
 */

#include "JediWeapon.h"

#include "JediWeaponImplementation.h"

#include "../../creature/CreatureObject.h"

#include "Weapon.h"

/*
 *	JediWeaponStub
 */

JediWeapon::JediWeapon(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int tp, bool eqp) : Weapon(DummyConstructorParameter::instance()) {
	_impl = new JediWeaponImplementation(oid, tempCRC, n, tempn, tp, eqp);
	_impl->_setStub(this);
}

JediWeapon::JediWeapon(CreatureObject* creature, const String& temp, const UnicodeString& n, const String& tempn, int tp, bool eqp) : Weapon(DummyConstructorParameter::instance()) {
	_impl = new JediWeaponImplementation(creature, temp, n, tempn, tp, eqp);
	_impl->_setStub(this);
}

JediWeapon::JediWeapon(DummyConstructorParameter* param) : Weapon(param) {
}

JediWeapon::~JediWeapon() {
}

int JediWeapon::getForceCost() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithSignedIntReturn();
	} else
		return ((JediWeaponImplementation*) _impl)->getForceCost();
}

void JediWeapon::setForceCost(int fcost) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addSignedIntParameter(fcost);

		method.executeWithVoidReturn();
	} else
		((JediWeaponImplementation*) _impl)->setForceCost(fcost);
}

/*
 *	JediWeaponAdapter
 */

JediWeaponAdapter::JediWeaponAdapter(JediWeaponImplementation* obj) : WeaponAdapter(obj) {
}

Packet* JediWeaponAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(getForceCost());
		break;
	case 7:
		setForceCost(inv->getSignedIntParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

int JediWeaponAdapter::getForceCost() {
	return ((JediWeaponImplementation*) impl)->getForceCost();
}

void JediWeaponAdapter::setForceCost(int fcost) {
	return ((JediWeaponImplementation*) impl)->setForceCost(fcost);
}

/*
 *	JediWeaponHelper
 */

JediWeaponHelper* JediWeaponHelper::staticInitializer = JediWeaponHelper::instance();

JediWeaponHelper::JediWeaponHelper() {
	className = "JediWeapon";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void JediWeaponHelper::finalizeHelper() {
	JediWeaponHelper::finalize();
}

DistributedObject* JediWeaponHelper::instantiateObject() {
	return new JediWeapon(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* JediWeaponHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new JediWeaponAdapter((JediWeaponImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	JediWeaponServant
 */

JediWeaponServant::JediWeaponServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, bool eqp, int tp, int cat) : WeaponImplementation(oid, tempCRC, n, tempn, eqp, tp, cat) {
	_classHelper = JediWeaponHelper::instance();
}

JediWeaponServant::JediWeaponServant(CreatureObject* creature, const String& temp, const UnicodeString& n, const String& tempn, bool eqp, int tp, int cat) : WeaponImplementation(creature, temp, n, tempn, eqp, tp, cat) {
	_classHelper = JediWeaponHelper::instance();
}

JediWeaponServant::~JediWeaponServant() {
}

void JediWeaponServant::_setStub(DistributedObjectStub* stub) {
	_this = (JediWeapon*) stub;
	WeaponServant::_setStub(stub);
}

DistributedObjectStub* JediWeaponServant::_getStub() {
	return _this;
}

