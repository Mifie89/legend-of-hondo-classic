/*
 *	server/zone/objects/tangible/pharmaceutical/CureAreaPack.cpp generated by engine3 IDL compiler 0.55
 */

#include "CureAreaPack.h"

#include "CureAreaPackImplementation.h"

#include "../../scene/SceneObject.h"

#include "../../creature/CreatureObject.h"

#include "../../player/Player.h"

#include "../TangibleObject.h"

#include "Pharmaceutical.h"

/*
 *	CureAreaPackStub
 */

CureAreaPack::CureAreaPack(unsigned long long oid, unsigned int tempCRC, const unicode& n, const string& tempn) : Pharmaceutical(DummyConstructorParameter::instance()) {
	_impl = new CureAreaPackImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

CureAreaPack::CureAreaPack(CreatureObject* creature, unsigned int tempCRC, const unicode& n, const string& tempn) : Pharmaceutical(DummyConstructorParameter::instance()) {
	_impl = new CureAreaPackImplementation(creature, tempCRC, n, tempn);
	_impl->_setStub(this);
}

CureAreaPack::CureAreaPack(DummyConstructorParameter* param) : Pharmaceutical(param) {
}

CureAreaPack::~CureAreaPack() {
}

void CureAreaPack::generateAttributes(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((CureAreaPackImplementation*) _impl)->generateAttributes(obj);
}

void CureAreaPack::setEffectiveness(float eff) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addFloatParameter(eff);

		method.executeWithVoidReturn();
	} else
		((CureAreaPackImplementation*) _impl)->setEffectiveness(eff);
}

void CureAreaPack::setAreaOfEffect(float area) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addFloatParameter(area);

		method.executeWithVoidReturn();
	} else
		((CureAreaPackImplementation*) _impl)->setAreaOfEffect(area);
}

void CureAreaPack::setState(unsigned long long condition) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addUnsignedLongParameter(condition);

		method.executeWithVoidReturn();
	} else
		((CureAreaPackImplementation*) _impl)->setState(condition);
}

float CureAreaPack::getEffectiveness() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithFloatReturn();
	} else
		return ((CureAreaPackImplementation*) _impl)->getEffectiveness();
}

unsigned long long CureAreaPack::getState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CureAreaPackImplementation*) _impl)->getState();
}

/*
 *	CureAreaPackAdapter
 */

CureAreaPackAdapter::CureAreaPackAdapter(CureAreaPackImplementation* obj) : PharmaceuticalAdapter(obj) {
}

Packet* CureAreaPackAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		generateAttributes((SceneObject*) inv->getObjectParameter());
		break;
	case 7:
		setEffectiveness(inv->getFloatParameter());
		break;
	case 8:
		setAreaOfEffect(inv->getFloatParameter());
		break;
	case 9:
		setState(inv->getUnsignedLongParameter());
		break;
	case 10:
		resp->insertFloat(getEffectiveness());
		break;
	case 11:
		resp->insertLong(getState());
		break;
	default:
		return NULL;
	}

	return resp;
}

void CureAreaPackAdapter::generateAttributes(SceneObject* obj) {
	return ((CureAreaPackImplementation*) impl)->generateAttributes(obj);
}

void CureAreaPackAdapter::setEffectiveness(float eff) {
	return ((CureAreaPackImplementation*) impl)->setEffectiveness(eff);
}

void CureAreaPackAdapter::setAreaOfEffect(float area) {
	return ((CureAreaPackImplementation*) impl)->setAreaOfEffect(area);
}

void CureAreaPackAdapter::setState(unsigned long long condition) {
	return ((CureAreaPackImplementation*) impl)->setState(condition);
}

float CureAreaPackAdapter::getEffectiveness() {
	return ((CureAreaPackImplementation*) impl)->getEffectiveness();
}

unsigned long long CureAreaPackAdapter::getState() {
	return ((CureAreaPackImplementation*) impl)->getState();
}

/*
 *	CureAreaPackHelper
 */

CureAreaPackHelper* CureAreaPackHelper::staticInitializer = CureAreaPackHelper::instance();

CureAreaPackHelper::CureAreaPackHelper() {
	className = "CureAreaPack";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CureAreaPackHelper::finalizeHelper() {
	CureAreaPackHelper::finalize();
}

DistributedObject* CureAreaPackHelper::instantiateObject() {
	return new CureAreaPack(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CureAreaPackHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CureAreaPackAdapter((CureAreaPackImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	CureAreaPackServant
 */

CureAreaPackServant::CureAreaPackServant(unsigned long long oid, unsigned int tempCRC, const unicode& n, const string& tempn, int mptype) : PharmaceuticalImplementation(oid, tempCRC, n, tempn, mptype) {
	_classHelper = CureAreaPackHelper::instance();
}

CureAreaPackServant::CureAreaPackServant(CreatureObject* creature, unsigned int tempCRC, const unicode& n, const string& tempn, int mptype) : PharmaceuticalImplementation(creature, tempCRC, n, tempn, mptype) {
	_classHelper = CureAreaPackHelper::instance();
}

CureAreaPackServant::~CureAreaPackServant() {
}

void CureAreaPackServant::_setStub(DistributedObjectStub* stub) {
	_this = (CureAreaPack*) stub;
	PharmaceuticalServant::_setStub(stub);
}

DistributedObjectStub* CureAreaPackServant::_getStub() {
	return _this;
}

