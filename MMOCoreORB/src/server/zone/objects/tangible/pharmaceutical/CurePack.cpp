/*
 *	server/zone/objects/tangible/pharmaceutical/CurePack.cpp generated by engine3 IDL compiler 0.55
 */

#include "CurePack.h"

#include "CurePackImplementation.h"

#include "../../scene/SceneObject.h"

#include "../../creature/CreatureObject.h"

#include "../../player/Player.h"

#include "../TangibleObject.h"

#include "Pharmaceutical.h"

/*
 *	CurePackStub
 */

CurePack::CurePack(unsigned long long oid, unsigned int tempCRC, const unicode& n, const string& tempn) : Pharmaceutical(DummyConstructorParameter::instance()) {
	_impl = new CurePackImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

CurePack::CurePack(CreatureObject* creature, unsigned int tempCRC, const unicode& n, const string& tempn) : Pharmaceutical(DummyConstructorParameter::instance()) {
	_impl = new CurePackImplementation(creature, tempCRC, n, tempn);
	_impl->_setStub(this);
}

CurePack::CurePack(DummyConstructorParameter* param) : Pharmaceutical(param) {
}

CurePack::~CurePack() {
}

void CurePack::generateAttributes(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((CurePackImplementation*) _impl)->generateAttributes(obj);
}

void CurePack::setEffectiveness(float eff) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addFloatParameter(eff);

		method.executeWithVoidReturn();
	} else
		((CurePackImplementation*) _impl)->setEffectiveness(eff);
}

void CurePack::setConditionCured(int condition) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addSignedIntParameter(condition);

		method.executeWithVoidReturn();
	} else
		((CurePackImplementation*) _impl)->setConditionCured(condition);
}

float CurePack::getEffectiveness() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithFloatReturn();
	} else
		return ((CurePackImplementation*) _impl)->getEffectiveness();
}

int CurePack::getConditionCured() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithSignedIntReturn();
	} else
		return ((CurePackImplementation*) _impl)->getConditionCured();
}

/*
 *	CurePackAdapter
 */

CurePackAdapter::CurePackAdapter(CurePackImplementation* obj) : PharmaceuticalAdapter(obj) {
}

Packet* CurePackAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		generateAttributes((SceneObject*) inv->getObjectParameter());
		break;
	case 7:
		setEffectiveness(inv->getFloatParameter());
		break;
	case 8:
		setConditionCured(inv->getSignedIntParameter());
		break;
	case 9:
		resp->insertFloat(getEffectiveness());
		break;
	case 10:
		resp->insertSignedInt(getConditionCured());
		break;
	default:
		return NULL;
	}

	return resp;
}

void CurePackAdapter::generateAttributes(SceneObject* obj) {
	return ((CurePackImplementation*) impl)->generateAttributes(obj);
}

void CurePackAdapter::setEffectiveness(float eff) {
	return ((CurePackImplementation*) impl)->setEffectiveness(eff);
}

void CurePackAdapter::setConditionCured(int condition) {
	return ((CurePackImplementation*) impl)->setConditionCured(condition);
}

float CurePackAdapter::getEffectiveness() {
	return ((CurePackImplementation*) impl)->getEffectiveness();
}

int CurePackAdapter::getConditionCured() {
	return ((CurePackImplementation*) impl)->getConditionCured();
}

/*
 *	CurePackHelper
 */

CurePackHelper* CurePackHelper::staticInitializer = CurePackHelper::instance();

CurePackHelper::CurePackHelper() {
	className = "CurePack";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CurePackHelper::finalizeHelper() {
	CurePackHelper::finalize();
}

DistributedObject* CurePackHelper::instantiateObject() {
	return new CurePack(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CurePackHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CurePackAdapter((CurePackImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	CurePackServant
 */

CurePackServant::CurePackServant(unsigned long long oid, unsigned int tempCRC, const unicode& n, const string& tempn, int mptype) : PharmaceuticalImplementation(oid, tempCRC, n, tempn, mptype) {
	_classHelper = CurePackHelper::instance();
}

CurePackServant::CurePackServant(CreatureObject* creature, unsigned int tempCRC, const unicode& n, const string& tempn, int mptype) : PharmaceuticalImplementation(creature, tempCRC, n, tempn, mptype) {
	_classHelper = CurePackHelper::instance();
}

CurePackServant::~CurePackServant() {
}

void CurePackServant::_setStub(DistributedObjectStub* stub) {
	_this = (CurePack*) stub;
	PharmaceuticalServant::_setStub(stub);
}

DistributedObjectStub* CurePackServant::_getStub() {
	return _this;
}

