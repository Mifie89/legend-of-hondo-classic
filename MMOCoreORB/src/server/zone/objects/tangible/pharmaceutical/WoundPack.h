/*
 *	server/zone/objects/tangible/pharmaceutical/WoundPack.h generated by engine3 IDL compiler 0.55
 */

#ifndef WOUNDPACK_H_
#define WOUNDPACK_H_

#include "engine/orb/DistributedObjectBroker.h"

class SceneObject;

class CreatureObject;

class Player;

class TangibleObject;

class Pharmaceutical;

#include "Pharmaceutical.h"

class WoundPack : public Pharmaceutical {
public:
	WoundPack(unsigned long long oid, unsigned int tempCRC, const unicode& n, const string& tempn);

	WoundPack(CreatureObject* creature, unsigned int tempCRC, const unicode& n, const string& tempn);

	void generateAttributes(SceneObject* obj);

	int calculatePower(CreatureObject* creature);

	void setEffectiveness(float eff);

	void setPoolAffected(int pool);

	float getEffectiveness();

	int getPoolAffected();

protected:
	WoundPack(DummyConstructorParameter* param);

	virtual ~WoundPack();

	friend class WoundPackHelper;
};

class WoundPackImplementation;

class WoundPackAdapter : public PharmaceuticalAdapter {
public:
	WoundPackAdapter(WoundPackImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void generateAttributes(SceneObject* obj);

	int calculatePower(CreatureObject* creature);

	void setEffectiveness(float eff);

	void setPoolAffected(int pool);

	float getEffectiveness();

	int getPoolAffected();

};

class WoundPackHelper : public DistributedObjectClassHelper, public Singleton<WoundPackHelper> {
	static WoundPackHelper* staticInitializer;

public:
	WoundPackHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<WoundPackHelper>;
};

#include "PharmaceuticalImplementation.h"

class WoundPackServant : public PharmaceuticalImplementation {
public:
	WoundPack* _this;

public:
	WoundPackServant(unsigned long long oid, unsigned int tempCRC, const unicode& n, const string& tempn, int mptype);
	WoundPackServant(CreatureObject* creature, unsigned int tempCRC, const unicode& n, const string& tempn, int mptype);
	virtual ~WoundPackServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*WOUNDPACK_H_*/
