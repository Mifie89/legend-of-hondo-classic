/*
 *	server/zone/objects/tangible/Container.cpp generated by engine3 IDL compiler 0.55
 */

#include "Container.h"

#include "ContainerImplementation.h"

#include "../scene/SceneObject.h"

#include "../player/Player.h"

#include "TangibleObject.h"

/*
 *	ContainerStub
 */

Container::Container(unsigned long long oid) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new ContainerImplementation(oid);
	_impl->_setStub(this);
}

Container::Container(DummyConstructorParameter* param) : TangibleObject(param) {
}

Container::~Container() {
}

void Container::addObject(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((ContainerImplementation*) _impl)->addObject(obj);
}

SceneObject* Container::getObject(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addSignedIntParameter(index);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((ContainerImplementation*) _impl)->getObject(index);
}

SceneObject* Container::getObject(unsigned long long oid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addUnsignedLongParameter(oid);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((ContainerImplementation*) _impl)->getObject(oid);
}

void Container::removeObject(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addSignedIntParameter(index);

		method.executeWithVoidReturn();
	} else
		((ContainerImplementation*) _impl)->removeObject(index);
}

void Container::removeObject(unsigned long long oid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addUnsignedLongParameter(oid);

		method.executeWithVoidReturn();
	} else
		((ContainerImplementation*) _impl)->removeObject(oid);
}

int Container::objectsSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithSignedIntReturn();
	} else
		return ((ContainerImplementation*) _impl)->objectsSize();
}

void Container::openTo(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((ContainerImplementation*) _impl)->openTo(player);
}

bool Container::isEmpty() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return method.executeWithBooleanReturn();
	} else
		return ((ContainerImplementation*) _impl)->isEmpty();
}

/*
 *	ContainerAdapter
 */

ContainerAdapter::ContainerAdapter(ContainerImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* ContainerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		addObject((SceneObject*) inv->getObjectParameter());
		break;
	case 7:
		resp->insertLong(getObject(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 8:
		resp->insertLong(getObject(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 9:
		removeObject(inv->getSignedIntParameter());
		break;
	case 10:
		removeObject(inv->getUnsignedLongParameter());
		break;
	case 11:
		resp->insertSignedInt(objectsSize());
		break;
	case 12:
		openTo((Player*) inv->getObjectParameter());
		break;
	case 13:
		resp->insertBoolean(isEmpty());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ContainerAdapter::addObject(SceneObject* obj) {
	return ((ContainerImplementation*) impl)->addObject(obj);
}

SceneObject* ContainerAdapter::getObject(int index) {
	return ((ContainerImplementation*) impl)->getObject(index);
}

SceneObject* ContainerAdapter::getObject(unsigned long long oid) {
	return ((ContainerImplementation*) impl)->getObject(oid);
}

void ContainerAdapter::removeObject(int index) {
	return ((ContainerImplementation*) impl)->removeObject(index);
}

void ContainerAdapter::removeObject(unsigned long long oid) {
	return ((ContainerImplementation*) impl)->removeObject(oid);
}

int ContainerAdapter::objectsSize() {
	return ((ContainerImplementation*) impl)->objectsSize();
}

void ContainerAdapter::openTo(Player* player) {
	return ((ContainerImplementation*) impl)->openTo(player);
}

bool ContainerAdapter::isEmpty() {
	return ((ContainerImplementation*) impl)->isEmpty();
}

/*
 *	ContainerHelper
 */

ContainerHelper* ContainerHelper::staticInitializer = ContainerHelper::instance();

ContainerHelper::ContainerHelper() {
	className = "Container";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ContainerHelper::finalizeHelper() {
	ContainerHelper::finalize();
}

DistributedObject* ContainerHelper::instantiateObject() {
	return new Container(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ContainerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ContainerAdapter((ContainerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ContainerServant
 */

ContainerServant::ContainerServant(unsigned long long oid) : TangibleObjectImplementation(oid) {
	_classHelper = ContainerHelper::instance();
}

ContainerServant::~ContainerServant() {
}

void ContainerServant::_setStub(DistributedObjectStub* stub) {
	_this = (Container*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* ContainerServant::_getStub() {
	return _this;
}

