/*
 *	server/zone/objects/tangible/crafting/component/Component.h generated by engine3 IDL compiler 0.55
 */

#ifndef COMPONENT_H_
#define COMPONENT_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/service/Message.h"

class Player;

class Component;

class CreatureObject;

class TangibleObject;

class DraftSchematic;

#include "../../TangibleObject.h"

class Component : public TangibleObject {
public:
	Component(unsigned long long oid, unsigned int tempCRC, const unicode& n, const string& tempn);

	Component(CreatureObject* creature, unsigned int tempCRC, const unicode& n, const string& tempn);

	void sendTo(Player* player, bool doClose = true);

	void generateAttributes(Player* player);

	void updateCraftingValues(DraftSchematic* draftSchematic);

	int useObject(Player* player);

	Component* cloneComponent(Component* component, unsigned long long oid);

	float getAttributeValue(string& attributeName);

protected:
	Component(DummyConstructorParameter* param);

	virtual ~Component();

	friend class ComponentHelper;
};

class ComponentImplementation;

class ComponentAdapter : public TangibleObjectAdapter {
public:
	ComponentAdapter(ComponentImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void sendTo(Player* player, bool doClose);

	void generateAttributes(Player* player);

	void updateCraftingValues(DraftSchematic* draftSchematic);

	int useObject(Player* player);

	Component* cloneComponent(Component* component, unsigned long long oid);

	float getAttributeValue(string& attributeName);

protected:
	string _param0_getAttributeValue__string_;
};

class ComponentHelper : public DistributedObjectClassHelper, public Singleton<ComponentHelper> {
	static ComponentHelper* staticInitializer;

public:
	ComponentHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<ComponentHelper>;
};

#include "../../TangibleObjectImplementation.h"

class ComponentServant : public TangibleObjectImplementation {
public:
	Component* _this;

public:
	ComponentServant(unsigned long long oid, unsigned int tempCRC, const unicode& n, const string& tempn, int tp);
	ComponentServant(CreatureObject* creature, unsigned int tempCRC, const unicode& n, const string& tempn, int tp);
	virtual ~ComponentServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*COMPONENT_H_*/
