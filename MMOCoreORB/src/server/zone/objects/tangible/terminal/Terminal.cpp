/*
 *	server/zone/objects/tangible/terminal/Terminal.cpp generated by engine3 IDL compiler 0.55
 */

#include "Terminal.h"

#include "TerminalImplementation.h"

#include "../../player/Player.h"

#include "../TangibleObject.h"

/*
 *	TerminalStub
 */

Terminal::Terminal(unsigned int objCRC, unsigned long long oid, const UnicodeString& n, const String& tempn, float x, float z, float y, int TerminalType) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new TerminalImplementation(objCRC, oid, n, tempn, x, z, y, TerminalType);
	_impl->_setStub(this);
}

Terminal::Terminal(DummyConstructorParameter* param) : TangibleObject(param) {
}

Terminal::~Terminal() {
}

int Terminal::useObject(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((TerminalImplementation*) _impl)->useObject(player);
}

int Terminal::getTerminalType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithSignedIntReturn();
	} else
		return ((TerminalImplementation*) _impl)->getTerminalType();
}

/*
 *	TerminalAdapter
 */

TerminalAdapter::TerminalAdapter(TerminalImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* TerminalAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(useObject((Player*) inv->getObjectParameter()));
		break;
	case 7:
		resp->insertSignedInt(getTerminalType());
		break;
	default:
		return NULL;
	}

	return resp;
}

int TerminalAdapter::useObject(Player* player) {
	return ((TerminalImplementation*) impl)->useObject(player);
}

int TerminalAdapter::getTerminalType() {
	return ((TerminalImplementation*) impl)->getTerminalType();
}

/*
 *	TerminalHelper
 */

TerminalHelper* TerminalHelper::staticInitializer = TerminalHelper::instance();

TerminalHelper::TerminalHelper() {
	className = "Terminal";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void TerminalHelper::finalizeHelper() {
	TerminalHelper::finalize();
}

DistributedObject* TerminalHelper::instantiateObject() {
	return new Terminal(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* TerminalHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TerminalAdapter((TerminalImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	TerminalServant
 */

TerminalServant::TerminalServant(unsigned long long oid, int tp) : TangibleObjectImplementation(oid, tp) {
	_classHelper = TerminalHelper::instance();
}

TerminalServant::~TerminalServant() {
}

void TerminalServant::_setStub(DistributedObjectStub* stub) {
	_this = (Terminal*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* TerminalServant::_getStub() {
	return _this;
}

