/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

include "engine/core/ManagedObject";

import "../scene/SceneObject";

import "../player/Player";
import "DraftSchematicIngredient";
import "DraftSchematicAttribute";
import "DraftSchematicValues";
import "DraftSchematicExpPropGroup";
import "../../packets/object/ObjectControllerMessage";

interface DraftSchematic implements ManagedObject {

	DraftSchematic(unsigned int schematicID, const string objName, const string stringName, 
			unsigned int objCRC, const string groupName, unsigned int complexity, 
			unsigned int schematicSize, int craftingToolTab);

	DraftSchematic(DraftSchematic draftSchematic);

	DraftSchematic dsClone(DraftSchematic draftSchematic);

	void destroy(Player player);

	void sendTo(Player player);


	
	void addExperimentalProperty(unsigned int groupNumber,  
		const string experimentalProperty, unsigned int weight);
	
	void sendExperimentalPropertiesToPlayer(Player player);

	void increaseComplexity();

	void increaseExpCounter();

	// Ingredient Methods

	void sendIngredientsToPlayer(Player player);

	void helperSendIngredientsToPlayer(ObjectControllerMessage objMsg);

	void addIngredient(const string ingredientTemplateName, const string ingredientTitleName,
		boolean optional, const string resourceType, unsigned int resourceQuantity, 
		unsigned int combineType);

	DraftSchematicIngredient getIngredient(int index);

	int getIngredientListSize();

	int getRequiredIngredientCount();
	
	// setters
	void setPersistent(boolean status);

	void setObjectID(unsigned long objID);

	void setTanoAttributes(string attributes);

	void setContainer(SceneObject container);

	void setXpType(string type);

	void setXp(int x);

	void setExpCounter();

	void setExpPoints(int points);

	void setExpFailure(float rate);

	void setExperimentingSkill(const string exp);

	void setAssemblySkill(const string ass);

	void setFinished();

	//getters

	int getAttributesToSetListSize();

	DraftSchematicAttribute getAttributeToSet(const int i);

	DraftSchematicAttribute getAttributeToSet(const string name);

	void addAttributeToSet(const string attribute, const float minVal, const float maxVal, 
		const string attributeExpProp, const int precision);
	
	int getExpPropGroupListSize();

	DraftSchematicExpPropGroup getExpPropGroup(int index);

	unsigned int getSchematicID();
	
	unsigned int getSchematicCRC();
	
	string getName();

	string getStringName();
	
	string getGroupName();
	
	unsigned int getComplexity();
	
	unsigned int getSchematicSize();

	unsigned int getObjectID();

	string getTanoAttributes();
	
	int getCraftingToolTab();

	SceneObject getContainer();

	string getXpType();

	int getXp();

	string getExperimentingSkill();

	string getAssemblySkill();

	int getExpPoints();

	int getExpCounter();

	float getExpFailure();

	DraftSchematicValues getCraftingValues();

	boolean isFinished();


	void toString();
}
