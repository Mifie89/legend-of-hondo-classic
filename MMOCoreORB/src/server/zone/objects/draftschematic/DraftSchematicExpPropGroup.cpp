/*
 *	server/zone/objects/draftschematic/DraftSchematicExpPropGroup.cpp generated by engine3 IDL compiler 0.55
 */

#include "DraftSchematicExpPropGroup.h"

#include "DraftSchematicExpPropGroupImplementation.h"

#include "../../packets/object/ObjectControllerMessage.h"

/*
 *	DraftSchematicExpPropGroupStub
 */

DraftSchematicExpPropGroup::DraftSchematicExpPropGroup() {
	_impl = new DraftSchematicExpPropGroupImplementation();
	_impl->_setStub(this);
}

DraftSchematicExpPropGroup::DraftSchematicExpPropGroup(DummyConstructorParameter* param) {
	_impl = NULL;
}

DraftSchematicExpPropGroup::~DraftSchematicExpPropGroup() {
}

void DraftSchematicExpPropGroup::addExperimentalProperty(const string& experimentalPropertyType, unsigned int weight) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addAsciiParameter(experimentalPropertyType);
		method.addUnsignedIntParameter(weight);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicExpPropGroupImplementation*) _impl)->addExperimentalProperty(experimentalPropertyType, weight);
}

void DraftSchematicExpPropGroup::sendToPlayer(ObjectControllerMessage* msg, int count) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(msg);
		method.addSignedIntParameter(count);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicExpPropGroupImplementation*) _impl)->sendToPlayer(msg, count);
}

bool DraftSchematicExpPropGroup::containsExpPropType(const string& expPropType) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addAsciiParameter(expPropType);

		return method.executeWithBooleanReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->containsExpPropType(expPropType);
}

float DraftSchematicExpPropGroup::getExpPropPercentage(const string& expPropType) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addAsciiParameter(expPropType);

		return method.executeWithFloatReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getExpPropPercentage(expPropType);
}

unsigned int DraftSchematicExpPropGroup::getExpPropPercentageListSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getExpPropPercentageListSize();
}

float DraftSchematicExpPropGroup::getExpPropPercentage(unsigned int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addUnsignedIntParameter(index);

		return method.executeWithFloatReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getExpPropPercentage(index);
}

unsigned char DraftSchematicExpPropGroup::getTypeAndWeight(unsigned int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addUnsignedIntParameter(index);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getTypeAndWeight(index);
}

/*
 *	DraftSchematicExpPropGroupAdapter
 */

DraftSchematicExpPropGroupAdapter::DraftSchematicExpPropGroupAdapter(DraftSchematicExpPropGroupImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* DraftSchematicExpPropGroupAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		addExperimentalProperty(inv->getAsciiParameter(_param0_addExperimentalProperty__string_int_), inv->getUnsignedIntParameter());
		break;
	case 7:
		sendToPlayer((ObjectControllerMessage*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 8:
		resp->insertBoolean(containsExpPropType(inv->getAsciiParameter(_param0_containsExpPropType__string_)));
		break;
	case 9:
		resp->insertFloat(getExpPropPercentage(inv->getAsciiParameter(_param0_getExpPropPercentage__string_)));
		break;
	case 10:
		resp->insertInt(getExpPropPercentageListSize());
		break;
	case 11:
		resp->insertFloat(getExpPropPercentage(inv->getUnsignedIntParameter()));
		break;
	case 12:
		resp->insertByte(getTypeAndWeight(inv->getUnsignedIntParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void DraftSchematicExpPropGroupAdapter::addExperimentalProperty(const string& experimentalPropertyType, unsigned int weight) {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->addExperimentalProperty(experimentalPropertyType, weight);
}

void DraftSchematicExpPropGroupAdapter::sendToPlayer(ObjectControllerMessage* msg, int count) {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->sendToPlayer(msg, count);
}

bool DraftSchematicExpPropGroupAdapter::containsExpPropType(const string& expPropType) {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->containsExpPropType(expPropType);
}

float DraftSchematicExpPropGroupAdapter::getExpPropPercentage(const string& expPropType) {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getExpPropPercentage(expPropType);
}

unsigned int DraftSchematicExpPropGroupAdapter::getExpPropPercentageListSize() {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getExpPropPercentageListSize();
}

float DraftSchematicExpPropGroupAdapter::getExpPropPercentage(unsigned int index) {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getExpPropPercentage(index);
}

unsigned char DraftSchematicExpPropGroupAdapter::getTypeAndWeight(unsigned int index) {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getTypeAndWeight(index);
}

/*
 *	DraftSchematicExpPropGroupHelper
 */

DraftSchematicExpPropGroupHelper* DraftSchematicExpPropGroupHelper::staticInitializer = DraftSchematicExpPropGroupHelper::instance();

DraftSchematicExpPropGroupHelper::DraftSchematicExpPropGroupHelper() {
	className = "DraftSchematicExpPropGroup";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void DraftSchematicExpPropGroupHelper::finalizeHelper() {
	DraftSchematicExpPropGroupHelper::finalize();
}

DistributedObject* DraftSchematicExpPropGroupHelper::instantiateObject() {
	return new DraftSchematicExpPropGroup(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DraftSchematicExpPropGroupHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DraftSchematicExpPropGroupAdapter((DraftSchematicExpPropGroupImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	DraftSchematicExpPropGroupServant
 */

DraftSchematicExpPropGroupServant::DraftSchematicExpPropGroupServant() {
	_classHelper = DraftSchematicExpPropGroupHelper::instance();
}

DraftSchematicExpPropGroupServant::~DraftSchematicExpPropGroupServant() {
}

void DraftSchematicExpPropGroupServant::_setStub(DistributedObjectStub* stub) {
	_this = (DraftSchematicExpPropGroup*) stub;
}

DistributedObjectStub* DraftSchematicExpPropGroupServant::_getStub() {
	return _this;
}

