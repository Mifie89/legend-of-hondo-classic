/*
 *	server/zone/objects/creature/Action/Action.cpp generated by engine3 IDL compiler 0.55
 */

#include "Action.h"

#include "ActionImplementation.h"

#include "ActionCreature.h"

#include "../../../managers/mission/MissionManager.h"

#include "../../scene/SceneObject.h"

#include "../../player/Player.h"

#include "../Creature.h"

/*
 *	ActionStub
 */

Action::Action(SceneObject* po, int actMask, int tpr) {
	_impl = new ActionImplementation(po, actMask, tpr);
	_impl->_setStub(this);
}

Action::Action(DummyConstructorParameter* param) {
	_impl = NULL;
}

Action::~Action() {
}

void Action::setPrereq(int tpr) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addSignedIntParameter(tpr);

		method.executeWithVoidReturn();
	} else
		((ActionImplementation*) _impl)->setPrereq(tpr);
}

void Action::setActionMask(int tat) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addSignedIntParameter(tat);

		method.executeWithVoidReturn();
	} else
		((ActionImplementation*) _impl)->setActionMask(tat);
}

void Action::execAction(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((ActionImplementation*) _impl)->execAction(player);
}

void Action::addConvoScreen(string& screenID, string& leftBoxText, int numOptions, string& Options, string& optLinks) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addAsciiParameter(screenID);
		method.addAsciiParameter(leftBoxText);
		method.addSignedIntParameter(numOptions);
		method.addAsciiParameter(Options);
		method.addAsciiParameter(optLinks);

		method.executeWithVoidReturn();
	} else
		((ActionImplementation*) _impl)->addConvoScreen(screenID, leftBoxText, numOptions, Options, optLinks);
}

/*
 *	ActionAdapter
 */

ActionAdapter::ActionAdapter(ActionImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* ActionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		setPrereq(inv->getSignedIntParameter());
		break;
	case 7:
		setActionMask(inv->getSignedIntParameter());
		break;
	case 8:
		execAction((Player*) inv->getObjectParameter());
		break;
	case 9:
		addConvoScreen(inv->getAsciiParameter(_param0_addConvoScreen__string_string_int_string_string_), inv->getAsciiParameter(_param1_addConvoScreen__string_string_int_string_string_), inv->getSignedIntParameter(), inv->getAsciiParameter(_param3_addConvoScreen__string_string_int_string_string_), inv->getAsciiParameter(_param4_addConvoScreen__string_string_int_string_string_));
		break;
	default:
		return NULL;
	}

	return resp;
}

void ActionAdapter::setPrereq(int tpr) {
	return ((ActionImplementation*) impl)->setPrereq(tpr);
}

void ActionAdapter::setActionMask(int tat) {
	return ((ActionImplementation*) impl)->setActionMask(tat);
}

void ActionAdapter::execAction(Player* player) {
	return ((ActionImplementation*) impl)->execAction(player);
}

void ActionAdapter::addConvoScreen(string& screenID, string& leftBoxText, int numOptions, string& Options, string& optLinks) {
	return ((ActionImplementation*) impl)->addConvoScreen(screenID, leftBoxText, numOptions, Options, optLinks);
}

/*
 *	ActionHelper
 */

ActionHelper* ActionHelper::staticInitializer = ActionHelper::instance();

ActionHelper::ActionHelper() {
	className = "Action";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ActionHelper::finalizeHelper() {
	ActionHelper::finalize();
}

DistributedObject* ActionHelper::instantiateObject() {
	return new Action(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ActionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ActionAdapter((ActionImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ActionServant
 */

ActionServant::ActionServant() {
	_classHelper = ActionHelper::instance();
}

ActionServant::~ActionServant() {
}

void ActionServant::_setStub(DistributedObjectStub* stub) {
	_this = (Action*) stub;
}

DistributedObjectStub* ActionServant::_getStub() {
	return _this;
}

