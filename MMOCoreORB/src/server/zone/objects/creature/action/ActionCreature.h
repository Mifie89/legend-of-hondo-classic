/*
 *	server/zone/objects/creature/action/ActionCreature.h generated by engine3 IDL compiler 0.55
 */

#ifndef ACTIONCREATURE_H_
#define ACTIONCREATURE_H_

#include "engine/orb/DistributedObjectBroker.h"

class Action;

class MissionManagerImplementation;

class SceneObject;

class Player;

class Creature;

#include "../Creature.h"

class ActionCreature : public Creature {
public:
	ActionCreature(unsigned long long oid, unsigned int objCrc, String& creName, String& stf, String& missionKey);

	void addAction(String& key, Action* act);

	Action* getAction(String& key);

	void onConverse(String& tco, Player* player = NULL);

	void onTrade(String& ttr);

	void onAttack(String& tat);

	void onDeath(String& tde);

	bool isMissionNpc();

	String& getMissionKey();

	MissionManagerImplementation* getMisoMgr();

	void setMisoMgr(MissionManagerImplementation* tmgr);

	void sendConversationStartTo(SceneObject* obj);

	void selectConversationOption(int option, SceneObject* obj);

protected:
	ActionCreature(DummyConstructorParameter* param);

	virtual ~ActionCreature();

	String _return_getMissionKey;

	friend class ActionCreatureHelper;
};

class ActionCreatureImplementation;

class ActionCreatureAdapter : public CreatureAdapter {
public:
	ActionCreatureAdapter(ActionCreatureImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void addAction(String& key, Action* act);

	Action* getAction(String& key);

	void onConverse(String& tco, Player* player);

	void onTrade(String& ttr);

	void onAttack(String& tat);

	void onDeath(String& tde);

	bool isMissionNpc();

	String& getMissionKey();

	void sendConversationStartTo(SceneObject* obj);

	void selectConversationOption(int option, SceneObject* obj);

protected:
	String _param0_addAction__String_Action_;
	String _param0_getAction__String_;
	String _param0_onConverse__String_Player_;
	String _param0_onTrade__String_;
	String _param0_onAttack__String_;
	String _param0_onDeath__String_;
};

class ActionCreatureHelper : public DistributedObjectClassHelper, public Singleton<ActionCreatureHelper> {
	static ActionCreatureHelper* staticInitializer;

public:
	ActionCreatureHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<ActionCreatureHelper>;
};

#include "../CreatureImplementation.h"

class ActionCreatureServant : public CreatureImplementation {
public:
	ActionCreature* _this;

public:
	ActionCreatureServant(unsigned long long oid);
	virtual ~ActionCreatureServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*ACTIONCREATURE_H_*/
