/*
 *	server/zone/objects/creature/CreatureObject.h generated by engine3 IDL compiler 0.55
 */

#ifndef CREATUREOBJECT_H_
#define CREATUREOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/service/proto/BaseMessage.h"

#include "engine/service/proto/StandaloneBaseMessage.h"

#include "../../packets/object/StfParameter.h"

class SceneObject;

class Inventory;

class Container;

class TangibleObject;

class Weapon;

class Armor;

class GroupObject;

class Player;

class BuildingObject;

class MountCreature;

class Creature;

class Guild;

class Skill;

class BuffObject;

class ResourceContainer;

#include "../scene/SceneObject.h"

class CreatureObject : public SceneObject {
public:
	CreatureObject(unsigned long long oid);

	void info(const String& message, bool forcedLog = false);

	void sendItemsTo(Player* player);

	void sendTo(Player* player, bool doClose = true);

	void sendDestroyTo(Player* player);

	void doCombatAnimation(CreatureObject* defender, unsigned int animcrc, bool hit = false);

	void doAnimation(const String& anim);

	void playEffect(const String& file, const String& aux);

	void showFlyText(const String& file, const String& aux, unsigned char red, unsigned char green, unsigned char blue);

	void sendCombatSpam(CreatureObject* defender, TangibleObject* item, unsigned int damage, const String& skill, bool areaSpam = true);

	void addDamage(CreatureObject* creature, unsigned int damage);

	unsigned int getDamage(CreatureObject* creature);

	void removeFromDamageMap(CreatureObject* target);

	bool isLootOwner(CreatureObject* creature);

	CreatureObject* getLootOwner();

	unsigned int getMitigation(const String& mit);

	bool isIncapacitated();

	bool isDead();

	bool isKnockedDown();

	bool isKneeled();

	bool isProne();

	bool isInCombat();

	bool isDizzied();

	bool isStunned();

	bool isBlinded();

	bool isIntimidated();

	bool isDiseased();

	bool isPoisoned();

	bool isBleeding();

	bool isOnFire();

	bool isMounted();

	bool isRidingCreature();

	bool isMeditating();

	bool hatesFaction(unsigned int faction);

	void updateKnockdownRecovery();

	void updateMood(const String& md);

	bool checkKnockdownRecovery();

	void updatePostureDownRecovery();

	void updatePostureUpRecovery();

	bool checkPostureDownRecovery();

	bool checkPostureUpRecovery();

	bool setState(unsigned long long state);

	bool clearState(unsigned long long state);

	void updateStates();

	void clearStates();

	float calculateBFRatio();

	void resetHAMBars(bool doUpdateClient);

	bool changeHAMBars(int hp, int ap, int mp, bool forcedChange = false);

	bool changeHAMWounds(int hpwnd, int apwnd, int mpwnd, bool forcedChange = false);

	void changeMaxHAMBars(int hp, int ap, int mp);

	bool takeHealthDamage(int damage);

	bool takeActionDamage(int damage);

	bool takeMindDamage(int damage);

	bool changeHealthBar(int hp, bool forcedChange = false);

	bool changeStrengthBar(int st, bool forcedChange = false);

	bool changeConstitutionBar(int cs, bool forcedChange = false);

	bool changeActionBar(int ap, bool forcedChange = false);

	bool changeQuicknessBar(int qc, bool forcedChange = false);

	bool changeStaminaBar(int st, bool forcedChange = false);

	bool changeMindBar(int mp, bool forcedChange = false);

	bool changeFocusBar(int fc, bool forcedChange = false);

	bool changeWillpowerBar(int wl, bool forcedChange = false);

	void changeMaxHealthBar(int hp, bool updateClient = true);

	void changeMaxStrengthBar(int st, bool updateClient = true);

	void changeMaxConstitutionBar(int cs, bool updateClient = true);

	void changeMaxActionBar(int ap, bool updateClient = true);

	void changeMaxQuicknessBar(int qc, bool updateClient = true);

	void changeMaxStaminaBar(int st, bool updateClient = true);

	void changeMaxMindBar(int mp, bool updateClient = true);

	void changeMaxFocusBar(int fc, bool updateClient = true);

	void changeMaxWillpowerBar(int wl, bool updateClient = true);

	bool changeHealthWoundsBar(int wounds, bool forcedChange = false);

	bool changeStrengthWoundsBar(int wounds, bool forcedChange = false);

	bool changeConstitutionWoundsBar(int wounds, bool forcedChange = false);

	bool changeActionWoundsBar(int wounds, bool forcedChange = false);

	bool changeQuicknessWoundsBar(int wounds, bool forcedChange = false);

	bool changeStaminaWoundsBar(int wounds, bool forcedChange = false);

	bool changeMindWoundsBar(int wounds, bool forcedChange = false);

	bool changeFocusWoundsBar(int wounds, bool forcedChange = false);

	bool changeWillpowerWoundsBar(int wounds, bool forcedChange = false);

	void changeShockWounds(int bf);

	void setHealthBar(unsigned int hp);

	void setStrengthBar(unsigned int st);

	void setConstitutionBar(unsigned int cst);

	void setActionBar(unsigned int ap);

	void setQuicknessBar(unsigned int qck);

	void setStaminaBar(unsigned int sta);

	void setMindBar(unsigned int mp);

	void setFocusBar(unsigned int fc);

	void setWillpowerBar(unsigned int will);

	void setBaseHealthBar(unsigned int hp, bool updateClient = true);

	void setBaseStrengthBar(unsigned int st, bool updateClient = true);

	void setBaseConstitutionBar(unsigned int cst, bool updateClient = true);

	void setBaseActionBar(unsigned int ap, bool updateClient = true);

	void setBaseQuicknessBar(unsigned int qck, bool updateClient = true);

	void setBaseStaminaBar(unsigned int sta, bool updateClient = true);

	void setBaseMindBar(unsigned int mp, bool updateClient = true);

	void setBaseFocusBar(unsigned int fc, bool updateClient = true);

	void setBaseWillpowerBar(unsigned int will, bool updateClient = true);

	void setMaxHealthBar(unsigned int hp, bool updateClient = true);

	void setMaxStrengthBar(unsigned int st, bool updateClient = true);

	void setMaxConstitutionBar(unsigned int cst, bool updateClient = true);

	void setMaxActionBar(unsigned int ap, bool updateClient = true);

	void setMaxQuicknessBar(unsigned int qck, bool updateClient = true);

	void setMaxStaminaBar(unsigned int sta, bool updateClient = true);

	void setMaxMindBar(unsigned int mp, bool updateClient = true);

	void setMaxFocusBar(unsigned int fc, bool updateClient = true);

	void setMaxWillpowerBar(unsigned int will, bool updateClient = true);

	void setHealthWoundsBar(unsigned int wnds);

	void setStrengthWoundsBar(unsigned int wnds);

	void setConstitutionWoundsBar(unsigned int wnds);

	void setActionWoundsBar(unsigned int wnds);

	void setQuicknessWoundsBar(unsigned int wnds);

	void setStaminaWoundsBar(unsigned int wnds);

	void setMindWoundsBar(unsigned int wnds);

	void setFocusWoundsBar(unsigned int wnds);

	void setWillpowerWoundsBar(unsigned int wnds);

	void handleDeath();

	bool hasAttackDelay();

	void clearAttackDelay();

	void activateBurstRun();

	bool hasQueuedState(unsigned int skillCRC);

	bool removeQueuedState(unsigned int skillCRC);

	bool addQueuedState(unsigned int skillCRC);

	void setMeditateState();

	bool isGuilded();

	void removeGroup();

	bool isInAGroup();

	bool isInGroupWith(CreatureObject* creature);

	void setGroupID(unsigned long long gid);

	void updateGroupId(unsigned long long id);

	void updateGroupInviterId(unsigned long long id);

	void setDefenderID(long long did);

	void updateTarget(unsigned long long targ);

	void updateTarget(SceneObject* targ);

	void setActionCounter(unsigned int actioncntr);

	void setWeapon(Weapon* wep);

	void setCreatureLinkID(unsigned long long creatureID);

	void setAccuracy(int acc);

	void setDamageBonus(int bonus);

	void setDefenseBonus(int bonus);

	void setLastMovementUpdateStamp(unsigned int tme);

	void setIgnoreMovementTests(int times);

	void setLevel(unsigned int lvl);

	void updateServerMovementStamp();

	SceneObject* getInventoryItem(unsigned long long oid);

	TangibleObject* getMissionItem(String& tma);

	void removeInventoryItem(unsigned long long oid);

	SceneObject* getLootItem(unsigned long long oid);

	void removeLootItem(unsigned long long oid);

	Inventory* getInventory();

	Container* getLootContainer();

	unsigned long long getNewItemID();

	Weapon* getWeapon();

	Armor* getArmor(int type);

	void addSkill(Skill* skill);

	void addSkillMod(const String& name, int mod, bool updateClient = false);

	int getSkillMod(const String& name);

	bool hasSkillMod(const String& name);

	int getSkillModBonus(const String& name);

	bool hasSkillModBonus(const String& name);

	int getAccuracy();

	int getDefenseBonus();

	int getDamageBonus();

	int getConditionDamage();

	int getMaxCondition();

	int getCondition();

	MountCreature* getMount();

	unsigned long long getLastServerMovementStamp();

	unsigned long long getCreatureLinkID();

	float getDistanceTo(CreatureObject* targetCreature);

	float getHeight();

	unsigned int getCreatureSkillsCount();

	unsigned int getNewCreatureSkillsCount(int cnt);

	unsigned int getLastMovementUpdateStamp();

	int getIgnoreMovementTests();

	unsigned int getLevel();

	int getCenteredBonus();

	void sendSystemMessage(const String& message);

	void sendSystemMessage(const String& file, const String& str, unsigned long long targetid = 0);

	void updateSpeed(float speed, float acceleration);

	void addInventoryItem(TangibleObject* item);

	void addInventoryResource(ResourceContainer* rcno);

	void addLootItem(TangibleObject* item);

	void startDancing(const String& anim, bool changeDance = false);

	void startPlayingMusic(const String& anim, bool changeDance = false);

	void startWatch(unsigned long long entid);

	void startListen(unsigned long long entid);

	void stopWatch(unsigned long long entid, bool doSendPackets = true, bool forced = false, bool doLock = true);

	void stopListen(unsigned long long entid, bool doSendPackets = true, bool forced = false, bool doLock = true);

	bool isPlayingMusic();

	bool isDancing();

	void stopDancing();

	void stopPlayingMusic();

	void addListener(CreatureObject* creature);

	void addWatcher(CreatureObject* creature);

	void removeListener(CreatureObject* creature);

	void removeWatcher(CreatureObject* creature);

	void doFlourish(const String& modifier);

	void doPerformanceAction();

	void doEntertainerPatronEffects(bool healShock = false, bool healWounds = false, bool addBuff = false);

	void addEntertainerFlourishBuff();

	void addEntertainerBuffDuration(int performanceType, float duration);

	void setEntertainerBuffDuration(int performanceType, float duration);

	float getEntertainerBuffDuration(int performanceType);

	void setEntertainerBuffStrength(int performanceType, float strength);

	float getEntertainerBuffStrength(int performanceType);

	void activateRecovery();

	int getCreatureSkillsSize();

	String& getSkill(int idx);

	bool hasSkill(unsigned int skillCRC);

	void mountCreature(MountCreature* mnt, bool lockMount = true);

	void dismount(bool lockMount = true, bool ignoreCooldown = true);

	void addCashCredits(unsigned int credits);

	void addBankCredits(unsigned int credits);

	void updateCashCredits(unsigned int credits);

	void updateBankCredits(unsigned int credits);

	void subtractCashCredits(unsigned int credits);

	void subtractBankCredits(unsigned int credits);

	void setCashCredits(int credits);

	void setBankCredits(int credits);

	void addBuff(int buffCRC, float duration);

	void applyBuff(BuffObject* buff);

	void removeBuff(const unsigned int buffCRC, bool remove = true);

	bool hasSpice();

	bool verifyCashCredits(unsigned int creditsToRemove);

	bool verifyBankCredits(unsigned int creditsToRemove);

	bool isOnFullHealth();

	bool hasStates();

	bool hasState(unsigned long long state);

	bool isRevivable();

	unsigned long long getResurrectionExpires();

	void setResurrectionExpires(unsigned long long msecs);

	bool isResurrectable();

	bool hasHealthDamage();

	bool hasActionDamage();

	bool hasMindDamage();

	bool hasDamage();

	bool hasWounds();

	bool hasWound(unsigned char attribute);

	bool hasShockWounds();

	unsigned int getWounds(unsigned char attribute);

	unsigned char getNextWoundedAttribute(bool h = true, bool a = true, bool m = false);

	bool isAttackable();

	bool isAttackableBy(CreatureObject* attacker);

	bool isListening();

	bool isWatching();

	UnicodeString& getCharacterName();

	String& getStfName();

	String& getSpeciesName();

	String& getRaceName();

	String& getGender();

	String& getTerrainName();

	void getCharacterAppearance(String& appearance);

	void getHairAppearance(String& appearance);

	bool isOvert();

	unsigned long long getStateBitmask();

	unsigned int getCreatureBitmask();

	unsigned char getPosture();

	unsigned int getFaction();

	bool isRebel();

	bool isNeutral();

	bool isImperial();

	unsigned int getPvpStatusBitmask();

	unsigned char getFactionRank();

	unsigned int getBankCredits();

	unsigned int getCashCredits();

	unsigned int getWoundsUpdateCounter();

	unsigned int getNewWoundsUpdateCounter(int upd);

	void updateHAMBars();

	void updateBaseStats();

	unsigned int getBaseHealth();

	unsigned int getBaseStrength();

	unsigned int getBaseConstitution();

	unsigned int getBaseAction();

	unsigned int getBaseQuickness();

	unsigned int getBaseStamina();

	unsigned int getBaseMind();

	unsigned int getBaseFocus();

	unsigned int getBaseWillpower();

	unsigned int getHealth();

	unsigned int getStrength();

	unsigned int getConstitution();

	unsigned int getAction();

	unsigned int getQuickness();

	unsigned int getStamina();

	unsigned int getMind();

	unsigned int getFocus();

	unsigned int getWillpower();

	unsigned int getHealthMax();

	unsigned int getStrengthMax();

	unsigned int getConstitutionMax();

	unsigned int getActionMax();

	unsigned int getQuicknessMax();

	unsigned int getStaminaMax();

	unsigned int getMindMax();

	unsigned int getFocusMax();

	unsigned int getWillpowerMax();

	unsigned int getArmor();

	float getArmorResist(int resistType);

	unsigned int getHealthWounds();

	unsigned int getStrengthWounds();

	unsigned int getConstitutionWounds();

	unsigned int getActionWounds();

	unsigned int getQuicknessWounds();

	unsigned int getStaminaWounds();

	unsigned int getMindWounds();

	unsigned int getFocusWounds();

	unsigned int getWillpowerWounds();

	unsigned int getHealthDamage();

	unsigned int getActionDamage();

	unsigned int getMindDamage();

	unsigned int getShockWounds();

	unsigned int getHAMUpdateCounter();

	unsigned int getNewHAMUpdateCounter(int cnt);

	unsigned int getHAMMaxUpdateCounter();

	unsigned int getNewHAMMaxUpdateCounter(int cnt);

	unsigned int getHAMBaseUpdateCounter();

	unsigned int getNewHAMBaseUpdateCounter(int cnt);

	unsigned int getHAMEncumbUpdateCounter();

	unsigned int getNewHAMEncumbUpdateCounter(int cnt);

	unsigned int getHealthEncumbrance();

	unsigned int getActionEncumbrance();

	unsigned int getMindEncumbrance();

	unsigned long long getTargetID();

	SceneObject* getTarget();

	unsigned long long getWeaponID();

	unsigned long long getGroupID();

	unsigned long long getGuildID();

	Guild* getGuild();

	float getSpeed();

	float getAcceleration();

	unsigned long long getDefenderID();

	unsigned int getDefenderUpdateCounter();

	unsigned int getNewDefenderUpdateCounter(int cnt);

	String& getPerformanceAnimation();

	unsigned int getPerformanceCounter();

	unsigned int getInstrumentID();

	String& getPerformanceName();

	String& getMood();

	unsigned char getMoodID();

	unsigned long long getGroupInviterID();

	unsigned long long getGroupInviteCounter();

	unsigned long long getNewGroupInviteCounter();

	unsigned long long getWatchID();

	unsigned long long getListenID();

	bool isInBuilding();

	int getBuildingType();

	SceneObject* getBuilding();

	String& getGuildName();

	int getWeaponSpeedModifier();

	unsigned int getSkillBoxesUpdateCounter();

	unsigned int getSkillModsCounter();

	unsigned int getNewSkillModsCounter(int cnt);

	String& getHideType();

	String& getBoneType();

	String& getMeatType();

	int getBoneMax();

	int getHideMax();

	int getMeatMax();

	int getMilk();

	bool hasOrganics();

	int getXP();

	int isHealer();

	int isPack();

	int isHerd();

	int isStalker();

	int isKiller();

	int isAggressive();

	String& getBehaviorScript();

	String& getCreatureFaction();

	String& getCreatureWeapon();

	String& getCreatureWeaponName();

	String& getCreatureWeaponTemp();

	String& getCreatureWeaponClass();

	int getCreatureWeaponEquipped();

	int getCreatureWeaponMinDamage();

	int getCreatureWeaponMaxDamage();

	float getCreatureWeaponAttackSpeed();

	String& getCreatureWeaponDamageType();

	String& getCreatureWeaponArmorPiercing();

	float getInternalNPCDamageModifier();

	float getTame();

	String& getLootGroup();

	void setBaseHealth(unsigned int health);

	void setBaseStrength(unsigned int strength);

	void setBaseConstitution(unsigned int constituition);

	void setBaseAction(unsigned int action);

	void setBaseQuickness(unsigned int quickness);

	void setBaseStamina(unsigned int stamina);

	void setBaseMind(unsigned int mind);

	void setBaseFocus(unsigned int focus);

	void setBaseWillpower(unsigned int willpower);

	void setHealth(unsigned int health);

	void setStrength(unsigned int strength);

	void setConstitution(unsigned int constituition);

	void setAction(unsigned int action);

	void setQuickness(unsigned int quickness);

	void setStamina(unsigned int stamina);

	void setMind(unsigned int mind);

	void setFocus(unsigned int focus);

	void setWillpower(unsigned int willpower);

	void setHealthMax(unsigned int health);

	void setStrengthMax(unsigned int strength);

	void setConstitutionMax(unsigned int constituition);

	void setActionMax(unsigned int action);

	void setQuicknessMax(unsigned int quickness);

	void setStaminaMax(unsigned int stamina);

	void setMindMax(unsigned int mind);

	void setFocusMax(unsigned int focus);

	void setWillpowerMax(unsigned int willpower);

	void setArmor(unsigned int ar);

	void setHealthWounds(unsigned int wounds);

	void setStrengthWounds(unsigned int wounds);

	void setConstitutionWounds(unsigned int wounds);

	void setActionWounds(unsigned int wounds);

	void setQuicknessWounds(unsigned int wounds);

	void setStaminaWounds(unsigned int wounds);

	void setMindWounds(unsigned int wounds);

	void setFocusWounds(unsigned int wounds);

	void setWillpowerWounds(unsigned int wounds);

	void setShockWounds(unsigned int wounds);

	void setWoundsUpdateCounter(unsigned int count);

	void changeHealthMax(int health);

	void changeStrengthMax(int strength);

	void changeConstitutionMax(int constituition);

	void changeActionMax(int action);

	void changeQuicknessMax(int quickness);

	void changeStaminaMax(int stamina);

	void changeMindMax(int mind);

	void changeFocusMax(int focus);

	void changeWillpowerMax(int willpower);

	void changeHealth(int health);

	void changeStrength(int strength);

	void changeConstitution(int constituition);

	void changeAction(int action);

	void changeQuickness(int quickness);

	void changeStamina(int stamina);

	void changeMind(int mind);

	void changeFocus(int focus);

	void changeWillpower(int willpower);

	void setSpeed(float spd);

	void setAcceleration(float acc);

	void setKinetic(float kin);

	void setEnergy(float ene);

	void setElectricity(float ele);

	void setStun(float stu);

	void setBlast(float bla);

	void setHeat(float hea);

	void setCold(float col);

	void setAcid(float aci);

	void setLightSaber(float lig);

	void changeConditionDamage(int amount);

	void setMaxCondition(int condition);

	void setPosture(unsigned char state, bool overrideDizzy = false, bool objectInteraction = false, float objX = 0, float objY = 0, float objZ = 0);

	void setPvpStatusBitmask(unsigned int mask);

	void setFactionRank(unsigned char rank, bool updateClient = true);

	void setDizziedState();

	void setStunnedState();

	void setBlindedState();

	void setIntimidatedState();

	void setPoisonedState(int str, int type, int duration);

	void setBleedingState(int str, int type, int duration);

	void setDiseasedState(int str, int type, int duration);

	void setOnFireState(int str, int type, int duration);

	void setCreatureBitmask(unsigned int bitmask);

	bool setNextAttackDelay(int del);

	void setCharacterName(const String& name);

	void setCharacterName(const UnicodeString& name);

	void setTerrainName(const String& name);

	void setCharacterAppearance(String& cust);

	void setAppearanceAttribute(unsigned char type, unsigned char value);

	void setAppearanceAttribute(String& type, unsigned char value);

	void updateCharacterAppearance();

	void setHairAppearance(String& cust);

	void setHairAppearanceAttribute(unsigned char type, unsigned char value);

	void setHairAppearanceAttribute(String& type, unsigned char value);

	void setRaceName(const String& name);

	void setSpeciesName(const String& name);

	void setStfName(const String& name);

	void setGender(const String& name);

	void setFaction(unsigned int fac);

	void setHeight(float h);

	void setMood(unsigned char mdid);

	void setMood(const String& m);

	void setGroup(GroupObject* Group);

	void setMount(MountCreature* mount);

	void explode(int level = 1, bool destroy = true);

	BuffObject* getBuffObject(const unsigned int buffCRC);

	bool hasBuff(const unsigned int buffCRC);

	int healDamage(CreatureObject* target, int damage, unsigned char attribute, bool doBattleFatigue = true);

	int healWound(CreatureObject* target, int damage, unsigned char attribute, bool doBattleFatigue = true);

	int healEnhance(CreatureObject* target, int amount, float duration, unsigned char attribute, bool doBattleFatigue = true);

	bool curePoison(CreatureObject* target, float effectiveness);

	bool cureDisease(CreatureObject* target, float effectiveness);

	bool extinguishFire(CreatureObject* target, float effectiveness);

	bool healState(CreatureObject* target, unsigned long long state);

	bool revive(CreatureObject* target, bool forcedChange = false);

	bool resurrect(CreatureObject* target, bool forcedChange = false);

	void deactivateWoundTreatment();

	void activateWoundTreatment();

	void deactivateInjuryTreatment();

	void activateInjuryTreatment();

	void deactivateStateTreatment();

	void activateStateTreatment();

	void deactivateConditionTreatment();

	void activateConditionTreatment();

	bool canTreatWounds();

	bool canTreatInjuries();

	bool canTreatStates();

	bool canTreatConditions();

	int getMedicalFacilityRating();

	void setBoneType(const String& bone);

	void setBoneMax(int bonemax);

	void setHideType(const String& hide);

	void setHideMax(int hidemax);

	void setMeatType(const String& meat);

	void setMeatMax(int meatmax);

	void setMilk(int milkamt);

	void setXP(int xp);

	void setHealer(int heale);

	void setPack(int pack);

	void setHerd(int herd);

	void setStalker(int stalker);

	void setKiller(int killer);

	void setAggressive(int aggressive);

	void setBehaviorScript(const String& behaviorScript);

	void setLootGroup(const String& lootgroup);

	void setTame(float tme);

	void setCreatureFaction(const String& cfac);

	void setInternalNPCDamageModifier(float indm);

	void setCreatureWeapon(const String& wpon);

	void setCreatureWeaponName(const String& weaponname);

	void setCreatureWeaponTemp(const String& weapontemp);

	void setCreatureWeaponClass(const String& weaponclass);

	void setCreatureWeaponEquipped(int weaponequ);

	void setCreatureWeaponMinDamage(int weaponmindam);

	void setCreatureWeaponMaxDamage(int weaponmaxdam);

	void setCreatureWeaponAttackSpeed(float weaponattackspeed);

	void setCreatureWeaponDamageType(const String& weapondamtype);

	void setCreatureWeaponArmorPiercing(const String& weaponarmorpiercing);

	void say(UnicodeString& message, unsigned int moodid = 0, unsigned int mood2 = 0);

	void say(const String& file, const String& str, StfParameter* param, unsigned int moodid = 0, unsigned int mood2 = 0);

protected:
	CreatureObject(DummyConstructorParameter* param);

	virtual ~CreatureObject();

	String _return_getBehaviorScript;
	String _return_getBoneType;
	String _return_getCreatureFaction;
	String _return_getCreatureWeapon;
	String _return_getCreatureWeaponArmorPiercing;
	String _return_getCreatureWeaponClass;
	String _return_getCreatureWeaponDamageType;
	String _return_getCreatureWeaponName;
	String _return_getCreatureWeaponTemp;
	String _return_getGender;
	String _return_getGuildName;
	String _return_getHideType;
	String _return_getLootGroup;
	String _return_getMeatType;
	String _return_getMood;
	String _return_getPerformanceAnimation;
	String _return_getPerformanceName;
	String _return_getRaceName;
	String _return_getSkill;
	String _return_getSpeciesName;
	String _return_getStfName;
	String _return_getTerrainName;

	UnicodeString _return_getCharacterName;

	friend class CreatureObjectHelper;
};

class CreatureObjectImplementation;

class CreatureObjectAdapter : public SceneObjectAdapter {
public:
	CreatureObjectAdapter(CreatureObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void info(const String& message, bool forcedLog);

	void sendItemsTo(Player* player);

	void sendTo(Player* player, bool doClose);

	void sendDestroyTo(Player* player);

	void doCombatAnimation(CreatureObject* defender, unsigned int animcrc, bool hit);

	void doAnimation(const String& anim);

	void playEffect(const String& file, const String& aux);

	void showFlyText(const String& file, const String& aux, unsigned char red, unsigned char green, unsigned char blue);

	void sendCombatSpam(CreatureObject* defender, TangibleObject* item, unsigned int damage, const String& skill, bool areaSpam);

	void addDamage(CreatureObject* creature, unsigned int damage);

	unsigned int getDamage(CreatureObject* creature);

	void removeFromDamageMap(CreatureObject* target);

	bool isLootOwner(CreatureObject* creature);

	CreatureObject* getLootOwner();

	unsigned int getMitigation(const String& mit);

	bool isIncapacitated();

	bool isDead();

	bool isKnockedDown();

	bool isKneeled();

	bool isProne();

	bool isInCombat();

	bool isDizzied();

	bool isStunned();

	bool isBlinded();

	bool isIntimidated();

	bool isDiseased();

	bool isPoisoned();

	bool isBleeding();

	bool isOnFire();

	bool isMounted();

	bool isRidingCreature();

	bool isMeditating();

	bool hatesFaction(unsigned int faction);

	void updateKnockdownRecovery();

	void updateMood(const String& md);

	bool checkKnockdownRecovery();

	void updatePostureDownRecovery();

	void updatePostureUpRecovery();

	bool checkPostureDownRecovery();

	bool checkPostureUpRecovery();

	bool setState(unsigned long long state);

	bool clearState(unsigned long long state);

	void updateStates();

	void clearStates();

	float calculateBFRatio();

	void resetHAMBars(bool doUpdateClient);

	bool changeHAMBars(int hp, int ap, int mp, bool forcedChange);

	bool changeHAMWounds(int hpwnd, int apwnd, int mpwnd, bool forcedChange);

	void changeMaxHAMBars(int hp, int ap, int mp);

	bool takeHealthDamage(int damage);

	bool takeActionDamage(int damage);

	bool takeMindDamage(int damage);

	bool changeHealthBar(int hp, bool forcedChange);

	bool changeStrengthBar(int st, bool forcedChange);

	bool changeConstitutionBar(int cs, bool forcedChange);

	bool changeActionBar(int ap, bool forcedChange);

	bool changeQuicknessBar(int qc, bool forcedChange);

	bool changeStaminaBar(int st, bool forcedChange);

	bool changeMindBar(int mp, bool forcedChange);

	bool changeFocusBar(int fc, bool forcedChange);

	bool changeWillpowerBar(int wl, bool forcedChange);

	void changeMaxHealthBar(int hp, bool updateClient);

	void changeMaxStrengthBar(int st, bool updateClient);

	void changeMaxConstitutionBar(int cs, bool updateClient);

	void changeMaxActionBar(int ap, bool updateClient);

	void changeMaxQuicknessBar(int qc, bool updateClient);

	void changeMaxStaminaBar(int st, bool updateClient);

	void changeMaxMindBar(int mp, bool updateClient);

	void changeMaxFocusBar(int fc, bool updateClient);

	void changeMaxWillpowerBar(int wl, bool updateClient);

	bool changeHealthWoundsBar(int wounds, bool forcedChange);

	bool changeStrengthWoundsBar(int wounds, bool forcedChange);

	bool changeConstitutionWoundsBar(int wounds, bool forcedChange);

	bool changeActionWoundsBar(int wounds, bool forcedChange);

	bool changeQuicknessWoundsBar(int wounds, bool forcedChange);

	bool changeStaminaWoundsBar(int wounds, bool forcedChange);

	bool changeMindWoundsBar(int wounds, bool forcedChange);

	bool changeFocusWoundsBar(int wounds, bool forcedChange);

	bool changeWillpowerWoundsBar(int wounds, bool forcedChange);

	void changeShockWounds(int bf);

	void setHealthBar(unsigned int hp);

	void setStrengthBar(unsigned int st);

	void setConstitutionBar(unsigned int cst);

	void setActionBar(unsigned int ap);

	void setQuicknessBar(unsigned int qck);

	void setStaminaBar(unsigned int sta);

	void setMindBar(unsigned int mp);

	void setFocusBar(unsigned int fc);

	void setWillpowerBar(unsigned int will);

	void setBaseHealthBar(unsigned int hp, bool updateClient);

	void setBaseStrengthBar(unsigned int st, bool updateClient);

	void setBaseConstitutionBar(unsigned int cst, bool updateClient);

	void setBaseActionBar(unsigned int ap, bool updateClient);

	void setBaseQuicknessBar(unsigned int qck, bool updateClient);

	void setBaseStaminaBar(unsigned int sta, bool updateClient);

	void setBaseMindBar(unsigned int mp, bool updateClient);

	void setBaseFocusBar(unsigned int fc, bool updateClient);

	void setBaseWillpowerBar(unsigned int will, bool updateClient);

	void setMaxHealthBar(unsigned int hp, bool updateClient);

	void setMaxStrengthBar(unsigned int st, bool updateClient);

	void setMaxConstitutionBar(unsigned int cst, bool updateClient);

	void setMaxActionBar(unsigned int ap, bool updateClient);

	void setMaxQuicknessBar(unsigned int qck, bool updateClient);

	void setMaxStaminaBar(unsigned int sta, bool updateClient);

	void setMaxMindBar(unsigned int mp, bool updateClient);

	void setMaxFocusBar(unsigned int fc, bool updateClient);

	void setMaxWillpowerBar(unsigned int will, bool updateClient);

	void setHealthWoundsBar(unsigned int wnds);

	void setStrengthWoundsBar(unsigned int wnds);

	void setConstitutionWoundsBar(unsigned int wnds);

	void setActionWoundsBar(unsigned int wnds);

	void setQuicknessWoundsBar(unsigned int wnds);

	void setStaminaWoundsBar(unsigned int wnds);

	void setMindWoundsBar(unsigned int wnds);

	void setFocusWoundsBar(unsigned int wnds);

	void setWillpowerWoundsBar(unsigned int wnds);

	void handleDeath();

	bool hasAttackDelay();

	void clearAttackDelay();

	void activateBurstRun();

	bool hasQueuedState(unsigned int skillCRC);

	bool removeQueuedState(unsigned int skillCRC);

	bool addQueuedState(unsigned int skillCRC);

	void setMeditateState();

	bool isGuilded();

	void removeGroup();

	bool isInAGroup();

	bool isInGroupWith(CreatureObject* creature);

	void setGroupID(unsigned long long gid);

	void updateGroupId(unsigned long long id);

	void updateGroupInviterId(unsigned long long id);

	void setDefenderID(long long did);

	void updateTarget(unsigned long long targ);

	void updateTarget(SceneObject* targ);

	void setActionCounter(unsigned int actioncntr);

	void setWeapon(Weapon* wep);

	void setCreatureLinkID(unsigned long long creatureID);

	void setAccuracy(int acc);

	void setDamageBonus(int bonus);

	void setDefenseBonus(int bonus);

	void setLastMovementUpdateStamp(unsigned int tme);

	void setIgnoreMovementTests(int times);

	void setLevel(unsigned int lvl);

	void updateServerMovementStamp();

	SceneObject* getInventoryItem(unsigned long long oid);

	TangibleObject* getMissionItem(String& tma);

	void removeInventoryItem(unsigned long long oid);

	SceneObject* getLootItem(unsigned long long oid);

	void removeLootItem(unsigned long long oid);

	Inventory* getInventory();

	Container* getLootContainer();

	unsigned long long getNewItemID();

	Weapon* getWeapon();

	Armor* getArmor(int type);

	void addSkillMod(const String& name, int mod, bool updateClient);

	int getSkillMod(const String& name);

	bool hasSkillMod(const String& name);

	int getSkillModBonus(const String& name);

	bool hasSkillModBonus(const String& name);

	int getAccuracy();

	int getDefenseBonus();

	int getDamageBonus();

	int getConditionDamage();

	int getMaxCondition();

	int getCondition();

	MountCreature* getMount();

	unsigned long long getLastServerMovementStamp();

	unsigned long long getCreatureLinkID();

	float getDistanceTo(CreatureObject* targetCreature);

	float getHeight();

	unsigned int getCreatureSkillsCount();

	unsigned int getNewCreatureSkillsCount(int cnt);

	unsigned int getLastMovementUpdateStamp();

	int getIgnoreMovementTests();

	unsigned int getLevel();

	int getCenteredBonus();

	void sendSystemMessage(const String& message);

	void sendSystemMessage(const String& file, const String& str, unsigned long long targetid);

	void updateSpeed(float speed, float acceleration);

	void addInventoryItem(TangibleObject* item);

	void addInventoryResource(ResourceContainer* rcno);

	void addLootItem(TangibleObject* item);

	void startDancing(const String& anim, bool changeDance);

	void startPlayingMusic(const String& anim, bool changeDance);

	void startWatch(unsigned long long entid);

	void startListen(unsigned long long entid);

	void stopWatch(unsigned long long entid, bool doSendPackets, bool forced, bool doLock);

	void stopListen(unsigned long long entid, bool doSendPackets, bool forced, bool doLock);

	bool isPlayingMusic();

	bool isDancing();

	void stopDancing();

	void stopPlayingMusic();

	void addListener(CreatureObject* creature);

	void addWatcher(CreatureObject* creature);

	void removeListener(CreatureObject* creature);

	void removeWatcher(CreatureObject* creature);

	void doFlourish(const String& modifier);

	void doPerformanceAction();

	void doEntertainerPatronEffects(bool healShock, bool healWounds, bool addBuff);

	void addEntertainerFlourishBuff();

	void addEntertainerBuffDuration(int performanceType, float duration);

	void setEntertainerBuffDuration(int performanceType, float duration);

	float getEntertainerBuffDuration(int performanceType);

	void setEntertainerBuffStrength(int performanceType, float strength);

	float getEntertainerBuffStrength(int performanceType);

	void activateRecovery();

	int getCreatureSkillsSize();

	String& getSkill(int idx);

	bool hasSkill(unsigned int skillCRC);

	void mountCreature(MountCreature* mnt, bool lockMount);

	void dismount(bool lockMount, bool ignoreCooldown);

	void addCashCredits(unsigned int credits);

	void addBankCredits(unsigned int credits);

	void updateCashCredits(unsigned int credits);

	void updateBankCredits(unsigned int credits);

	void subtractCashCredits(unsigned int credits);

	void subtractBankCredits(unsigned int credits);

	void setCashCredits(int credits);

	void setBankCredits(int credits);

	void addBuff(int buffCRC, float duration);

	void applyBuff(BuffObject* buff);

	void removeBuff(const unsigned int buffCRC, bool remove);

	bool hasSpice();

	bool verifyCashCredits(unsigned int creditsToRemove);

	bool verifyBankCredits(unsigned int creditsToRemove);

	bool isOnFullHealth();

	bool hasStates();

	bool hasState(unsigned long long state);

	bool isRevivable();

	unsigned long long getResurrectionExpires();

	void setResurrectionExpires(unsigned long long msecs);

	bool isResurrectable();

	bool hasHealthDamage();

	bool hasActionDamage();

	bool hasMindDamage();

	bool hasDamage();

	bool hasWounds();

	bool hasWound(unsigned char attribute);

	bool hasShockWounds();

	unsigned int getWounds(unsigned char attribute);

	unsigned char getNextWoundedAttribute(bool h, bool a, bool m);

	bool isAttackable();

	bool isAttackableBy(CreatureObject* attacker);

	bool isListening();

	bool isWatching();

	UnicodeString& getCharacterName();

	String& getStfName();

	String& getSpeciesName();

	String& getRaceName();

	String& getGender();

	String& getTerrainName();

	void getCharacterAppearance(String& appearance);

	void getHairAppearance(String& appearance);

	bool isOvert();

	unsigned long long getStateBitmask();

	unsigned int getCreatureBitmask();

	unsigned char getPosture();

	unsigned int getFaction();

	bool isRebel();

	bool isNeutral();

	bool isImperial();

	unsigned int getPvpStatusBitmask();

	unsigned char getFactionRank();

	unsigned int getBankCredits();

	unsigned int getCashCredits();

	unsigned int getWoundsUpdateCounter();

	unsigned int getNewWoundsUpdateCounter(int upd);

	void updateHAMBars();

	void updateBaseStats();

	unsigned int getBaseHealth();

	unsigned int getBaseStrength();

	unsigned int getBaseConstitution();

	unsigned int getBaseAction();

	unsigned int getBaseQuickness();

	unsigned int getBaseStamina();

	unsigned int getBaseMind();

	unsigned int getBaseFocus();

	unsigned int getBaseWillpower();

	unsigned int getHealth();

	unsigned int getStrength();

	unsigned int getConstitution();

	unsigned int getAction();

	unsigned int getQuickness();

	unsigned int getStamina();

	unsigned int getMind();

	unsigned int getFocus();

	unsigned int getWillpower();

	unsigned int getHealthMax();

	unsigned int getStrengthMax();

	unsigned int getConstitutionMax();

	unsigned int getActionMax();

	unsigned int getQuicknessMax();

	unsigned int getStaminaMax();

	unsigned int getMindMax();

	unsigned int getFocusMax();

	unsigned int getWillpowerMax();

	unsigned int getArmor();

	float getArmorResist(int resistType);

	unsigned int getHealthWounds();

	unsigned int getStrengthWounds();

	unsigned int getConstitutionWounds();

	unsigned int getActionWounds();

	unsigned int getQuicknessWounds();

	unsigned int getStaminaWounds();

	unsigned int getMindWounds();

	unsigned int getFocusWounds();

	unsigned int getWillpowerWounds();

	unsigned int getHealthDamage();

	unsigned int getActionDamage();

	unsigned int getMindDamage();

	unsigned int getShockWounds();

	unsigned int getHAMUpdateCounter();

	unsigned int getNewHAMUpdateCounter(int cnt);

	unsigned int getHAMMaxUpdateCounter();

	unsigned int getNewHAMMaxUpdateCounter(int cnt);

	unsigned int getHAMBaseUpdateCounter();

	unsigned int getNewHAMBaseUpdateCounter(int cnt);

	unsigned int getHAMEncumbUpdateCounter();

	unsigned int getNewHAMEncumbUpdateCounter(int cnt);

	unsigned int getHealthEncumbrance();

	unsigned int getActionEncumbrance();

	unsigned int getMindEncumbrance();

	unsigned long long getTargetID();

	SceneObject* getTarget();

	unsigned long long getWeaponID();

	unsigned long long getGroupID();

	unsigned long long getGuildID();

	Guild* getGuild();

	float getSpeed();

	float getAcceleration();

	unsigned long long getDefenderID();

	unsigned int getDefenderUpdateCounter();

	unsigned int getNewDefenderUpdateCounter(int cnt);

	String& getPerformanceAnimation();

	unsigned int getPerformanceCounter();

	unsigned int getInstrumentID();

	String& getPerformanceName();

	String& getMood();

	unsigned char getMoodID();

	unsigned long long getGroupInviterID();

	unsigned long long getGroupInviteCounter();

	unsigned long long getNewGroupInviteCounter();

	unsigned long long getWatchID();

	unsigned long long getListenID();

	bool isInBuilding();

	int getBuildingType();

	SceneObject* getBuilding();

	String& getGuildName();

	int getWeaponSpeedModifier();

	unsigned int getSkillBoxesUpdateCounter();

	unsigned int getSkillModsCounter();

	unsigned int getNewSkillModsCounter(int cnt);

	String& getHideType();

	String& getBoneType();

	String& getMeatType();

	int getBoneMax();

	int getHideMax();

	int getMeatMax();

	int getMilk();

	bool hasOrganics();

	int getXP();

	int isHealer();

	int isPack();

	int isHerd();

	int isStalker();

	int isKiller();

	int isAggressive();

	String& getBehaviorScript();

	String& getCreatureFaction();

	String& getCreatureWeapon();

	String& getCreatureWeaponName();

	String& getCreatureWeaponTemp();

	String& getCreatureWeaponClass();

	int getCreatureWeaponEquipped();

	int getCreatureWeaponMinDamage();

	int getCreatureWeaponMaxDamage();

	float getCreatureWeaponAttackSpeed();

	String& getCreatureWeaponDamageType();

	String& getCreatureWeaponArmorPiercing();

	float getInternalNPCDamageModifier();

	float getTame();

	String& getLootGroup();

	void setBaseHealth(unsigned int health);

	void setBaseStrength(unsigned int strength);

	void setBaseConstitution(unsigned int constituition);

	void setBaseAction(unsigned int action);

	void setBaseQuickness(unsigned int quickness);

	void setBaseStamina(unsigned int stamina);

	void setBaseMind(unsigned int mind);

	void setBaseFocus(unsigned int focus);

	void setBaseWillpower(unsigned int willpower);

	void setHealth(unsigned int health);

	void setStrength(unsigned int strength);

	void setConstitution(unsigned int constituition);

	void setAction(unsigned int action);

	void setQuickness(unsigned int quickness);

	void setStamina(unsigned int stamina);

	void setMind(unsigned int mind);

	void setFocus(unsigned int focus);

	void setWillpower(unsigned int willpower);

	void setHealthMax(unsigned int health);

	void setStrengthMax(unsigned int strength);

	void setConstitutionMax(unsigned int constituition);

	void setActionMax(unsigned int action);

	void setQuicknessMax(unsigned int quickness);

	void setStaminaMax(unsigned int stamina);

	void setMindMax(unsigned int mind);

	void setFocusMax(unsigned int focus);

	void setWillpowerMax(unsigned int willpower);

	void setArmor(unsigned int ar);

	void setHealthWounds(unsigned int wounds);

	void setStrengthWounds(unsigned int wounds);

	void setConstitutionWounds(unsigned int wounds);

	void setActionWounds(unsigned int wounds);

	void setQuicknessWounds(unsigned int wounds);

	void setStaminaWounds(unsigned int wounds);

	void setMindWounds(unsigned int wounds);

	void setFocusWounds(unsigned int wounds);

	void setWillpowerWounds(unsigned int wounds);

	void setShockWounds(unsigned int wounds);

	void setWoundsUpdateCounter(unsigned int count);

	void changeHealthMax(int health);

	void changeStrengthMax(int strength);

	void changeConstitutionMax(int constituition);

	void changeActionMax(int action);

	void changeQuicknessMax(int quickness);

	void changeStaminaMax(int stamina);

	void changeMindMax(int mind);

	void changeFocusMax(int focus);

	void changeWillpowerMax(int willpower);

	void changeHealth(int health);

	void changeStrength(int strength);

	void changeConstitution(int constituition);

	void changeAction(int action);

	void changeQuickness(int quickness);

	void changeStamina(int stamina);

	void changeMind(int mind);

	void changeFocus(int focus);

	void changeWillpower(int willpower);

	void setSpeed(float spd);

	void setAcceleration(float acc);

	void setKinetic(float kin);

	void setEnergy(float ene);

	void setElectricity(float ele);

	void setStun(float stu);

	void setBlast(float bla);

	void setHeat(float hea);

	void setCold(float col);

	void setAcid(float aci);

	void setLightSaber(float lig);

	void changeConditionDamage(int amount);

	void setMaxCondition(int condition);

	void setPosture(unsigned char state, bool overrideDizzy, bool objectInteraction, float objX, float objY, float objZ);

	void setPvpStatusBitmask(unsigned int mask);

	void setFactionRank(unsigned char rank, bool updateClient);

	void setDizziedState();

	void setStunnedState();

	void setBlindedState();

	void setIntimidatedState();

	void setPoisonedState(int str, int type, int duration);

	void setBleedingState(int str, int type, int duration);

	void setDiseasedState(int str, int type, int duration);

	void setOnFireState(int str, int type, int duration);

	void setCreatureBitmask(unsigned int bitmask);

	bool setNextAttackDelay(int del);

	void setCharacterName(const String& name);

	void setCharacterName(const UnicodeString& name);

	void setTerrainName(const String& name);

	void setCharacterAppearance(String& cust);

	void setAppearanceAttribute(unsigned char type, unsigned char value);

	void setAppearanceAttribute(String& type, unsigned char value);

	void updateCharacterAppearance();

	void setHairAppearance(String& cust);

	void setHairAppearanceAttribute(unsigned char type, unsigned char value);

	void setHairAppearanceAttribute(String& type, unsigned char value);

	void setRaceName(const String& name);

	void setSpeciesName(const String& name);

	void setStfName(const String& name);

	void setGender(const String& name);

	void setFaction(unsigned int fac);

	void setHeight(float h);

	void setMood(unsigned char mdid);

	void setMood(const String& m);

	void setGroup(GroupObject* Group);

	void setMount(MountCreature* mount);

	void explode(int level, bool destroy);

	BuffObject* getBuffObject(const unsigned int buffCRC);

	bool hasBuff(const unsigned int buffCRC);

	int healDamage(CreatureObject* target, int damage, unsigned char attribute, bool doBattleFatigue);

	int healWound(CreatureObject* target, int damage, unsigned char attribute, bool doBattleFatigue);

	int healEnhance(CreatureObject* target, int amount, float duration, unsigned char attribute, bool doBattleFatigue);

	bool curePoison(CreatureObject* target, float effectiveness);

	bool cureDisease(CreatureObject* target, float effectiveness);

	bool extinguishFire(CreatureObject* target, float effectiveness);

	bool healState(CreatureObject* target, unsigned long long state);

	bool revive(CreatureObject* target, bool forcedChange);

	bool resurrect(CreatureObject* target, bool forcedChange);

	void deactivateWoundTreatment();

	void activateWoundTreatment();

	void deactivateInjuryTreatment();

	void activateInjuryTreatment();

	void deactivateStateTreatment();

	void activateStateTreatment();

	void deactivateConditionTreatment();

	void activateConditionTreatment();

	bool canTreatWounds();

	bool canTreatInjuries();

	bool canTreatStates();

	bool canTreatConditions();

	int getMedicalFacilityRating();

	void setBoneType(const String& bone);

	void setBoneMax(int bonemax);

	void setHideType(const String& hide);

	void setHideMax(int hidemax);

	void setMeatType(const String& meat);

	void setMeatMax(int meatmax);

	void setMilk(int milkamt);

	void setXP(int xp);

	void setHealer(int heale);

	void setPack(int pack);

	void setHerd(int herd);

	void setStalker(int stalker);

	void setKiller(int killer);

	void setAggressive(int aggressive);

	void setBehaviorScript(const String& behaviorScript);

	void setLootGroup(const String& lootgroup);

	void setTame(float tme);

	void setCreatureFaction(const String& cfac);

	void setInternalNPCDamageModifier(float indm);

	void setCreatureWeapon(const String& wpon);

	void setCreatureWeaponName(const String& weaponname);

	void setCreatureWeaponTemp(const String& weapontemp);

	void setCreatureWeaponClass(const String& weaponclass);

	void setCreatureWeaponEquipped(int weaponequ);

	void setCreatureWeaponMinDamage(int weaponmindam);

	void setCreatureWeaponMaxDamage(int weaponmaxdam);

	void setCreatureWeaponAttackSpeed(float weaponattackspeed);

	void setCreatureWeaponDamageType(const String& weapondamtype);

	void setCreatureWeaponArmorPiercing(const String& weaponarmorpiercing);

	void say(UnicodeString& message, unsigned int moodid, unsigned int mood2);

	void say(const String& file, const String& str, StfParameter* param, unsigned int moodid, unsigned int mood2);

protected:
	String _param0_info__String_bool_;
	String _param0_doAnimation__String_;
	String _param0_playEffect__String_String_;
	String _param1_playEffect__String_String_;
	String _param0_showFlyText__String_String_char_char_char_;
	String _param1_showFlyText__String_String_char_char_char_;
	String _param3_sendCombatSpam__CreatureObject_TangibleObject_int_String_bool_;
	String _param0_getMitigation__String_;
	String _param0_updateMood__String_;
	String _param0_getMissionItem__String_;
	String _param0_addSkillMod__String_int_bool_;
	String _param0_getSkillMod__String_;
	String _param0_hasSkillMod__String_;
	String _param0_getSkillModBonus__String_;
	String _param0_hasSkillModBonus__String_;
	String _param0_sendSystemMessage__String_;
	String _param0_sendSystemMessage__String_String_long_;
	String _param1_sendSystemMessage__String_String_long_;
	String _param0_startDancing__String_bool_;
	String _param0_startPlayingMusic__String_bool_;
	String _param0_doFlourish__String_;
	String _param0_getCharacterAppearance__String_;
	String _param0_getHairAppearance__String_;
	String _param0_setCharacterName__String_;
	UnicodeString _param0_setCharacterName__UnicodeString_;
	String _param0_setTerrainName__String_;
	String _param0_setCharacterAppearance__String_;
	String _param0_setAppearanceAttribute__String_char_;
	String _param0_setHairAppearance__String_;
	String _param0_setHairAppearanceAttribute__String_char_;
	String _param0_setRaceName__String_;
	String _param0_setSpeciesName__String_;
	String _param0_setStfName__String_;
	String _param0_setGender__String_;
	String _param0_setMood__String_;
	String _param0_setBoneType__String_;
	String _param0_setHideType__String_;
	String _param0_setMeatType__String_;
	String _param0_setBehaviorScript__String_;
	String _param0_setLootGroup__String_;
	String _param0_setCreatureFaction__String_;
	String _param0_setCreatureWeapon__String_;
	String _param0_setCreatureWeaponName__String_;
	String _param0_setCreatureWeaponTemp__String_;
	String _param0_setCreatureWeaponClass__String_;
	String _param0_setCreatureWeaponDamageType__String_;
	String _param0_setCreatureWeaponArmorPiercing__String_;
	UnicodeString _param0_say__UnicodeString_int_int_;
	String _param0_say__String_String_StfParameter_int_int_;
	String _param1_say__String_String_StfParameter_int_int_;
};

class CreatureObjectHelper : public DistributedObjectClassHelper, public Singleton<CreatureObjectHelper> {
	static CreatureObjectHelper* staticInitializer;

public:
	CreatureObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<CreatureObjectHelper>;
};

#include "../scene/SceneObjectImplementation.h"

class CreatureObjectServant : public SceneObjectImplementation {
public:
	CreatureObject* _this;

public:
	CreatureObjectServant(unsigned long long oid, int type);
	virtual ~CreatureObjectServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*CREATUREOBJECT_H_*/
