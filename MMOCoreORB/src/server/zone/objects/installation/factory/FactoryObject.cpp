/*
 *	server/zone/objects/installation/factory/FactoryObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "FactoryObject.h"

#include "FactoryObjectImplementation.h"

#include "../../tangible/TangibleObject.h"

#include "../../creature/CreatureObject.h"

#include "../../player/Player.h"

#include "../../tangible/deed/factorydeed/FactoryDeed.h"

#include "../InstallationObject.h"

#include "../../../Zone.h"

/*
 *	FactoryObjectStub
 */

FactoryObject::FactoryObject(unsigned long long oid) : InstallationObject(DummyConstructorParameter::instance()) {
	_impl = new FactoryObjectImplementation(oid);
	_impl->_setStub(this);
}

FactoryObject::FactoryObject(unsigned long long oid, FactoryDeed* theDeed) : InstallationObject(DummyConstructorParameter::instance()) {
	_impl = new FactoryObjectImplementation(oid, theDeed);
	_impl->_setStub(this);
}

FactoryObject::FactoryObject(DummyConstructorParameter* param) : InstallationObject(param) {
}

FactoryObject::~FactoryObject() {
}

/*
 *	FactoryObjectAdapter
 */

FactoryObjectAdapter::FactoryObjectAdapter(FactoryObjectImplementation* obj) : InstallationObjectAdapter(obj) {
}

Packet* FactoryObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	FactoryObjectHelper
 */

FactoryObjectHelper* FactoryObjectHelper::staticInitializer = FactoryObjectHelper::instance();

FactoryObjectHelper::FactoryObjectHelper() {
	className = "FactoryObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void FactoryObjectHelper::finalizeHelper() {
	FactoryObjectHelper::finalize();
}

DistributedObject* FactoryObjectHelper::instantiateObject() {
	return new FactoryObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* FactoryObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FactoryObjectAdapter((FactoryObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	FactoryObjectServant
 */

FactoryObjectServant::FactoryObjectServant(unsigned long long oid) : InstallationObjectImplementation(oid) {
	_classHelper = FactoryObjectHelper::instance();
}

FactoryObjectServant::FactoryObjectServant(unsigned long long oid, FactoryDeed* theDeed) : InstallationObjectImplementation(oid, theDeed) {
	_classHelper = FactoryObjectHelper::instance();
}

FactoryObjectServant::~FactoryObjectServant() {
}

void FactoryObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (FactoryObject*) stub;
	InstallationObjectServant::_setStub(stub);
}

DistributedObjectStub* FactoryObjectServant::_getStub() {
	return _this;
}

