/*
 *	server/zone/objects/installation/InstallationObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "InstallationObject.h"

#include "InstallationObjectImplementation.h"

#include "../tangible/TangibleObject.h"

#include "../creature/CreatureObject.h"

#include "../player/Player.h"

#include "../tangible/deed/DeedObject.h"

#include "../../Zone.h"

/*
 *	InstallationObjectStub
 */

InstallationObject::InstallationObject(unsigned long long oid) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new InstallationObjectImplementation(oid);
	_impl->_setStub(this);
}

InstallationObject::InstallationObject(unsigned long long oid, DeedObject* deed) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new InstallationObjectImplementation(oid, deed);
	_impl->_setStub(this);
}

InstallationObject::InstallationObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

InstallationObject::~InstallationObject() {
}

void InstallationObject::sendTo(Player* player, bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->sendTo(player, doClose);
}

void InstallationObject::handleStructureRedeed(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->handleStructureRedeed(player);
}

void InstallationObject::handleStructureRedeedConfirm(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->handleStructureRedeedConfirm(player);
}

void InstallationObject::handleMakeDeed(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->handleMakeDeed(player);
}

void InstallationObject::handleStructureStatus(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->handleStructureStatus(player);
}

void InstallationObject::handleStructureAddMaintenance(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->handleStructureAddMaintenance(player);
}

void InstallationObject::handleStructureAddEnergy(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->handleStructureAddEnergy(player);
}

void InstallationObject::setOwner(const string& owner) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addAsciiParameter(owner);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setOwner(owner);
}

int InstallationObject::getDestroyCode() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getDestroyCode();
}

void InstallationObject::addMaintenance(unsigned long long maint) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addUnsignedLongParameter(maint);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->addMaintenance(maint);
}

void InstallationObject::addEnergy(unsigned long long pow) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addUnsignedLongParameter(pow);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->addEnergy(pow);
}

unsigned long long InstallationObject::getMaintenance() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getMaintenance();
}

unsigned long long InstallationObject::getEnergy() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getEnergy();
}

/*
 *	InstallationObjectAdapter
 */

InstallationObjectAdapter::InstallationObjectAdapter(InstallationObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* InstallationObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendTo((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 7:
		handleStructureRedeed((Player*) inv->getObjectParameter());
		break;
	case 8:
		handleStructureRedeedConfirm((Player*) inv->getObjectParameter());
		break;
	case 9:
		handleMakeDeed((Player*) inv->getObjectParameter());
		break;
	case 10:
		handleStructureStatus((Player*) inv->getObjectParameter());
		break;
	case 11:
		handleStructureAddMaintenance((Player*) inv->getObjectParameter());
		break;
	case 12:
		handleStructureAddEnergy((Player*) inv->getObjectParameter());
		break;
	case 13:
		setOwner(inv->getAsciiParameter(_param0_setOwner__string_));
		break;
	case 14:
		resp->insertSignedInt(getDestroyCode());
		break;
	case 15:
		addMaintenance(inv->getUnsignedLongParameter());
		break;
	case 16:
		addEnergy(inv->getUnsignedLongParameter());
		break;
	case 17:
		resp->insertLong(getMaintenance());
		break;
	case 18:
		resp->insertLong(getEnergy());
		break;
	default:
		return NULL;
	}

	return resp;
}

void InstallationObjectAdapter::sendTo(Player* player, bool doClose) {
	return ((InstallationObjectImplementation*) impl)->sendTo(player, doClose);
}

void InstallationObjectAdapter::handleStructureRedeed(Player* player) {
	return ((InstallationObjectImplementation*) impl)->handleStructureRedeed(player);
}

void InstallationObjectAdapter::handleStructureRedeedConfirm(Player* player) {
	return ((InstallationObjectImplementation*) impl)->handleStructureRedeedConfirm(player);
}

void InstallationObjectAdapter::handleMakeDeed(Player* player) {
	return ((InstallationObjectImplementation*) impl)->handleMakeDeed(player);
}

void InstallationObjectAdapter::handleStructureStatus(Player* player) {
	return ((InstallationObjectImplementation*) impl)->handleStructureStatus(player);
}

void InstallationObjectAdapter::handleStructureAddMaintenance(Player* player) {
	return ((InstallationObjectImplementation*) impl)->handleStructureAddMaintenance(player);
}

void InstallationObjectAdapter::handleStructureAddEnergy(Player* player) {
	return ((InstallationObjectImplementation*) impl)->handleStructureAddEnergy(player);
}

void InstallationObjectAdapter::setOwner(const string& owner) {
	return ((InstallationObjectImplementation*) impl)->setOwner(owner);
}

int InstallationObjectAdapter::getDestroyCode() {
	return ((InstallationObjectImplementation*) impl)->getDestroyCode();
}

void InstallationObjectAdapter::addMaintenance(unsigned long long maint) {
	return ((InstallationObjectImplementation*) impl)->addMaintenance(maint);
}

void InstallationObjectAdapter::addEnergy(unsigned long long pow) {
	return ((InstallationObjectImplementation*) impl)->addEnergy(pow);
}

unsigned long long InstallationObjectAdapter::getMaintenance() {
	return ((InstallationObjectImplementation*) impl)->getMaintenance();
}

unsigned long long InstallationObjectAdapter::getEnergy() {
	return ((InstallationObjectImplementation*) impl)->getEnergy();
}

/*
 *	InstallationObjectHelper
 */

InstallationObjectHelper* InstallationObjectHelper::staticInitializer = InstallationObjectHelper::instance();

InstallationObjectHelper::InstallationObjectHelper() {
	className = "InstallationObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void InstallationObjectHelper::finalizeHelper() {
	InstallationObjectHelper::finalize();
}

DistributedObject* InstallationObjectHelper::instantiateObject() {
	return new InstallationObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* InstallationObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new InstallationObjectAdapter((InstallationObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	InstallationObjectServant
 */

InstallationObjectServant::InstallationObjectServant(unsigned long long oid, int type) : TangibleObjectImplementation(oid, type) {
	_classHelper = InstallationObjectHelper::instance();
}

InstallationObjectServant::~InstallationObjectServant() {
}

void InstallationObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (InstallationObject*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* InstallationObjectServant::_getStub() {
	return _this;
}

