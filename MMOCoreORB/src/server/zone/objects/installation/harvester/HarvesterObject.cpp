/*
 *	server/zone/objects/installation/harvester/HarvesterObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "HarvesterObject.h"

#include "HarvesterObjectImplementation.h"

#include "../../tangible/TangibleObject.h"

#include "../../creature/CreatureObject.h"

#include "../../player/Player.h"

#include "../../tangible/deed/DeedObject.h"

#include "../InstallationObject.h"

#include "../../../Zone.h"

/*
 *	HarvesterObjectStub
 */

HarvesterObject::HarvesterObject(unsigned long long oid) : InstallationObject(DummyConstructorParameter::instance()) {
	_impl = new HarvesterObjectImplementation(oid);
	_impl->_setStub(this);
}

HarvesterObject::HarvesterObject(unsigned long long oid, DeedObject* theDeed) : InstallationObject(DummyConstructorParameter::instance()) {
	_impl = new HarvesterObjectImplementation(oid, theDeed);
	_impl->_setStub(this);
}

HarvesterObject::HarvesterObject(DummyConstructorParameter* param) : InstallationObject(param) {
}

HarvesterObject::~HarvesterObject() {
}

void HarvesterObject::insertToZone(Zone* zone) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->insertToZone(zone);
}

void HarvesterObject::sendTo(Player* player, bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->sendTo(player, doClose);
}

unsigned long long HarvesterObject::getActiveResourceID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->getActiveResourceID();
}

bool HarvesterObject::isOperating() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithBooleanReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->isOperating();
}

float HarvesterObject::getCapacity() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithFloatReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->getCapacity();
}

float HarvesterObject::getSpecRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithFloatReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->getSpecRate();
}

float HarvesterObject::getActualRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithFloatReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->getActualRate();
}

float HarvesterObject::getTotalHopperQuantity() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return method.executeWithFloatReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->getTotalHopperQuantity();
}

int HarvesterObject::getHopperSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithSignedIntReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->getHopperSize();
}

void HarvesterObject::setOwner(const string& owner) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addAsciiParameter(owner);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->setOwner(owner);
}

void HarvesterObject::update() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->update();
}

int HarvesterObject::getAvailableResourcesCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return method.executeWithSignedIntReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->getAvailableResourcesCount();
}

/*
 *	HarvesterObjectAdapter
 */

HarvesterObjectAdapter::HarvesterObjectAdapter(HarvesterObjectImplementation* obj) : InstallationObjectAdapter(obj) {
}

Packet* HarvesterObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		insertToZone((Zone*) inv->getObjectParameter());
		break;
	case 7:
		sendTo((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 8:
		resp->insertLong(getActiveResourceID());
		break;
	case 9:
		resp->insertBoolean(isOperating());
		break;
	case 10:
		resp->insertFloat(getCapacity());
		break;
	case 11:
		resp->insertFloat(getSpecRate());
		break;
	case 12:
		resp->insertFloat(getActualRate());
		break;
	case 13:
		resp->insertFloat(getTotalHopperQuantity());
		break;
	case 14:
		resp->insertSignedInt(getHopperSize());
		break;
	case 15:
		setOwner(inv->getAsciiParameter(_param0_setOwner__string_));
		break;
	case 16:
		update();
		break;
	case 17:
		resp->insertSignedInt(getAvailableResourcesCount());
		break;
	default:
		return NULL;
	}

	return resp;
}

void HarvesterObjectAdapter::insertToZone(Zone* zone) {
	return ((HarvesterObjectImplementation*) impl)->insertToZone(zone);
}

void HarvesterObjectAdapter::sendTo(Player* player, bool doClose) {
	return ((HarvesterObjectImplementation*) impl)->sendTo(player, doClose);
}

unsigned long long HarvesterObjectAdapter::getActiveResourceID() {
	return ((HarvesterObjectImplementation*) impl)->getActiveResourceID();
}

bool HarvesterObjectAdapter::isOperating() {
	return ((HarvesterObjectImplementation*) impl)->isOperating();
}

float HarvesterObjectAdapter::getCapacity() {
	return ((HarvesterObjectImplementation*) impl)->getCapacity();
}

float HarvesterObjectAdapter::getSpecRate() {
	return ((HarvesterObjectImplementation*) impl)->getSpecRate();
}

float HarvesterObjectAdapter::getActualRate() {
	return ((HarvesterObjectImplementation*) impl)->getActualRate();
}

float HarvesterObjectAdapter::getTotalHopperQuantity() {
	return ((HarvesterObjectImplementation*) impl)->getTotalHopperQuantity();
}

int HarvesterObjectAdapter::getHopperSize() {
	return ((HarvesterObjectImplementation*) impl)->getHopperSize();
}

void HarvesterObjectAdapter::setOwner(const string& owner) {
	return ((HarvesterObjectImplementation*) impl)->setOwner(owner);
}

void HarvesterObjectAdapter::update() {
	return ((HarvesterObjectImplementation*) impl)->update();
}

int HarvesterObjectAdapter::getAvailableResourcesCount() {
	return ((HarvesterObjectImplementation*) impl)->getAvailableResourcesCount();
}

/*
 *	HarvesterObjectHelper
 */

HarvesterObjectHelper* HarvesterObjectHelper::staticInitializer = HarvesterObjectHelper::instance();

HarvesterObjectHelper::HarvesterObjectHelper() {
	className = "HarvesterObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void HarvesterObjectHelper::finalizeHelper() {
	HarvesterObjectHelper::finalize();
}

DistributedObject* HarvesterObjectHelper::instantiateObject() {
	return new HarvesterObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* HarvesterObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new HarvesterObjectAdapter((HarvesterObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	HarvesterObjectServant
 */

HarvesterObjectServant::HarvesterObjectServant(unsigned long long oid) : InstallationObjectImplementation(oid) {
	_classHelper = HarvesterObjectHelper::instance();
}

HarvesterObjectServant::HarvesterObjectServant(unsigned long long oid, DeedObject* theDeed) : InstallationObjectImplementation(oid, theDeed) {
	_classHelper = HarvesterObjectHelper::instance();
}

HarvesterObjectServant::~HarvesterObjectServant() {
}

void HarvesterObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (HarvesterObject*) stub;
	InstallationObjectServant::_setStub(stub);
}

DistributedObjectStub* HarvesterObjectServant::_getStub() {
	return _this;
}

