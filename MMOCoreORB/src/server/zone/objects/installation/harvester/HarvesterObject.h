/*
 *	server/zone/objects/installation/harvester/HarvesterObject.h generated by engine3 IDL compiler 0.55
 */

#ifndef HARVESTEROBJECT_H_
#define HARVESTEROBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

class TangibleObject;

class CreatureObject;

class Player;

class DeedObject;

class InstallationObject;

class Zone;

#include "engine/service/Message.h"

#include "../InstallationObject.h"

class HarvesterObject : public InstallationObject {
public:
	HarvesterObject(unsigned long long oid);

	HarvesterObject(unsigned long long oid, DeedObject* theDeed);

	void insertToZone(Zone* zone);

	void sendTo(Player* player, bool doClose = true);

	unsigned long long getActiveResourceID();

	bool isOperating();

	float getCapacity();

	float getSpecRate();

	float getActualRate();

	float getTotalHopperQuantity();

	int getHopperSize();

	void setOwner(const string& owner);

	void update();

	int getAvailableResourcesCount();

protected:
	HarvesterObject(DummyConstructorParameter* param);

	virtual ~HarvesterObject();

	friend class HarvesterObjectHelper;
};

class HarvesterObjectImplementation;

class HarvesterObjectAdapter : public InstallationObjectAdapter {
public:
	HarvesterObjectAdapter(HarvesterObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void insertToZone(Zone* zone);

	void sendTo(Player* player, bool doClose);

	unsigned long long getActiveResourceID();

	bool isOperating();

	float getCapacity();

	float getSpecRate();

	float getActualRate();

	float getTotalHopperQuantity();

	int getHopperSize();

	void setOwner(const string& owner);

	void update();

	int getAvailableResourcesCount();

protected:
	string _param0_setOwner__string_;
};

class HarvesterObjectHelper : public DistributedObjectClassHelper, public Singleton<HarvesterObjectHelper> {
	static HarvesterObjectHelper* staticInitializer;

public:
	HarvesterObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<HarvesterObjectHelper>;
};

#include "../InstallationObjectImplementation.h"

class HarvesterObjectServant : public InstallationObjectImplementation {
public:
	HarvesterObject* _this;

public:
	HarvesterObjectServant(unsigned long long oid);
	HarvesterObjectServant(unsigned long long oid, DeedObject* theDeed);
	virtual ~HarvesterObjectServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*HARVESTEROBJECT_H_*/
