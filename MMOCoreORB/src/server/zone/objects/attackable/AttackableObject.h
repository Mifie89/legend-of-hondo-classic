/*
 *	server/zone/objects/attackable/AttackableObject.h generated by engine3 IDL compiler 0.55
 */

#ifndef ATTACKABLEOBJECT_H_
#define ATTACKABLEOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

class SceneObject;

class Player;

class Zone;

#include "../scene/SceneObject.h"

class AttackableObject : public SceneObject {
public:
	AttackableObject(unsigned long long oid);

	void insertToZone(Zone* zone);

	void removeFromZone(bool doLock = true);

	void sendDestroyTo(Player* player);

	void setTemplateName(String& name);

	String& getTemplateTypeName();

	String& getTemplateName();

	UnicodeString& getName();

	String& getTemplateDetailName();

	String& getTemplateDetail();

	void getCustomizationString(String& app);

	void setConditionDamage(unsigned int cond);

	void setMaxCondition(unsigned int maxcond);

	int getConditionDamage();

	int getMaxCondition();

	void doDamage(int damage, SceneObject* attacker);

	bool isDestroyed();

protected:
	AttackableObject(DummyConstructorParameter* param);

	virtual ~AttackableObject();

	String _return_getTemplateDetail;
	String _return_getTemplateDetailName;
	String _return_getTemplateName;
	String _return_getTemplateTypeName;

	UnicodeString _return_getName;

	friend class AttackableObjectHelper;
};

class AttackableObjectImplementation;

class AttackableObjectAdapter : public SceneObjectAdapter {
public:
	AttackableObjectAdapter(AttackableObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void insertToZone(Zone* zone);

	void removeFromZone(bool doLock);

	void sendDestroyTo(Player* player);

	void setTemplateName(String& name);

	String& getTemplateTypeName();

	String& getTemplateName();

	UnicodeString& getName();

	String& getTemplateDetailName();

	String& getTemplateDetail();

	void getCustomizationString(String& app);

	void setConditionDamage(unsigned int cond);

	void setMaxCondition(unsigned int maxcond);

	int getConditionDamage();

	int getMaxCondition();

	void doDamage(int damage, SceneObject* attacker);

	bool isDestroyed();

protected:
	String _param0_setTemplateName__String_;
	String _param0_getCustomizationString__String_;
};

class AttackableObjectHelper : public DistributedObjectClassHelper, public Singleton<AttackableObjectHelper> {
	static AttackableObjectHelper* staticInitializer;

public:
	AttackableObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<AttackableObjectHelper>;
};

#include "../scene/SceneObjectImplementation.h"

class AttackableObjectServant : public SceneObjectImplementation {
public:
	AttackableObject* _this;

public:
	AttackableObjectServant(unsigned long long oid, int type);
	virtual ~AttackableObjectServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*ATTACKABLEOBJECT_H_*/
