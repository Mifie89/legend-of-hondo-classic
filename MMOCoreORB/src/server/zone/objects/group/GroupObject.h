/*
 *	server/zone/objects/group/GroupObject.h generated by engine3 IDL compiler 0.55
 */

#ifndef GROUPOBJECT_H_
#define GROUPOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/service/proto/BaseMessage.h"

class SceneObject;

class Player;

class ChatRoom;

#include "../scene/SceneObject.h"

class GroupObject : public SceneObject {
public:
	GroupObject(unsigned long long oid, Player* leader);

	void sendTo(Player* player);

	void broadcastMessage(BaseMessage* msg);

	void addPlayer(Player* player);

	void removePlayer(Player* player);

	void disband();

	void makeLeader(Player* player);

	bool hasMember(Player* player);

	void startChannel();

	ChatRoom* getGroupChannel();

	int getListSize();

	int getGroupSize();

	Player* getGroupMember(int index);

	void addMember(Player* player);

	Player* getLeader();

	unsigned int getListCount();

	unsigned int getNewListCount(int cnt);

	float getRangerBonusForHarvesting(Player* player);

protected:
	GroupObject(DummyConstructorParameter* param);

	virtual ~GroupObject();

	friend class GroupObjectHelper;
};

class GroupObjectImplementation;

class GroupObjectAdapter : public SceneObjectAdapter {
public:
	GroupObjectAdapter(GroupObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void sendTo(Player* player);

	void broadcastMessage(BaseMessage* msg);

	void addPlayer(Player* player);

	void removePlayer(Player* player);

	void disband();

	void makeLeader(Player* player);

	bool hasMember(Player* player);

	void startChannel();

	ChatRoom* getGroupChannel();

	int getListSize();

	int getGroupSize();

	Player* getGroupMember(int index);

	void addMember(Player* player);

	Player* getLeader();

	unsigned int getListCount();

	unsigned int getNewListCount(int cnt);

	float getRangerBonusForHarvesting(Player* player);

};

class GroupObjectHelper : public DistributedObjectClassHelper, public Singleton<GroupObjectHelper> {
	static GroupObjectHelper* staticInitializer;

public:
	GroupObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<GroupObjectHelper>;
};

#include "../scene/SceneObjectImplementation.h"

class GroupObjectServant : public SceneObjectImplementation {
public:
	GroupObject* _this;

public:
	GroupObjectServant(unsigned long long oid, int type);
	virtual ~GroupObjectServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*GROUPOBJECT_H_*/
