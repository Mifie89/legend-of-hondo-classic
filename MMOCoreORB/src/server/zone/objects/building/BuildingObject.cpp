/*
 *	server/zone/objects/building/BuildingObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "BuildingObject.h"

#include "BuildingObjectImplementation.h"

#include "cell/CellObject.h"

#include "../scene/SceneObject.h"

#include "../player/Player.h"

#include "../creature/CreatureObject.h"

#include "../../Zone.h"

/*
 *	BuildingObjectStub
 */

BuildingObject::BuildingObject(unsigned long long oid, bool staticBuilding) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new BuildingObjectImplementation(oid, staticBuilding);
	_impl->_setStub(this);
}

BuildingObject::BuildingObject(DummyConstructorParameter* param) : SceneObject(param) {
}

BuildingObject::~BuildingObject() {
}

void BuildingObject::addCell(CellObject* cell) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(cell);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->addCell(cell);
}

void BuildingObject::insertToZone(Zone* zone) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->insertToZone(zone);
}

void BuildingObject::removeFromZone() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->removeFromZone();
}

void BuildingObject::notifyInsertToZone(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->notifyInsertToZone(creature);
}

bool BuildingObject::isStatic() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->isStatic();
}

int BuildingObject::getBuildingType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithSignedIntReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->getBuildingType();
}

void BuildingObject::setBuildingType(int type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addSignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setBuildingType(type);
}

void BuildingObject::lock(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->lock(doLock);
}

void BuildingObject::unlock(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->unlock(doLock);
}

void BuildingObject::setSize(float minx, float miny, float maxx, float maxy) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addFloatParameter(minx);
		method.addFloatParameter(miny);
		method.addFloatParameter(maxx);
		method.addFloatParameter(maxy);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setSize(minx, miny, maxx, maxy);
}

void BuildingObject::insert(QuadTreeEntry* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->insert(obj);
}

void BuildingObject::remove(QuadTreeEntry* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->remove(obj);
}

void BuildingObject::removeAll() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->removeAll();
}

bool BuildingObject::update(QuadTreeEntry* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(obj);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->update(obj);
}

void BuildingObject::inRange(QuadTreeEntry* obj, float range) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addObjectParameter(obj);
		method.addFloatParameter(range);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->inRange(obj, range);
}

/*
 *	BuildingObjectAdapter
 */

BuildingObjectAdapter::BuildingObjectAdapter(BuildingObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* BuildingObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		addCell((CellObject*) inv->getObjectParameter());
		break;
	case 7:
		insertToZone((Zone*) inv->getObjectParameter());
		break;
	case 8:
		removeFromZone();
		break;
	case 9:
		notifyInsertToZone((CreatureObject*) inv->getObjectParameter());
		break;
	case 10:
		resp->insertBoolean(isStatic());
		break;
	case 11:
		resp->insertSignedInt(getBuildingType());
		break;
	case 12:
		setBuildingType(inv->getSignedIntParameter());
		break;
	case 13:
		lock(inv->getBooleanParameter());
		break;
	case 14:
		unlock(inv->getBooleanParameter());
		break;
	case 15:
		setSize(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 16:
		insert((QuadTreeEntry*) inv->getObjectParameter());
		break;
	case 17:
		remove((QuadTreeEntry*) inv->getObjectParameter());
		break;
	case 18:
		removeAll();
		break;
	case 19:
		resp->insertBoolean(update((QuadTreeEntry*) inv->getObjectParameter()));
		break;
	case 20:
		inRange((QuadTreeEntry*) inv->getObjectParameter(), inv->getFloatParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void BuildingObjectAdapter::addCell(CellObject* cell) {
	return ((BuildingObjectImplementation*) impl)->addCell(cell);
}

void BuildingObjectAdapter::insertToZone(Zone* zone) {
	return ((BuildingObjectImplementation*) impl)->insertToZone(zone);
}

void BuildingObjectAdapter::removeFromZone() {
	return ((BuildingObjectImplementation*) impl)->removeFromZone();
}

void BuildingObjectAdapter::notifyInsertToZone(CreatureObject* creature) {
	return ((BuildingObjectImplementation*) impl)->notifyInsertToZone(creature);
}

bool BuildingObjectAdapter::isStatic() {
	return ((BuildingObjectImplementation*) impl)->isStatic();
}

int BuildingObjectAdapter::getBuildingType() {
	return ((BuildingObjectImplementation*) impl)->getBuildingType();
}

void BuildingObjectAdapter::setBuildingType(int type) {
	return ((BuildingObjectImplementation*) impl)->setBuildingType(type);
}

void BuildingObjectAdapter::lock(bool doLock) {
	return ((BuildingObjectImplementation*) impl)->lock(doLock);
}

void BuildingObjectAdapter::unlock(bool doLock) {
	return ((BuildingObjectImplementation*) impl)->unlock(doLock);
}

void BuildingObjectAdapter::setSize(float minx, float miny, float maxx, float maxy) {
	return ((BuildingObjectImplementation*) impl)->setSize(minx, miny, maxx, maxy);
}

void BuildingObjectAdapter::insert(QuadTreeEntry* obj) {
	return ((BuildingObjectImplementation*) impl)->insert(obj);
}

void BuildingObjectAdapter::remove(QuadTreeEntry* obj) {
	return ((BuildingObjectImplementation*) impl)->remove(obj);
}

void BuildingObjectAdapter::removeAll() {
	return ((BuildingObjectImplementation*) impl)->removeAll();
}

bool BuildingObjectAdapter::update(QuadTreeEntry* obj) {
	return ((BuildingObjectImplementation*) impl)->update(obj);
}

void BuildingObjectAdapter::inRange(QuadTreeEntry* obj, float range) {
	return ((BuildingObjectImplementation*) impl)->inRange(obj, range);
}

/*
 *	BuildingObjectHelper
 */

BuildingObjectHelper* BuildingObjectHelper::staticInitializer = BuildingObjectHelper::instance();

BuildingObjectHelper::BuildingObjectHelper() {
	className = "BuildingObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void BuildingObjectHelper::finalizeHelper() {
	BuildingObjectHelper::finalize();
}

DistributedObject* BuildingObjectHelper::instantiateObject() {
	return new BuildingObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* BuildingObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new BuildingObjectAdapter((BuildingObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	BuildingObjectServant
 */

BuildingObjectServant::BuildingObjectServant(unsigned long long oid, int type) : SceneObjectImplementation(oid, type) {
	_classHelper = BuildingObjectHelper::instance();
}

BuildingObjectServant::~BuildingObjectServant() {
}

void BuildingObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (BuildingObject*) stub;
	SceneObjectServant::_setStub(stub);
}

DistributedObjectStub* BuildingObjectServant::_getStub() {
	return _this;
}

