/*
 *	server/zone/managers/planet/PlanetManager.cpp generated by engine3 IDL compiler 0.55
 */

#include "PlanetManager.h"

#include "PlanetManagerImplementation.h"

#include "server/zone/Zone.h"

#include "../../objects/player/Player.h"

#include "../../objects/creature/shuttle/ShuttleCreature.h"

#include "../../objects/building/BuildingObject.h"

#include "../../objects/building/cell/CellObject.h"

/*
 *	PlanetManagerStub
 */

PlanetManager::PlanetManager(Zone* zone, ZoneProcessServerImplementation* processor) {
	_impl = new PlanetManagerImplementation(zone, processor);
	_impl->_setStub(this);
}

PlanetManager::PlanetManager(DummyConstructorParameter* param) {
	_impl = NULL;
}

PlanetManager::~PlanetManager() {
}

void PlanetManager::init() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((PlanetManagerImplementation*) _impl)->init();
}

void PlanetManager::start() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((PlanetManagerImplementation*) _impl)->start();
}

void PlanetManager::stop() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((PlanetManagerImplementation*) _impl)->stop();
}

unsigned long long PlanetManager::getNextStaticObjectID(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addBooleanParameter(doLock);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((PlanetManagerImplementation*) _impl)->getNextStaticObjectID(doLock);
}

void PlanetManager::landShuttles() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithVoidReturn();
	} else
		((PlanetManagerImplementation*) _impl)->landShuttles();
}

void PlanetManager::takeOffShuttles() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		((PlanetManagerImplementation*) _impl)->takeOffShuttles();
}

BuildingObject* PlanetManager::findBuildingType(const string& word, float targetX, float targetY) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addAsciiParameter(word);
		method.addFloatParameter(targetX);
		method.addFloatParameter(targetY);

		return (BuildingObject*) method.executeWithObjectReturn();
	} else
		return ((PlanetManagerImplementation*) _impl)->findBuildingType(word, targetX, targetY);
}

ShuttleCreature* PlanetManager::getShuttle(const string& Shuttle) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addAsciiParameter(Shuttle);

		return (ShuttleCreature*) method.executeWithObjectReturn();
	} else
		return ((PlanetManagerImplementation*) _impl)->getShuttle(Shuttle);
}

void PlanetManager::sendPlanetTravelPointListResponse(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((PlanetManagerImplementation*) _impl)->sendPlanetTravelPointListResponse(player);
}

CellObject* PlanetManager::getCell(unsigned long long id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addUnsignedLongParameter(id);

		return (CellObject*) method.executeWithObjectReturn();
	} else
		return ((PlanetManagerImplementation*) _impl)->getCell(id);
}

BuildingObject* PlanetManager::getBuilding(unsigned long long id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addUnsignedLongParameter(id);

		return (BuildingObject*) method.executeWithObjectReturn();
	} else
		return ((PlanetManagerImplementation*) _impl)->getBuilding(id);
}

unsigned long long PlanetManager::getLandingTime() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((PlanetManagerImplementation*) _impl)->getLandingTime();
}

unsigned int PlanetManager::getTravelFare(string& departurePlanet, string& arrivalPlanet) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addAsciiParameter(departurePlanet);
		method.addAsciiParameter(arrivalPlanet);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlanetManagerImplementation*) _impl)->getTravelFare(departurePlanet, arrivalPlanet);
}

/*
 *	PlanetManagerAdapter
 */

PlanetManagerAdapter::PlanetManagerAdapter(PlanetManagerImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* PlanetManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		init();
		break;
	case 7:
		start();
		break;
	case 8:
		stop();
		break;
	case 9:
		resp->insertLong(getNextStaticObjectID(inv->getBooleanParameter()));
		break;
	case 10:
		landShuttles();
		break;
	case 11:
		takeOffShuttles();
		break;
	case 12:
		resp->insertLong(findBuildingType(inv->getAsciiParameter(_param0_findBuildingType__string_float_float_), inv->getFloatParameter(), inv->getFloatParameter())->_getObjectID());
		break;
	case 13:
		resp->insertLong(getShuttle(inv->getAsciiParameter(_param0_getShuttle__string_))->_getObjectID());
		break;
	case 14:
		sendPlanetTravelPointListResponse((Player*) inv->getObjectParameter());
		break;
	case 15:
		resp->insertLong(getCell(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 16:
		resp->insertLong(getBuilding(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 17:
		resp->insertLong(getLandingTime());
		break;
	case 18:
		resp->insertInt(getTravelFare(inv->getAsciiParameter(_param0_getTravelFare__string_string_), inv->getAsciiParameter(_param1_getTravelFare__string_string_)));
		break;
	default:
		return NULL;
	}

	return resp;
}

void PlanetManagerAdapter::init() {
	return ((PlanetManagerImplementation*) impl)->init();
}

void PlanetManagerAdapter::start() {
	return ((PlanetManagerImplementation*) impl)->start();
}

void PlanetManagerAdapter::stop() {
	return ((PlanetManagerImplementation*) impl)->stop();
}

unsigned long long PlanetManagerAdapter::getNextStaticObjectID(bool doLock) {
	return ((PlanetManagerImplementation*) impl)->getNextStaticObjectID(doLock);
}

void PlanetManagerAdapter::landShuttles() {
	return ((PlanetManagerImplementation*) impl)->landShuttles();
}

void PlanetManagerAdapter::takeOffShuttles() {
	return ((PlanetManagerImplementation*) impl)->takeOffShuttles();
}

BuildingObject* PlanetManagerAdapter::findBuildingType(const string& word, float targetX, float targetY) {
	return ((PlanetManagerImplementation*) impl)->findBuildingType(word, targetX, targetY);
}

ShuttleCreature* PlanetManagerAdapter::getShuttle(const string& Shuttle) {
	return ((PlanetManagerImplementation*) impl)->getShuttle(Shuttle);
}

void PlanetManagerAdapter::sendPlanetTravelPointListResponse(Player* player) {
	return ((PlanetManagerImplementation*) impl)->sendPlanetTravelPointListResponse(player);
}

CellObject* PlanetManagerAdapter::getCell(unsigned long long id) {
	return ((PlanetManagerImplementation*) impl)->getCell(id);
}

BuildingObject* PlanetManagerAdapter::getBuilding(unsigned long long id) {
	return ((PlanetManagerImplementation*) impl)->getBuilding(id);
}

unsigned long long PlanetManagerAdapter::getLandingTime() {
	return ((PlanetManagerImplementation*) impl)->getLandingTime();
}

unsigned int PlanetManagerAdapter::getTravelFare(string& departurePlanet, string& arrivalPlanet) {
	return ((PlanetManagerImplementation*) impl)->getTravelFare(departurePlanet, arrivalPlanet);
}

/*
 *	PlanetManagerHelper
 */

PlanetManagerHelper* PlanetManagerHelper::staticInitializer = PlanetManagerHelper::instance();

PlanetManagerHelper::PlanetManagerHelper() {
	className = "PlanetManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void PlanetManagerHelper::finalizeHelper() {
	PlanetManagerHelper::finalize();
}

DistributedObject* PlanetManagerHelper::instantiateObject() {
	return new PlanetManager(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PlanetManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlanetManagerAdapter((PlanetManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	PlanetManagerServant
 */

PlanetManagerServant::PlanetManagerServant() {
	_classHelper = PlanetManagerHelper::instance();
}

PlanetManagerServant::~PlanetManagerServant() {
}

void PlanetManagerServant::_setStub(DistributedObjectStub* stub) {
	_this = (PlanetManager*) stub;
}

DistributedObjectStub* PlanetManagerServant::_getStub() {
	return _this;
}

