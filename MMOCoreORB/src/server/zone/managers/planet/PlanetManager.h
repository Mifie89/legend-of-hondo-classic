/*
 *	server/zone/managers/planet/PlanetManager.h generated by engine3 IDL compiler 0.55
 */

#ifndef PLANETMANAGER_H_
#define PLANETMANAGER_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/util/Coordinate.h"

class Zone;

#include "server/zone/ZoneProcessServerImplementation.h"

class Player;

class ShuttleCreature;

class BuildingObject;

class CellObject;

class DeedObject;

class MissionTerminal;

class NoBuildArea;

class PlanetManager : public DistributedObjectStub {
public:
	PlanetManager(Zone* zone, ZoneProcessServerImplementation* processor);

	void init();

	void start();

	void stop();

	unsigned long long getNextStaticObjectID(bool doLock = true);

	void landShuttles();

	void takeOffShuttles();

	BuildingObject* findBuildingType(const string& word, float targetX, float targetY);

	ShuttleCreature* getShuttle(const string& Shuttle);

	void sendPlanetTravelPointListResponse(Player* player);

	void spawnInstallation(Player* player, DeedObject* deed, float x, float z, float y, float oX, float oZ, float oY, float oW);

	void spawnHarvester(Player* player, DeedObject* deed, float x, float z, float y, float oX, float oZ, float oY, float oW);

	void spawnBuilding(Player* player, DeedObject* deed, float x, float z, float y, float oX, float oZ, float oY, float oW);

	CellObject* getCell(unsigned long long id);

	BuildingObject* getBuilding(unsigned long long id);

	MissionTerminal* getMissionTerminal(unsigned long long oid);

	unsigned long long getLandingTime();

	void placePlayerStructure(Player* player, unsigned long long objectID, float x, float y, int orient);

	unsigned int getTravelFare(string& departurePlanet, string& arrivalPlanet);

	bool isNoBuildArea(bool x, bool y);

	void addNoBuildArea(float minX, float maxX, float minY, float maxY, unsigned long long uid, unsigned char reason = 0);

	void addNoBuildArea(NoBuildArea* area);

	NoBuildArea* createNoBuildArea(float minX, float maxX, float minY, float maxY, unsigned char reason = 0);

protected:
	PlanetManager(DummyConstructorParameter* param);

	virtual ~PlanetManager();

	friend class PlanetManagerHelper;
};

class PlanetManagerImplementation;

class PlanetManagerAdapter : public DistributedObjectAdapter {
public:
	PlanetManagerAdapter(PlanetManagerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void init();

	void start();

	void stop();

	unsigned long long getNextStaticObjectID(bool doLock);

	void landShuttles();

	void takeOffShuttles();

	BuildingObject* findBuildingType(const string& word, float targetX, float targetY);

	ShuttleCreature* getShuttle(const string& Shuttle);

	void sendPlanetTravelPointListResponse(Player* player);

	void spawnInstallation(Player* player, DeedObject* deed, float x, float z, float y, float oX, float oZ, float oY, float oW);

	void spawnHarvester(Player* player, DeedObject* deed, float x, float z, float y, float oX, float oZ, float oY, float oW);

	void spawnBuilding(Player* player, DeedObject* deed, float x, float z, float y, float oX, float oZ, float oY, float oW);

	CellObject* getCell(unsigned long long id);

	BuildingObject* getBuilding(unsigned long long id);

	MissionTerminal* getMissionTerminal(unsigned long long oid);

	unsigned long long getLandingTime();

	void placePlayerStructure(Player* player, unsigned long long objectID, float x, float y, int orient);

	unsigned int getTravelFare(string& departurePlanet, string& arrivalPlanet);

	bool isNoBuildArea(bool x, bool y);

	void addNoBuildArea(float minX, float maxX, float minY, float maxY, unsigned long long uid, unsigned char reason);

	void addNoBuildArea(NoBuildArea* area);

	NoBuildArea* createNoBuildArea(float minX, float maxX, float minY, float maxY, unsigned char reason);

protected:
	string _param0_findBuildingType__string_float_float_;
	string _param0_getShuttle__string_;
	string _param0_getTravelFare__string_string_;
	string _param1_getTravelFare__string_string_;
};

class PlanetManagerHelper : public DistributedObjectClassHelper, public Singleton<PlanetManagerHelper> {
	static PlanetManagerHelper* staticInitializer;

public:
	PlanetManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<PlanetManagerHelper>;
};

class PlanetManagerServant : public DistributedObjectServant {
public:
	PlanetManager* _this;

public:
	PlanetManagerServant();
	virtual ~PlanetManagerServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*PLANETMANAGER_H_*/
