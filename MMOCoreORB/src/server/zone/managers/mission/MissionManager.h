/*
 *	server/zone/managers/mission/MissionManager.h generated by engine3 IDL compiler 0.55
 */

#ifndef MISSIONMANAGER_H_
#define MISSIONMANAGER_H_

#include "engine/orb/DistributedObjectBroker.h"

class Player;

class MissionObject;

class TangibleObject;

class ActionCreature;

class Action;

class ZoneServer;

#include "server/zone/ZoneProcessServerImplementation.h"

class MissionManager : public DistributedObjectStub {
public:
	MissionManager(ZoneServer* zs, ZoneProcessServerImplementation* ps);

	void init();

	void unloadManager();

	void removeMissions();

	MissionObject* poolMission(String& dbKey, int termMask, const String& typeStr, unsigned int descKey, unsigned int titleKey, unsigned int diffLv, float destX, float destY, unsigned int destPlanetCrc, const String& creatorName, unsigned int rewardAmount, float targetX, float targetY, unsigned int targetPlanetCrc, unsigned int depictedObjCrc, const String& descriptionStf, const String& titleStf, unsigned int typeCrc, TangibleObject* deliverItem = NULL, bool doLock = true);

	void setupHardcodeMissions();

	void sendTerminalData(Player* player, int termBitmask, bool doLock = true);

	void sendMission(Player* player, String& tKey, bool doLock = true);

	void doMissionAccept(Player* player, unsigned long long oid, bool doLock = true);

	void doMissionComplete(Player* player, String& tKey, bool doLock = true);

	void doMissionAbort(Player* player, unsigned long long oid, bool doLock = true);

	void doMissionAbort(Player* player, String& tKey, bool doLock = true);

	void doMissionSave(Player* player, const String& mkey, const String& objectivevars, const String& killcountvars, bool doLock = false);

	void deleteMissionSave(Player* player, String& mkey, bool doLock = false);

	bool hasMissionSave(Player* player, const String& mkey, bool createIfNone = false, bool doLock = false);

	void getMissionSaveVarLine(Player* player, const String& mkey, const String& dbVar, String& retStr, bool doLock = false);

	void getMisoKeysStatus(Player* player, bool finKeys, String& retStr, bool doLock = false);

	void setMisoKeyCurrent(Player* player, String& misoKey, bool remove, bool doLock = false);

	void setMisoKeyFinished(Player* player, String& misoKey, bool remove, bool doLock = false);

	void removeMisoFromPool(MissionObject* miso, bool doLock = true);

	unsigned int getMissionItemCrc(String& tKey, bool doLock = true);

	void loadMissionScripts();

	void registerFunctions();

	void registerGlobals();

protected:
	MissionManager(DummyConstructorParameter* param);

	virtual ~MissionManager();

	friend class MissionManagerHelper;
};

class MissionManagerImplementation;

class MissionManagerAdapter : public DistributedObjectAdapter {
public:
	MissionManagerAdapter(MissionManagerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void init();

	void unloadManager();

	void removeMissions();

	MissionObject* poolMission(String& dbKey, int termMask, const String& typeStr, unsigned int descKey, unsigned int titleKey, unsigned int diffLv, float destX, float destY, unsigned int destPlanetCrc, const String& creatorName, unsigned int rewardAmount, float targetX, float targetY, unsigned int targetPlanetCrc, unsigned int depictedObjCrc, const String& descriptionStf, const String& titleStf, unsigned int typeCrc, TangibleObject* deliverItem, bool doLock);

	void setupHardcodeMissions();

	void sendTerminalData(Player* player, int termBitmask, bool doLock);

	void sendMission(Player* player, String& tKey, bool doLock);

	void doMissionAccept(Player* player, unsigned long long oid, bool doLock);

	void doMissionComplete(Player* player, String& tKey, bool doLock);

	void doMissionAbort(Player* player, unsigned long long oid, bool doLock);

	void doMissionAbort(Player* player, String& tKey, bool doLock);

	void doMissionSave(Player* player, const String& mkey, const String& objectivevars, const String& killcountvars, bool doLock);

	void deleteMissionSave(Player* player, String& mkey, bool doLock);

	bool hasMissionSave(Player* player, const String& mkey, bool createIfNone, bool doLock);

	void getMissionSaveVarLine(Player* player, const String& mkey, const String& dbVar, String& retStr, bool doLock);

	void getMisoKeysStatus(Player* player, bool finKeys, String& retStr, bool doLock);

	void setMisoKeyCurrent(Player* player, String& misoKey, bool remove, bool doLock);

	void setMisoKeyFinished(Player* player, String& misoKey, bool remove, bool doLock);

	void removeMisoFromPool(MissionObject* miso, bool doLock);

	unsigned int getMissionItemCrc(String& tKey, bool doLock);

	void loadMissionScripts();

	void registerFunctions();

	void registerGlobals();

protected:
	String _param0_poolMission__String_int_String_int_int_int_float_float_int_String_int_float_float_int_int_String_String_int_TangibleObject_bool_;
	String _param2_poolMission__String_int_String_int_int_int_float_float_int_String_int_float_float_int_int_String_String_int_TangibleObject_bool_;
	String _param9_poolMission__String_int_String_int_int_int_float_float_int_String_int_float_float_int_int_String_String_int_TangibleObject_bool_;
	String _param15_poolMission__String_int_String_int_int_int_float_float_int_String_int_float_float_int_int_String_String_int_TangibleObject_bool_;
	String _param16_poolMission__String_int_String_int_int_int_float_float_int_String_int_float_float_int_int_String_String_int_TangibleObject_bool_;
	String _param1_sendMission__Player_String_bool_;
	String _param1_doMissionComplete__Player_String_bool_;
	String _param1_doMissionAbort__Player_String_bool_;
	String _param1_doMissionSave__Player_String_String_String_bool_;
	String _param2_doMissionSave__Player_String_String_String_bool_;
	String _param3_doMissionSave__Player_String_String_String_bool_;
	String _param1_deleteMissionSave__Player_String_bool_;
	String _param1_hasMissionSave__Player_String_bool_bool_;
	String _param1_getMissionSaveVarLine__Player_String_String_String_bool_;
	String _param2_getMissionSaveVarLine__Player_String_String_String_bool_;
	String _param3_getMissionSaveVarLine__Player_String_String_String_bool_;
	String _param2_getMisoKeysStatus__Player_bool_String_bool_;
	String _param1_setMisoKeyCurrent__Player_String_bool_bool_;
	String _param1_setMisoKeyFinished__Player_String_bool_bool_;
	String _param0_getMissionItemCrc__String_bool_;
};

class MissionManagerHelper : public DistributedObjectClassHelper, public Singleton<MissionManagerHelper> {
	static MissionManagerHelper* staticInitializer;

public:
	MissionManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<MissionManagerHelper>;
};

class MissionManagerServant : public DistributedObjectServant {
public:
	MissionManager* _this;

public:
	MissionManagerServant();
	virtual ~MissionManagerServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*MISSIONMANAGER_H_*/
