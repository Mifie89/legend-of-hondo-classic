/*
 *	server/zone/managers/guild/GuildManager.cpp generated by engine3 IDL compiler 0.55
 */

#include "GuildManager.h"

#include "GuildManagerImplementation.h"

#include "../../objects/guild/Guild.h"

#include "../../objects/player/Player.h"

#include "server/zone/ZoneServer.h"

#include "GuildMap.h"

/*
 *	GuildManagerStub
 */

GuildManager::GuildManager(ZoneServer* server) {
	_impl = new GuildManagerImplementation(server);
	_impl->_setStub(this);
}

GuildManager::GuildManager(DummyConstructorParameter* param) {
	_impl = NULL;
}

GuildManager::~GuildManager() {
}

void GuildManager::lock(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->lock(doLock);
}

void GuildManager::unlock(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->unlock(doLock);
}

void GuildManager::load() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->load();
}

bool GuildManager::createGuild(string& tag, string& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addAsciiParameter(tag);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else
		return ((GuildManagerImplementation*) _impl)->createGuild(tag, name);
}

Guild* GuildManager::getGuild(string& tag, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addAsciiParameter(tag);
		method.addBooleanParameter(doLock);

		return (Guild*) method.executeWithObjectReturn();
	} else
		return ((GuildManagerImplementation*) _impl)->getGuild(tag, doLock);
}

Guild* GuildManager::getGuild(unsigned int gid, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addUnsignedIntParameter(gid);
		method.addBooleanParameter(doLock);

		return (Guild*) method.executeWithObjectReturn();
	} else
		return ((GuildManagerImplementation*) _impl)->getGuild(gid, doLock);
}

bool GuildManager::removeGuild(string& tag) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addAsciiParameter(tag);

		return method.executeWithBooleanReturn();
	} else
		return ((GuildManagerImplementation*) _impl)->removeGuild(tag);
}

bool GuildManager::removeGuild(int gid, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addSignedIntParameter(gid);
		method.addBooleanParameter(doLock);

		return method.executeWithBooleanReturn();
	} else
		return ((GuildManagerImplementation*) _impl)->removeGuild(gid, doLock);
}

void GuildManager::removePlayersFromGuild(int gid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addSignedIntParameter(gid);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->removePlayersFromGuild(gid);
}

GuildMap* GuildManager::getGuildMap() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return (GuildMap*) method.executeWithObjectReturn();
	} else
		return ((GuildManagerImplementation*) _impl)->getGuildMap();
}

/*
 *	GuildManagerAdapter
 */

GuildManagerAdapter::GuildManagerAdapter(GuildManagerImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* GuildManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		lock(inv->getBooleanParameter());
		break;
	case 7:
		unlock(inv->getBooleanParameter());
		break;
	case 8:
		load();
		break;
	case 9:
		resp->insertBoolean(createGuild(inv->getAsciiParameter(_param0_createGuild__string_string_), inv->getAsciiParameter(_param1_createGuild__string_string_)));
		break;
	case 10:
		resp->insertLong(getGuild(inv->getAsciiParameter(_param0_getGuild__string_bool_), inv->getBooleanParameter())->_getObjectID());
		break;
	case 11:
		resp->insertLong(getGuild(inv->getUnsignedIntParameter(), inv->getBooleanParameter())->_getObjectID());
		break;
	case 12:
		resp->insertBoolean(removeGuild(inv->getAsciiParameter(_param0_removeGuild__string_)));
		break;
	case 13:
		resp->insertBoolean(removeGuild(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 14:
		removePlayersFromGuild(inv->getSignedIntParameter());
		break;
	case 15:
		resp->insertLong(getGuildMap()->_getObjectID());
		break;
	default:
		return NULL;
	}

	return resp;
}

void GuildManagerAdapter::lock(bool doLock) {
	return ((GuildManagerImplementation*) impl)->lock(doLock);
}

void GuildManagerAdapter::unlock(bool doLock) {
	return ((GuildManagerImplementation*) impl)->unlock(doLock);
}

void GuildManagerAdapter::load() {
	return ((GuildManagerImplementation*) impl)->load();
}

bool GuildManagerAdapter::createGuild(string& tag, string& name) {
	return ((GuildManagerImplementation*) impl)->createGuild(tag, name);
}

Guild* GuildManagerAdapter::getGuild(string& tag, bool doLock) {
	return ((GuildManagerImplementation*) impl)->getGuild(tag, doLock);
}

Guild* GuildManagerAdapter::getGuild(unsigned int gid, bool doLock) {
	return ((GuildManagerImplementation*) impl)->getGuild(gid, doLock);
}

bool GuildManagerAdapter::removeGuild(string& tag) {
	return ((GuildManagerImplementation*) impl)->removeGuild(tag);
}

bool GuildManagerAdapter::removeGuild(int gid, bool doLock) {
	return ((GuildManagerImplementation*) impl)->removeGuild(gid, doLock);
}

void GuildManagerAdapter::removePlayersFromGuild(int gid) {
	return ((GuildManagerImplementation*) impl)->removePlayersFromGuild(gid);
}

GuildMap* GuildManagerAdapter::getGuildMap() {
	return ((GuildManagerImplementation*) impl)->getGuildMap();
}

/*
 *	GuildManagerHelper
 */

GuildManagerHelper* GuildManagerHelper::staticInitializer = GuildManagerHelper::instance();

GuildManagerHelper::GuildManagerHelper() {
	className = "GuildManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void GuildManagerHelper::finalizeHelper() {
	GuildManagerHelper::finalize();
}

DistributedObject* GuildManagerHelper::instantiateObject() {
	return new GuildManager(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* GuildManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GuildManagerAdapter((GuildManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	GuildManagerServant
 */

GuildManagerServant::GuildManagerServant() {
	_classHelper = GuildManagerHelper::instance();
}

GuildManagerServant::~GuildManagerServant() {
}

void GuildManagerServant::_setStub(DistributedObjectStub* stub) {
	_this = (GuildManager*) stub;
}

DistributedObjectStub* GuildManagerServant::_getStub() {
	return _this;
}

