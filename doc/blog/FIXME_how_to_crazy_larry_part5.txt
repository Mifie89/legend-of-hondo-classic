This is where all the action takes place!Go ahead and navigate on your server to workspace/Core3/MMOCoreORB/bin/scripts/screenplays/tasks/naboo/and create a new file named merch_crazy_larry.luaCopy and paste the following code into the file, [code:38j3jqq1]CrazyLarry = ScreenPlay&#58;new {numberOfActs = 1, questString = &quot;crazy_larry_task&quot;,states = {}, }registerScreenPlay(&quot;CrazyLarry&quot;, true)function CrazyLarry&#58;start() -- Spawn our character into the world, setting pLarry a pointer variable we can use to check or change his state&#46;local pLarry = spawnMobile(&quot;naboo&quot;, &quot;merch_crazy_larry&quot;, 1, -4881, 6&#46;0, 4150, 35, 0 )endcrazylarry_convo_handler = Object&#58;new {tstring = &quot;myconversation&quot; }function crazylarry_convo_handler&#58;getNextConversationScreen(conversationTemplate, conversingPlayer, selectedOption)-- Assign the player to variable creature for use inside this function&#46;local creature = LuaCreatureObject(conversingPlayer)-- Get the last conversation to determine whetehr or not we're  on the first screenlocal convosession = creature&#58;getConversationSession()lastConversation = nillocal conversation = LuaConversationTemplate(conversationTemplate)local nextConversationScreen -- If there is a conversation open, do stuff with itif ( conversation ~= nil ) then-- check to see if we have a next screenif ( convosession ~= nil ) then local session = LuaConversationSession(convosession) if ( session ~= nil ) then lastConversationScreen = session&#58;getLastConversationScreen() endend-- Last conversation was nil, so get the first screenif ( lastConversationScreen == nil ) thennextConversationScreen = conversation&#58;getInitialScreen()else-- Start playing the rest of the conversation based on user inputlocal luaLastConversationScreen = LuaConversationScreen(lastConversationScreen)-- Set variable to track what option the player picked and get the option pickedlocal optionLink = luaLastConversationScreen&#58;getOptionLink(selectedOption)nextConversationScreen = conversation&#58;getScreen(optionLink)-- Get some information about the player&#46;local credits = creature&#58;getCashCredits()local pInventory = creature&#58;getSlottedObject(&quot;inventory&quot;)local inventory = LuaSceneObject(pInventory)-- Take action when the player makes a purchase&#46;if (inventory&#58;hasFullContainerObjects() == true) then-- Bail if the player doesn't have enough space in their inventory&#46;-- Plays a chat box message from the NPC as well as a system message&#46;nextConversationScreen = conversation&#58;getScreen(&quot;insufficient_space&quot;)creature&#58;sendSystemMessage(&quot;You do not have enough inventory space&quot;)elseif (optionLink == &quot;speederbike&quot; and credits &lt; 10000) then-- Bail if the player doesn't have enough cash on hand&#46;-- Plays a chat box message from the NPC as well as a system message&#46;nextConversationScreen = conversation&#58;getScreen(&quot;insufficient_funds&quot;)creature&#58;sendSystemMessage(&quot;You have insufficient funds&quot;)elseif (optionLink == &quot;speederbike&quot; and credits &gt;= 10000) then-- Take 10,000 credits from the player's cash on hand and give player a speederbike&#46;creature&#58;subtractCashCredits(10000)local pItem = giveItem(pInventory, &quot;object/tangible/deed/vehicle_deed/speederbike_deed&#46;iff&quot;, -1)endendend-- end of the conversation logic&#46;return nextConversationScreenendfunction crazylarry_convo_handler&#58;runScreenHandlers(conversationTemplate, conversingPlayer, conversingNPC, selectedOption, conversationScreen)-- Plays the screens of the conversation&#46;return conversationScreenend[/code:38j3jqq1]As you can see, I have put comments throughout the code to help explain the logic flow. Getting the syntax and commands right took me several hours of researching the existing SWGEmu scripting, as well reading the various tutorials on the forums, reading the wiki documentation, and chatting with some of the developers on irc. The over all architecture that allows this screenplay to function correctly in the engine is based upon [url=http&#58;//www&#46;swgemu&#46;com/forums/showthread&#46;php?t=61881:38j3jqq1]Elpete's example quest tutorial[/url:38j3jqq1]. While I am pretty confident that I have correctly noted how the architecture works, keep in mind that three days ago I didn't know how any of it worked.  <!-- s:P --><img src="{SMILIES_PATH}/icon_razz.gif" alt=":P" title="Razz" /><!-- s:P --> But, it does work very well! The important things to note are:1. How a variable is set to track what screen of the conversation the player is on.2. How a pointer (named creature) is set to the player, so that we can query things like how many credits they have and if they have enough free inventory.3. How the logic block that takes action based upon the player's choice first checks to see if they have enough inventory to receive the item and then if they have enough money to buy it. There's no sense running the rest of the logic if they don't have enough space for the item and we certainly don't want to give them the item if they don't have enough credits to buy it. 4. [b:38j3jqq1]local pItem = giveItem(pInventory, &quot;object/tangible/deed/vehicle_deed/speederbike_deed.iff&quot;, -1)[/b:38j3jqq1]This is able to place the item into the [i:38j3jqq1]player's[/i:38j3jqq1] inventory (rather than somewhere else), because we earlier defined [b:38j3jqq1]pInventory[/b:38j3jqq1] as [b:38j3jqq1]creature:getSlottedObject(&quot;inventory&quot;),[/b:38j3jqq1] where creature is the player. This is kind of an important consideration, as failing to set this correctly could, for instance, place the object into the inventory of every player lol... So, do be careful when defining these things!
